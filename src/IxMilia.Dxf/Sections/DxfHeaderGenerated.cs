// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;

namespace IxMilia.Dxf
{
    public partial class DxfHeader
    {
        // key names
        private const string ACADMAINTVER = "$ACADMAINTVER";
        private const string ACADVER = "$ACADVER";
        private const string ANGBASE = "$ANGBASE";
        private const string ANGDIR = "$ANGDIR";
        private const string ATTDIA = "$ATTDIA";
        private const string ATTMODE = "$ATTMODE";
        private const string ATTREQ = "$ATTREQ";
        private const string AUNITS = "$AUNITS";
        private const string AUPREC = "$AUPREC";
        private const string BLIPMODE = "$BLIPMODE";
        private const string CECOLOR = "$CECOLOR";
        private const string CELTSCALE = "$CELTSCALE";
        private const string CELTYPE = "$CELTYPE";
        private const string CELWEIGHT = "$CELWEIGHT";
        private const string CEPSNID = "$CEPSNID";
        private const string CEPSNTYPE = "$CEPSNTYPE";
        private const string CHAMFERA = "$CHAMFERA";
        private const string CHAMFERB = "$CHAMFERB";
        private const string CHAMFERC = "$CHAMFERC";
        private const string CHAMFERD = "$CHAMFERD";
        private const string CLAYER = "$CLAYER";
        private const string CMLJUST = "$CMLJUST";
        private const string CMLSCALE = "$CMLSCALE";
        private const string CMLSTYLE = "$CMLSTYLE";
        private const string COORDS = "$COORDS";
        private const string CPSNID = "$CPSNID";
        private const string CSHADOW = "$CSHADOW";
        private const string DELOBJ = "$DELOBJ";
        private const string DIMADEC = "$DIMADEC";
        private const string DIMALT = "$DIMALT";
        private const string DIMALTD = "$DIMALTD";
        private const string DIMALTF = "$DIMALTF";
        private const string DIMALTRND = "$DIMALTRND";
        private const string DIMALTTD = "$DIMALTTD";
        private const string DIMALTTZ = "$DIMALTTZ";
        private const string DIMALTU = "$DIMALTU";
        private const string DIMALTZ = "$DIMALTZ";
        private const string DIMAPOST = "$DIMAPOST";
        private const string DIMASO = "$DIMASO";
        private const string DIMASSOC = "$DIMASSOC";
        private const string DIMASZ = "$DIMASZ";
        private const string DIMATFIT = "$DIMATFIT";
        private const string DIMAUNIT = "$DIMAUNIT";
        private const string DIMAZIN = "$DIMAZIN";
        private const string DIMBLK = "$DIMBLK";
        private const string DIMBLK1 = "$DIMBLK1";
        private const string DIMBLK2 = "$DIMBLK2";
        private const string DIMCEN = "$DIMCEN";
        private const string DIMCLRD = "$DIMCLRD";
        private const string DIMCLRE = "$DIMCLRE";
        private const string DIMCLRT = "$DIMCLRT";
        private const string DIMDEC = "$DIMDEC";
        private const string DIMDLE = "$DIMDLE";
        private const string DIMDLI = "$DIMDLI";
        private const string DIMDSEP = "$DIMDSEP";
        private const string DIMEXE = "$DIMEXE";
        private const string DIMEXO = "$DIMEXO";
        private const string DIMFAC = "$DIMFAC";
        private const string DIMFIT = "$DIMFIT";
        private const string DIMGAP = "$DIMGAP";
        private const string DIMJUST = "$DIMJUST";
        private const string DIMLDRBLK = "$DIMLDRBLK";
        private const string DIMLFAC = "$DIMLFAC";
        private const string DIMLIM = "$DIMLIM";
        private const string DIMLUNIT = "$DIMLUNIT";
        private const string DIMPOST = "$DIMPOST";
        private const string DIMRND = "$DIMRND";
        private const string DIMSAH = "$DIMSAH";
        private const string DIMSCALE = "$DIMSCALE";
        private const string DIMSD1 = "$DIMSD1";
        private const string DIMSD2 = "$DIMSD2";
        private const string DIMSHO = "$DIMSHO";
        private const string DIMSOXD = "$DIMSOXD";
        private const string DIMSTYLE = "$DIMSTYLE";
        private const string DIMTAD = "$DIMTAD";
        private const string DIMTDEC = "$DIMTDEC";
        private const string DIMTFAC = "$DIMTFAC";
        private const string DIMTIH = "$DIMTIH";
        private const string DIMTIX = "$DIMTIX";
        private const string DIMTM = "$DIMTM";
        private const string DIMTMOVE = "$DIMTMOVE";
        private const string DIMTOFL = "$DIMTOFL";
        private const string DIMTOH = "$DIMTOH";
        private const string DIMTOL = "$DIMTOL";
        private const string DIMTOLJ = "$DIMTOLJ";
        private const string DIMTP = "$DIMTP";
        private const string DIMTSZ = "$DIMTSZ";
        private const string DIMTVP = "$DIMTVP";
        private const string DIMTXSTY = "$DIMTXSTY";
        private const string DIMTXT = "$DIMTXT";
        private const string DIMTZIN = "$DIMTZIN";
        private const string DIMUNIT = "$DIMUNIT";
        private const string DIMUPT = "$DIMUPT";
        private const string DIMZIN = "$DIMZIN";
        private const string DISPSILH = "$DISPSILH";
        private const string DRAGMODE = "$DRAGMODE";
        private const string DRAGVS = "$DRAGVS";
        private const string DWGCODEPAGE = "$DWGCODEPAGE";
        private const string ELEVATION = "$ELEVATION";
        private const string ENDCAPS = "$ENDCAPS";
        private const string EXTMAX = "$EXTMAX";
        private const string EXTMIN = "$EXTMIN";
        private const string EXTNAMES = "$EXTNAMES";
        private const string FILLETRAD = "$FILLETRAD";
        private const string FILLMODE = "$FILLMODE";
        private const string FINGERPRINTGUID = "$FINGERPRINTGUID";
        private const string HALOGAP = "$HALOGAP";
        private const string HANDLING = "$HANDLING";
        private const string HANDSEED = "$HANDSEED";
        private const string HIDETEXT = "$HIDETEXT";
        private const string HYPERLINKBASE = "$HYPERLINKBASE";
        private const string INDEXCTL = "$INDEXCTL";
        private const string INSBASE = "$INSBASE";
        private const string INSUNITS = "$INSUNITS";
        private const string INTERFERECOLOR = "$INTERFERECOLOR";
        private const string INTERFEREOBJVS = "$INTERFEREOBJVS";
        private const string INTERFEREVPVS = "$INTERFEREVPVS";
        private const string INTERSECTIONCOLOR = "$INTERSECTIONCOLOR";
        private const string INTERSECTIONDISPLAY = "$INTERSECTIONDISPLAY";
        private const string JOINSTYLE = "$JOINSTYLE";
        private const string LIMCHECK = "$LIMCHECK";
        private const string LIMMAX = "$LIMMAX";
        private const string LIMMIN = "$LIMMIN";
        private const string LTSCALE = "$LTSCALE";
        private const string LUNITS = "$LUNITS";
        private const string LUPREC = "$LUPREC";
        private const string LWDISPLAY = "$LWDISPLAY";
        private const string MAXACTVP = "$MAXACTVP";
        private const string MEASUREMENT = "$MEASUREMENT";
        private const string MENU = "$MENU";
        private const string MIRRTEXT = "$MIRRTEXT";
        private const string OBSCOLOR = "$OBSCOLOR";
        private const string OBSLTYPE = "$OBSLTYPE";
        private const string ORTHOMODE = "$ORTHOMODE";
        private const string OSMODE = "$OSMODE";
        private const string PDMODE = "$PDMODE";
        private const string PDSIZE = "$PDSIZE";
        private const string PELEVATION = "$PELEVATION";
        private const string PEXTMAX = "$PEXTMAX";
        private const string PEXTMIN = "$PEXTMIN";
        private const string PICKSTYLE = "$PICKSTYLE";
        private const string PINSBASE = "$PINSBASE";
        private const string PLIMCHECK = "$PLIMCHECK";
        private const string PLIMMAX = "$PLIMMAX";
        private const string PLIMMIN = "$PLIMMIN";
        private const string PLINEGEN = "$PLINEGEN";
        private const string PLINEWID = "$PLINEWID";
        private const string PROJECTNAME = "$PROJECTNAME";
        private const string PROXYGRAPHICS = "$PROXYGRAPHICS";
        private const string PSLTSCALE = "$PSLTSCALE";
        private const string PSTYLEMODE = "$PSTYLEMODE";
        private const string PSVPSCALE = "$PSVPSCALE";
        private const string PUCSBASE = "$PUCSBASE";
        private const string PUCSNAME = "$PUCSNAME";
        private const string PUCSORG = "$PUCSORG";
        private const string PUCSORGBACK = "$PUCSORGBACK";
        private const string PUCSORGBOTTOM = "$PUCSORGBOTTOM";
        private const string PUCSORGFRONT = "$PUCSORGFRONT";
        private const string PUCSORGLEFT = "$PUCSORGLEFT";
        private const string PUCSORGRIGHT = "$PUCSORGRIGHT";
        private const string PUCSORGTOP = "$PUCSORGTOP";
        private const string PUCSORTHOREF = "$PUCSORTHOREF";
        private const string PUCSORTHOVIEW = "$PUCSORTHOVIEW";
        private const string PUCSXDIR = "$PUCSXDIR";
        private const string PUCSYDIR = "$PUCSYDIR";
        private const string QTEXTMODE = "$QTEXTMODE";
        private const string REGENMODE = "$REGENMODE";
        private const string SHADEDGE = "$SHADEDGE";
        private const string SHADEDIF = "$SHADEDIF";
        private const string SHADOWPLANELOCATION = "$SHADOWPLANELOCATION";
        private const string SKETCHINC = "$SKETCHINC";
        private const string SKPOLY = "$SKPOLY";
        private const string SORTENTS = "$SORTENTS";
        private const string SPLFRAME = "$SPLFRAME";
        private const string SPLINESEGS = "$SPLINESEGS";
        private const string SPLINETYPE = "$SPLINETYPE";
        private const string SURFTAB1 = "$SURFTAB1";
        private const string SURFTAB2 = "$SURFTAB2";
        private const string SURFTYPE = "$SURFTYPE";
        private const string SURFU = "$SURFU";
        private const string SURFV = "$SURFV";
        private const string TDCREATE = "$TDCREATE";
        private const string TDINDWG = "$TDINDWG";
        private const string TDUCREATE = "$TDUCREATE";
        private const string TDUPDATE = "$TDUPDATE";
        private const string TDUSRTIMER = "$TDUSRTIMER";
        private const string TDUUPDATE = "$TDUUPDATE";
        private const string TEXTSIZE = "$TEXTSIZE";
        private const string TEXTSTYLE = "$TEXTSTYLE";
        private const string THICKNESS = "$THICKNESS";
        private const string TILEMODE = "$TILEMODE";
        private const string TRACEWID = "$TRACEWID";
        private const string TREEDEPTH = "$TREEDEPTH";
        private const string UCSBASE = "$UCSBASE";
        private const string UCSNAME = "$UCSNAME";
        private const string UCSORG = "$UCSORG";
        private const string UCSORGBACK = "$UCSORGBACK";
        private const string UCSORGBOTTOM = "$UCSORGBOTTOM";
        private const string UCSORGFRONT = "$UCSORGFRONT";
        private const string UCSORGLEFT = "$UCSORGLEFT";
        private const string UCSORGRIGHT = "$UCSORGRIGHT";
        private const string UCSORGTOP = "$UCSORGTOP";
        private const string UCSORTHOREF = "$UCSORTHOREF";
        private const string UCSORTHOVIEW = "$UCSORTHOVIEW";
        private const string UCSXDIR = "$UCSXDIR";
        private const string UCSYDIR = "$UCSYDIR";
        private const string UNITMODE = "$UNITMODE";
        private const string USERI1 = "$USERI1";
        private const string USERI2 = "$USERI2";
        private const string USERI3 = "$USERI3";
        private const string USERI4 = "$USERI4";
        private const string USERI5 = "$USERI5";
        private const string USERR1 = "$USERR1";
        private const string USERR2 = "$USERR2";
        private const string USERR3 = "$USERR3";
        private const string USERR4 = "$USERR4";
        private const string USERR5 = "$USERR5";
        private const string USRTIMER = "$USRTIMER";
        private const string VERSIONGUID = "$VERSIONGUID";
        private const string VISRETAIN = "$VISRETAIN";
        private const string WORLDVIEW = "$WORLDVIEW";
        private const string XCLIPFRAME = "$XCLIPFRAME";
        private const string XEDIT = "$XEDIT";

        /// <summary>
        /// The $ACADMAINTVER header variable.
        /// </summary>
        public short MaintenenceVersion { get; set; }

        /// <summary>
        /// The $ACADVER header variable.
        /// </summary>
        public DxfAcadVersion Version { get; set; }

        /// <summary>
        /// The $ANGBASE header variable.
        /// </summary>
        public double AngleZeroDirection { get; set; }

        /// <summary>
        /// The $ANGDIR header variable.
        /// </summary>
        public DxfAngleDirection AngleDirection { get; set; }

        /// <summary>
        /// The $ATTDIA header variable.
        /// </summary>
        public bool ShowAttributeEntryDialogs { get; set; }

        /// <summary>
        /// The $ATTMODE header variable.
        /// </summary>
        public DxfAttributeVisibility AttributeVisibility { get; set; }

        /// <summary>
        /// The $ATTREQ header variable.
        /// </summary>
        public bool PromptForAttributeOnInsert { get; set; }

        /// <summary>
        /// The $AUNITS header variable.
        /// </summary>
        public DxfAngleFormat AngleUnitFormat { get; set; }

        /// <summary>
        /// The $AUPREC header variable.
        /// </summary>
        public short AngleUnitPrecision { get; set; }

        /// <summary>
        /// The $BLIPMODE header variable.
        /// </summary>
        public bool BlipMode { get; set; }

        /// <summary>
        /// The $CECOLOR header variable.
        /// </summary>
        public DxfColor CurrentEntityColor { get; set; }

        /// <summary>
        /// The $CELTSCALE header variable.
        /// </summary>
        public double CurrentEntityLinetypeScale { get; set; }

        /// <summary>
        /// The $CELTYPE header variable.
        /// </summary>
        public string CurrentEntityLinetype { get; set; }

        /// <summary>
        /// The $CELWEIGHT header variable.
        /// </summary>
        public short NewObjectLineWeight { get; set; }

        /// <summary>
        /// The $CEPSNID header variable.
        /// </summary>
        public string NewObjectPlotStyleHandle { get; set; }

        /// <summary>
        /// The $CEPSNTYPE header variable.
        /// </summary>
        public DxfPlotStyle NewObjectPlotStyle { get; set; }

        /// <summary>
        /// The $CHAMFERA header variable.
        /// </summary>
        public double FirstChamferDistance { get; set; }

        /// <summary>
        /// The $CHAMFERB header variable.
        /// </summary>
        public double SecondChamferDistance { get; set; }

        /// <summary>
        /// The $CHAMFERC header variable.
        /// </summary>
        public double ChamferLength { get; set; }

        /// <summary>
        /// The $CHAMFERD header variable.
        /// </summary>
        public double ChamferAngle { get; set; }

        /// <summary>
        /// The $CLAYER header variable.
        /// </summary>
        public string CurrentLayer { get; set; }

        /// <summary>
        /// The $CMLJUST header variable.
        /// </summary>
        public DxfJustification CurrentMultilineJustification { get; set; }

        /// <summary>
        /// The $CMLSCALE header variable.
        /// </summary>
        public double CurrentMultilineScale { get; set; }

        /// <summary>
        /// The $CMLSTYLE header variable.
        /// </summary>
        public string CurrentMultilineStyle { get; set; }

        /// <summary>
        /// The $COORDS header variable.
        /// </summary>
        public DxfCoordinateDisplay CoordinateDisplay { get; set; }

        /// <summary>
        /// The $CSHADOW header variable.
        /// </summary>
        public DxfShadowMode ShadowMode { get; set; }

        /// <summary>
        /// The $DELOBJ header variable.
        /// </summary>
        public bool RetainDeletedObjects { get; set; }

        /// <summary>
        /// The $DIMADEC header variable.
        /// </summary>
        public short AngularDimensionPrecision { get; set; }

        /// <summary>
        /// The $DIMALT header variable.
        /// </summary>
        public bool UseAlternateDimensioning { get; set; }

        /// <summary>
        /// The $DIMALTD header variable.
        /// </summary>
        public short AlternateDimensioningDecimalPlaces { get; set; }

        /// <summary>
        /// The $DIMALTF header variable.
        /// </summary>
        public double AlternateDimensioningScaleFactor { get; set; }

        /// <summary>
        /// The $DIMALTRND header variable.
        /// </summary>
        public double AlternateDimensioningUnitRounding { get; set; }

        /// <summary>
        /// The $DIMALTTD header variable.
        /// </summary>
        public short AlternateDimensioningToleranceDecimalPlaces { get; set; }

        /// <summary>
        /// The $DIMALTTZ header variable.
        /// </summary>
        public DxfUnitZeroSuppression AlternateDimensioningToleranceZeroSupression { get; set; }

        /// <summary>
        /// The $DIMALTU header variable.
        /// </summary>
        public DxfUnitFormat AlternateDimensioningUnits { get; set; }

        /// <summary>
        /// The $DIMALTZ header variable.
        /// </summary>
        public DxfUnitZeroSuppression AlternateDimensioningZeroSupression { get; set; }

        /// <summary>
        /// The $DIMAPOST header variable.
        /// </summary>
        public string AlternateDimensioningSuffix { get; set; }

        /// <summary>
        /// The $DIMASO header variable.
        /// </summary>
        public bool CreateAssociativeDimensioning { get; set; }

        /// <summary>
        /// The $DIMASSOC header variable.
        /// </summary>
        public DxfDimensionAssociativity DimensionObjectAssociativity { get; set; }

        /// <summary>
        /// The $DIMASZ header variable.
        /// </summary>
        public double DimensioningArrowSize { get; set; }

        /// <summary>
        /// The $DIMATFIT header variable.
        /// </summary>
        public DxfDimensionFit DimensionTextAndArrowPlacement { get; set; }

        /// <summary>
        /// The $DIMAUNIT header variable.
        /// </summary>
        public DxfAngleFormat DimensioningAngleFormat { get; set; }

        /// <summary>
        /// The $DIMAZIN header variable.
        /// </summary>
        public DxfUnitZeroSuppression DimensionToleranceZeroSuppression { get; set; }

        /// <summary>
        /// The $DIMBLK header variable.
        /// </summary>
        public string ArrowBlockName { get; set; }

        /// <summary>
        /// The $DIMBLK1 header variable.
        /// </summary>
        public string FirstArrowBlockName { get; set; }

        /// <summary>
        /// The $DIMBLK2 header variable.
        /// </summary>
        public string SecondArrowBlockName { get; set; }

        /// <summary>
        /// The $DIMCEN header variable.
        /// </summary>
        public double CenterMarkSize { get; set; }

        /// <summary>
        /// The $DIMCLRD header variable.
        /// </summary>
        public DxfColor DimensionLineColor { get; set; }

        /// <summary>
        /// The $DIMCLRE header variable.
        /// </summary>
        public DxfColor DimensionExtensionLineColor { get; set; }

        /// <summary>
        /// The $DIMCLRT header variable.
        /// </summary>
        public DxfColor DimensionTextColor { get; set; }

        /// <summary>
        /// The $DIMDEC header variable.
        /// </summary>
        public short DimensionUnitToleranceDecimalPlaces { get; set; }

        /// <summary>
        /// The $DIMDLE header variable.
        /// </summary>
        public double DimensionLineExtension { get; set; }

        /// <summary>
        /// The $DIMDLI header variable.
        /// </summary>
        public double DimensionLineIncrement { get; set; }

        /// <summary>
        /// The $DIMDSEP header variable.
        /// </summary>
        public char DimensionDecimalSeparatorChar { get; set; }

        /// <summary>
        /// The $DIMEXE header variable.
        /// </summary>
        public double DimensionExtensionLineExtension { get; set; }

        /// <summary>
        /// The $DIMEXO header variable.
        /// </summary>
        public double DimensionExtensionLineOffset { get; set; }

        /// <summary>
        /// The $DIMFAC header variable.
        /// </summary>
        public double DimensionTextHeightScaleFactor { get; set; }

        /// <summary>
        /// The $DIMGAP header variable.
        /// </summary>
        public double DimensionLineGap { get; set; }

        /// <summary>
        /// The $DIMJUST header variable.
        /// </summary>
        public DxfDimensionTextJustification DimensionTextJustification { get; set; }

        /// <summary>
        /// The $DIMLDRBLK header variable.
        /// </summary>
        public string DimensionLeaderBlockName { get; set; }

        /// <summary>
        /// The $DIMLFAC header variable.
        /// </summary>
        public double DimensionLinearMeasurementsScaleFactor { get; set; }

        /// <summary>
        /// The $DIMLIM header variable.
        /// </summary>
        public bool GenerateDimensionLimits { get; set; }

        /// <summary>
        /// The $DIMLUNIT header variable.
        /// </summary>
        public DxfNonAngularUnits DimensionNonAngularUnits { get; set; }

        /// <summary>
        /// The $DIMPOST header variable.
        /// </summary>
        public string DimensioningSuffix { get; set; }

        /// <summary>
        /// The $DIMRND header variable.
        /// </summary>
        public double DimensionDistanceRoundingValue { get; set; }

        /// <summary>
        /// The $DIMSAH header variable.
        /// </summary>
        public bool UseSeparateArrowBlocksForDimensions { get; set; }

        /// <summary>
        /// The $DIMSCALE header variable.
        /// </summary>
        public double DimensioningScaleFactor { get; set; }

        /// <summary>
        /// The $DIMSD1 header variable.
        /// </summary>
        public bool SuppressFirstDimensionExtensionLine { get; set; }

        /// <summary>
        /// The $DIMSD2 header variable.
        /// </summary>
        public bool SuppressSecondDimensionExtensionLine { get; set; }

        /// <summary>
        /// The $DIMSHO header variable.
        /// </summary>
        public bool RecomputeDimensionsWhileDragging { get; set; }

        /// <summary>
        /// The $DIMSOXD header variable.
        /// </summary>
        public bool SuppressOutsideExtensionDimensionLines { get; set; }

        /// <summary>
        /// The $DIMSTYLE header variable.
        /// </summary>
        public string DimensionStyleName { get; set; }

        /// <summary>
        /// The $DIMTAD header variable.
        /// </summary>
        public bool TextAboveDimensionLine { get; set; }

        /// <summary>
        /// The $DIMTDEC header variable.
        /// </summary>
        public short DimensionToleranceDecimalPlaces { get; set; }

        /// <summary>
        /// The $DIMTFAC header variable.
        /// </summary>
        public double DimensionToleranceDisplayScaleFactor { get; set; }

        /// <summary>
        /// The $DIMTIH header variable.
        /// </summary>
        public bool DimensionTextInsideHorizontal { get; set; }

        /// <summary>
        /// The $DIMTIX header variable.
        /// </summary>
        public bool ForceDimensionTextInsideExtensions { get; set; }

        /// <summary>
        /// The $DIMTM header variable.
        /// </summary>
        public double DimensionMinusTolerance { get; set; }

        /// <summary>
        /// The $DIMTMOVE header variable.
        /// </summary>
        public DxfDimensionTextMovementRule DimensionTextMovementRule { get; set; }

        /// <summary>
        /// The $DIMTOFL header variable.
        /// </summary>
        public bool ForceDimensionLineExtensionsOutsideIfTextIs { get; set; }

        /// <summary>
        /// The $DIMTOH header variable.
        /// </summary>
        public bool DimensionTextOutsideHorizontal { get; set; }

        /// <summary>
        /// The $DIMTOL header variable.
        /// </summary>
        public bool GenerateDimensionTolerances { get; set; }

        /// <summary>
        /// The $DIMTOLJ header variable.
        /// </summary>
        public DxfJustification DimensionToleranceVerticalJustification { get; set; }

        /// <summary>
        /// The $DIMTP header variable.
        /// </summary>
        public double DimensionPlusTolerance { get; set; }

        /// <summary>
        /// The $DIMTSZ header variable.
        /// </summary>
        public double DimensioningTickSize { get; set; }

        /// <summary>
        /// The $DIMTVP header variable.
        /// </summary>
        public double DimensionVerticalTextPosition { get; set; }

        /// <summary>
        /// The $DIMTXSTY header variable.
        /// </summary>
        public string DimensionTextStyle { get; set; }

        /// <summary>
        /// The $DIMTXT header variable.
        /// </summary>
        public double DimensioningTextHeight { get; set; }

        /// <summary>
        /// The $DIMUNIT header variable.
        /// </summary>
        public DxfUnitFormat DimensionUnitFormat { get; set; }

        /// <summary>
        /// The $DIMUPT header variable.
        /// </summary>
        public bool DimensionCursorControlsTextPosition { get; set; }

        /// <summary>
        /// The $DIMZIN header variable.
        /// </summary>
        public DxfUnitZeroSuppression DimensionUnitZeroSuppression { get; set; }

        /// <summary>
        /// The $DISPSILH header variable.
        /// </summary>
        public bool DisplaySilhouetteCurvesInWireframeMode { get; set; }

        /// <summary>
        /// The $DRAGMODE header variable.
        /// </summary>
        public DxfDragMode DragMode { get; set; }

        /// <summary>
        /// The $DRAGVS header variable.
        /// </summary>
        public string ThreeDSolidCreationVisualStyle { get; set; }

        /// <summary>
        /// The $DWGCODEPAGE header variable.
        /// </summary>
        public string DrawingCodePage { get; set; }

        /// <summary>
        /// The $ELEVATION header variable.
        /// </summary>
        public double Elevation { get; set; }

        /// <summary>
        /// The $ENDCAPS header variable.
        /// </summary>
        public DxfEndCapSetting EndCapSetting { get; set; }

        /// <summary>
        /// The $EXTMAX header variable.
        /// </summary>
        public DxfPoint MaximumDrawingExtents { get; set; }

        /// <summary>
        /// The $EXTMIN header variable.
        /// </summary>
        public DxfPoint MinimumDrawingExtents { get; set; }

        /// <summary>
        /// The $EXTNAMES header variable.
        /// </summary>
        public bool UseACad2000SymbolTableNaming { get; set; }

        /// <summary>
        /// The $FILLETRAD header variable.
        /// </summary>
        public double FilletRadius { get; set; }

        /// <summary>
        /// The $FILLMODE header variable.
        /// </summary>
        public bool FillModeOn { get; set; }

        /// <summary>
        /// The $FINGERPRINTGUID header variable.
        /// </summary>
        public Guid FingerprintGuid { get; set; }

        /// <summary>
        /// The $HALOGAP header variable.
        /// </summary>
        public double HaloGapPercent { get; set; }

        /// <summary>
        /// The $HANDLING header variable.
        /// </summary>
        public int NextAvailableHandle { get; set; }

        /// <summary>
        /// The $HANDSEED header variable.
        /// </summary>
        public string NextAvailableHandle2 { get; set; }

        /// <summary>
        /// The $HIDETEXT header variable.
        /// </summary>
        public bool HideTextObjectsWhenProducintHiddenView { get; set; }

        /// <summary>
        /// The $HYPERLINKBASE header variable.
        /// </summary>
        public string HyperlinBase { get; set; }

        /// <summary>
        /// The $INDEXCTL header variable.
        /// </summary>
        public DxfLayerAndSpatialIndexSaveMode LayerAndSpatialIndexSaveMode { get; set; }

        /// <summary>
        /// The $INSBASE header variable.
        /// </summary>
        public DxfPoint InsertionBase { get; set; }

        /// <summary>
        /// The $INSUNITS header variable.
        /// </summary>
        public DxfUnits DefaultDrawingUnits { get; set; }

        /// <summary>
        /// The $INTERFERECOLOR header variable.
        /// </summary>
        public DxfColor InterferenceObjectColor { get; set; }

        /// <summary>
        /// The $INTERFEREOBJVS header variable.
        /// </summary>
        public string InterferenceObjectVisualStylePointer { get; set; }

        /// <summary>
        /// The $INTERFEREVPVS header variable.
        /// </summary>
        public string InterferenceViewPortVisualStylePointer { get; set; }

        /// <summary>
        /// The $INTERSECTIONCOLOR header variable.
        /// </summary>
        public DxfColor IntersectionPolylineColor { get; set; }

        /// <summary>
        /// The $INTERSECTIONDISPLAY header variable.
        /// </summary>
        public bool DisplayIntersectionPolylines { get; set; }

        /// <summary>
        /// The $JOINSTYLE header variable.
        /// </summary>
        public DxfJoinStyle LineweightJointSetting { get; set; }

        /// <summary>
        /// The $LIMCHECK header variable.
        /// </summary>
        public bool UseLimitsChecking { get; set; }

        /// <summary>
        /// The $LIMMAX header variable.
        /// </summary>
        public DxfPoint MaximumDrawingLimits { get; set; }

        /// <summary>
        /// The $LIMMIN header variable.
        /// </summary>
        public DxfPoint MinimumDrawingLimits { get; set; }

        /// <summary>
        /// The $LTSCALE header variable.
        /// </summary>
        public double LinetypeScale { get; set; }

        /// <summary>
        /// The $LUNITS header variable.
        /// </summary>
        public DxfUnitFormat UnitFormat { get; set; }

        /// <summary>
        /// The $LUPREC header variable.
        /// </summary>
        public short UnitPrecision { get; set; }

        /// <summary>
        /// The $LWDISPLAY header variable.
        /// </summary>
        public bool DisplayLinewieghtInModelAndLayoutTab { get; set; }

        /// <summary>
        /// The $MAXACTVP header variable.
        /// </summary>
        public short MaximumActiveViewports { get; set; }

        /// <summary>
        /// The $MEASUREMENT header variable.
        /// </summary>
        public DxfDrawingUnits DrawingUnits { get; set; }

        /// <summary>
        /// The $MENU header variable.
        /// </summary>
        public string FileName { get; set; }

        /// <summary>
        /// The $MIRRTEXT header variable.
        /// </summary>
        public bool MirrorText { get; set; }

        /// <summary>
        /// The $OBSCOLOR header variable.
        /// </summary>
        public DxfColor ObscuredLineColor { get; set; }

        /// <summary>
        /// The $OBSLTYPE header variable.
        /// </summary>
        public DxfLinetypeStyle ObscuredLineTypeStyle { get; set; }

        /// <summary>
        /// The $ORTHOMODE header variable.
        /// </summary>
        public bool DrawOrthoganalLines { get; set; }

        /// <summary>
        /// The $OSMODE header variable.
        /// </summary>
        public int ObjectSnapFlags { get; set; }

        /// <summary>
        /// The $PDMODE header variable.
        /// </summary>
        public int PointDisplayMode { get; set; }

        /// <summary>
        /// The $PDSIZE header variable.
        /// </summary>
        public double PointDisplaySize { get; set; }

        /// <summary>
        /// The $PELEVATION header variable.
        /// </summary>
        public double PaperspaceElevation { get; set; }

        /// <summary>
        /// The $PEXTMAX header variable.
        /// </summary>
        public DxfPoint PaperspaceMaximumDrawingExtents { get; set; }

        /// <summary>
        /// The $PEXTMIN header variable.
        /// </summary>
        public DxfPoint PaperspaceMinimumDrawingExtents { get; set; }

        /// <summary>
        /// The $PICKSTYLE header variable.
        /// </summary>
        public DxfPickStyle PickStyle { get; set; }

        /// <summary>
        /// The $PINSBASE header variable.
        /// </summary>
        public DxfPoint PaperspaceInsertionBase { get; set; }

        /// <summary>
        /// The $PLIMCHECK header variable.
        /// </summary>
        public bool LimitCheckingInPaperspace { get; set; }

        /// <summary>
        /// The $PLIMMAX header variable.
        /// </summary>
        public DxfPoint PaperspaceMaximumDrawingLimits { get; set; }

        /// <summary>
        /// The $PLIMMIN header variable.
        /// </summary>
        public DxfPoint PaperspaceMinimumDrawingLimits { get; set; }

        /// <summary>
        /// The $PLINEGEN header variable.
        /// </summary>
        public bool IsPolylineContinuousAroundVerticies { get; set; }

        /// <summary>
        /// The $PLINEWID header variable.
        /// </summary>
        public double DefaultPolylineWidth { get; set; }

        /// <summary>
        /// The $PROJECTNAME header variable.
        /// </summary>
        public string ProjectName { get; set; }

        /// <summary>
        /// The $PROXYGRAPHICS header variable.
        /// </summary>
        public bool SaveProxyGraphics { get; set; }

        /// <summary>
        /// The $PSLTSCALE header variable.
        /// </summary>
        public bool ScaleLinetypesInPaperspace { get; set; }

        /// <summary>
        /// The $PSTYLEMODE header variable.
        /// </summary>
        public bool UsesColorDependentPlotStyleTables { get; set; }

        /// <summary>
        /// The $PSVPSCALE header variable.
        /// </summary>
        public double ViewportViewScaleFactor { get; set; }

        /// <summary>
        /// The $PUCSBASE header variable.
        /// </summary>
        public string PaperspaceUCSDefinitionName { get; set; }

        /// <summary>
        /// The $PUCSNAME header variable.
        /// </summary>
        public string PaperspaceUCSName { get; set; }

        /// <summary>
        /// The $PUCSORG header variable.
        /// </summary>
        public DxfPoint PaperspaceUCSOrigin { get; set; }

        /// <summary>
        /// The $PUCSORGBACK header variable.
        /// </summary>
        public DxfPoint PaperspaceUCSOriginBack { get; set; }

        /// <summary>
        /// The $PUCSORGBOTTOM header variable.
        /// </summary>
        public DxfPoint PaperspaceUCSOriginBottom { get; set; }

        /// <summary>
        /// The $PUCSORGFRONT header variable.
        /// </summary>
        public DxfPoint PaperspaceUCSOriginFront { get; set; }

        /// <summary>
        /// The $PUCSORGLEFT header variable.
        /// </summary>
        public DxfPoint PaperspaceUCSOriginLeft { get; set; }

        /// <summary>
        /// The $PUCSORGRIGHT header variable.
        /// </summary>
        public DxfPoint PaperspaceUCSOriginRight { get; set; }

        /// <summary>
        /// The $PUCSORGTOP header variable.
        /// </summary>
        public DxfPoint PaperspaceUCSOriginTop { get; set; }

        /// <summary>
        /// The $PUCSORTHOREF header variable.
        /// </summary>
        public string PaperspaceOrthoUCSReference { get; set; }

        /// <summary>
        /// The $PUCSORTHOVIEW header variable.
        /// </summary>
        public DxfOrthographicViewType PaperspaceOrthographicViewType { get; set; }

        /// <summary>
        /// The $PUCSXDIR header variable.
        /// </summary>
        public DxfVector PaperspaceXAxis { get; set; }

        /// <summary>
        /// The $PUCSYDIR header variable.
        /// </summary>
        public DxfVector PaperspaceYAxis { get; set; }

        /// <summary>
        /// The $QTEXTMODE header variable.
        /// </summary>
        public bool UseQuickTextMode { get; set; }

        /// <summary>
        /// The $REGENMODE header variable.
        /// </summary>
        public bool UseRegenMode { get; set; }

        /// <summary>
        /// The $SHADEDGE header variable.
        /// </summary>
        public DxfShadeEdgeMode EdgeShading { get; set; }

        /// <summary>
        /// The $SHADEDIF header variable.
        /// </summary>
        public short PercentAmbientToDiffuse { get; set; }

        /// <summary>
        /// The $SHADOWPLANELOCATION header variable.
        /// </summary>
        public double ShadowPlaneZOffset { get; set; }

        /// <summary>
        /// The $SKETCHINC header variable.
        /// </summary>
        public double SketchRecordIncrement { get; set; }

        /// <summary>
        /// The $SKPOLY header variable.
        /// </summary>
        public DxfPolySketchMode PolylineSketchMode { get; set; }

        /// <summary>
        /// The $SORTENTS header variable.
        /// </summary>
        public int ObjectSortingMethodsFlags { get; set; }

        /// <summary>
        /// The $SPLFRAME header variable.
        /// </summary>
        public bool DisplaySplinePolygonControl { get; set; }

        /// <summary>
        /// The $SPLINESEGS header variable.
        /// </summary>
        public short LineSegmentsPerSplinePatch { get; set; }

        /// <summary>
        /// The $SPLINETYPE header variable.
        /// </summary>
        public short PEditSplineCurveType { get; set; }

        /// <summary>
        /// The $SURFTAB1 header variable.
        /// </summary>
        public short MeshTabulationsInFirstDirection { get; set; }

        /// <summary>
        /// The $SURFTAB2 header variable.
        /// </summary>
        public short MeshTabulationsInSecondDirection { get; set; }

        /// <summary>
        /// The $SURFTYPE header variable.
        /// </summary>
        public short PEditSmoothSurfaceType { get; set; }

        /// <summary>
        /// The $SURFU header variable.
        /// </summary>
        public short PEditSmoothMDensith { get; set; }

        /// <summary>
        /// The $SURFV header variable.
        /// </summary>
        public short PEditSmoothNDensith { get; set; }

        /// <summary>
        /// The $TDCREATE header variable.
        /// </summary>
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// The $TDINDWG header variable.
        /// </summary>
        public TimeSpan TimeInDrawing { get; set; }

        /// <summary>
        /// The $TDUCREATE header variable.
        /// </summary>
        public DateTime CreationDateUniversal { get; set; }

        /// <summary>
        /// The $TDUPDATE header variable.
        /// </summary>
        public DateTime UpdateDate { get; set; }

        /// <summary>
        /// The $TDUSRTIMER header variable.
        /// </summary>
        public TimeSpan UserElapsedTimer { get; set; }

        /// <summary>
        /// The $TDUUPDATE header variable.
        /// </summary>
        public DateTime UpdateDateUniversal { get; set; }

        /// <summary>
        /// The $TEXTSIZE header variable.
        /// </summary>
        public double DefaultTextHeight { get; set; }

        /// <summary>
        /// The $TEXTSTYLE header variable.
        /// </summary>
        public string TextStyle { get; set; }

        /// <summary>
        /// The $THICKNESS header variable.
        /// </summary>
        public double Thickness { get; set; }

        /// <summary>
        /// The $TILEMODE header variable.
        /// </summary>
        public bool PreviousReleaseTileCompatability { get; set; }

        /// <summary>
        /// The $TRACEWID header variable.
        /// </summary>
        public double TraceWidth { get; set; }

        /// <summary>
        /// The $TREEDEPTH header variable.
        /// </summary>
        public short SpacialIndexMaxDepth { get; set; }

        /// <summary>
        /// The $UCSBASE header variable.
        /// </summary>
        public string UCSDefinitionName { get; set; }

        /// <summary>
        /// The $UCSNAME header variable.
        /// </summary>
        public string UCSName { get; set; }

        /// <summary>
        /// The $UCSORG header variable.
        /// </summary>
        public DxfPoint UCSOrigin { get; set; }

        /// <summary>
        /// The $UCSORGBACK header variable.
        /// </summary>
        public DxfPoint UCSOriginBack { get; set; }

        /// <summary>
        /// The $UCSORGBOTTOM header variable.
        /// </summary>
        public DxfPoint UCSOriginBottom { get; set; }

        /// <summary>
        /// The $UCSORGFRONT header variable.
        /// </summary>
        public DxfPoint UCSOriginFront { get; set; }

        /// <summary>
        /// The $UCSORGLEFT header variable.
        /// </summary>
        public DxfPoint UCSOriginLeft { get; set; }

        /// <summary>
        /// The $UCSORGRIGHT header variable.
        /// </summary>
        public DxfPoint UCSOriginRight { get; set; }

        /// <summary>
        /// The $UCSORGTOP header variable.
        /// </summary>
        public DxfPoint UCSOriginTop { get; set; }

        /// <summary>
        /// The $UCSORTHOREF header variable.
        /// </summary>
        public string OrthoUCSReference { get; set; }

        /// <summary>
        /// The $UCSORTHOVIEW header variable.
        /// </summary>
        public DxfOrthographicViewType OrthgraphicViewType { get; set; }

        /// <summary>
        /// The $UCSXDIR header variable.
        /// </summary>
        public DxfVector UCSXAxis { get; set; }

        /// <summary>
        /// The $UCSYDIR header variable.
        /// </summary>
        public DxfVector UCSYAxis { get; set; }

        /// <summary>
        /// The $UNITMODE header variable.
        /// </summary>
        public bool DisplayFractionsInInput { get; set; }

        /// <summary>
        /// The $USERI1 header variable.
        /// </summary>
        public short UserInt1 { get; set; }

        /// <summary>
        /// The $USERI2 header variable.
        /// </summary>
        public short UserInt2 { get; set; }

        /// <summary>
        /// The $USERI3 header variable.
        /// </summary>
        public short UserInt3 { get; set; }

        /// <summary>
        /// The $USERI4 header variable.
        /// </summary>
        public short UserInt4 { get; set; }

        /// <summary>
        /// The $USERI5 header variable.
        /// </summary>
        public short UserInt5 { get; set; }

        /// <summary>
        /// The $USERR1 header variable.
        /// </summary>
        public double UserReal1 { get; set; }

        /// <summary>
        /// The $USERR2 header variable.
        /// </summary>
        public double UserReal2 { get; set; }

        /// <summary>
        /// The $USERR3 header variable.
        /// </summary>
        public double UserReal3 { get; set; }

        /// <summary>
        /// The $USERR4 header variable.
        /// </summary>
        public double UserReal4 { get; set; }

        /// <summary>
        /// The $USERR5 header variable.
        /// </summary>
        public double UserReal5 { get; set; }

        /// <summary>
        /// The $USRTIMER header variable.
        /// </summary>
        public bool UserTimerOn { get; set; }

        /// <summary>
        /// The $VERSIONGUID header variable.
        /// </summary>
        public Guid VersionGuid { get; set; }

        /// <summary>
        /// The $VISRETAIN header variable.
        /// </summary>
        public bool RetainXRefDependentVisibilitySettings { get; set; }

        /// <summary>
        /// The $WORLDVIEW header variable.
        /// </summary>
        public bool SetUCSToWCSInDViewOrVPoint { get; set; }

        /// <summary>
        /// The $XCLIPFRAME header variable.
        /// </summary>
        public bool IsXRefClippingBoundaryVisible { get; set; }

        /// <summary>
        /// The $XEDIT header variable.
        /// </summary>
        public bool CanUseInPlaceReferenceEditing { get; set; }

        // set defaults
        private void SetDefaults()
        {
            this.MaintenenceVersion = 0; // ACADMAINTVER
            this.Version = DxfAcadVersion.R14; // ACADVER
            this.AngleZeroDirection = 0.0; // ANGBASE
            this.AngleDirection = DxfAngleDirection.CounterClockwise; // ANGDIR
            this.ShowAttributeEntryDialogs = false; // ATTDIA
            this.AttributeVisibility = DxfAttributeVisibility.None; // ATTMODE
            this.PromptForAttributeOnInsert = true; // ATTREQ
            this.AngleUnitFormat = DxfAngleFormat.DecimalDegrees; // AUNITS
            this.AngleUnitPrecision = 12; // AUPREC
            this.BlipMode = false; // BLIPMODE
            this.CurrentEntityColor = DxfColor.ByBlock; // CECOLOR
            this.CurrentEntityLinetypeScale = 1.0; // CELTSCALE
            this.CurrentEntityLinetype = "BYBLOCK"; // CELTYPE
            this.NewObjectLineWeight = 0; // CELWEIGHT
            this.NewObjectPlotStyleHandle = null; // CEPSNID
            this.NewObjectPlotStyle = DxfPlotStyle.ByLayer; // CEPSNTYPE
            this.FirstChamferDistance = 0.0; // CHAMFERA
            this.SecondChamferDistance = 0.0; // CHAMFERB
            this.ChamferLength = 0.0; // CHAMFERC
            this.ChamferAngle = 0.0; // CHAMFERD
            this.CurrentLayer = "0"; // CLAYER
            this.CurrentMultilineJustification = DxfJustification.Top; // CMLJUST
            this.CurrentMultilineScale = 1.0; // CMLSCALE
            this.CurrentMultilineStyle = null; // CMLSTYLE
            this.CoordinateDisplay = DxfCoordinateDisplay.Static; // COORDS
            this.NewObjectPlotStyleHandle = null; // CPSNID
            this.ShadowMode = DxfShadowMode.CastsAndReceivesShadows; // CSHADOW
            this.RetainDeletedObjects = false; // DELOBJ
            this.AngularDimensionPrecision = 12; // DIMADEC
            this.UseAlternateDimensioning = false; // DIMALT
            this.AlternateDimensioningDecimalPlaces = 0; // DIMALTD
            this.AlternateDimensioningScaleFactor = 1.0; // DIMALTF
            this.AlternateDimensioningUnitRounding = 0.0; // DIMALTRND
            this.AlternateDimensioningToleranceDecimalPlaces = 0; // DIMALTTD
            this.AlternateDimensioningToleranceZeroSupression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMALTTZ
            this.AlternateDimensioningUnits = DxfUnitFormat.Scientific; // DIMALTU
            this.AlternateDimensioningZeroSupression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMALTZ
            this.AlternateDimensioningSuffix = null; // DIMAPOST
            this.CreateAssociativeDimensioning = true; // DIMASO
            this.DimensionObjectAssociativity = DxfDimensionAssociativity.AssociativeObjects; // DIMASSOC
            this.DimensioningArrowSize = 1.0; // DIMASZ
            this.DimensionTextAndArrowPlacement = DxfDimensionFit.TextAndArrowsOutsideLines; // DIMATFIT
            this.DimensioningAngleFormat = DxfAngleFormat.DecimalDegrees; // DIMAUNIT
            this.DimensionToleranceZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMAZIN
            this.ArrowBlockName = null; // DIMBLK
            this.FirstArrowBlockName = null; // DIMBLK1
            this.SecondArrowBlockName = null; // DIMBLK2
            this.CenterMarkSize = 1.0; // DIMCEN
            this.DimensionLineColor = DxfColor.ByBlock; // DIMCLRD
            this.DimensionExtensionLineColor = DxfColor.ByBlock; // DIMCLRE
            this.DimensionTextColor = DxfColor.ByBlock; // DIMCLRT
            this.DimensionUnitToleranceDecimalPlaces = 12; // DIMDEC
            this.DimensionLineExtension = 0.0; // DIMDLE
            this.DimensionLineIncrement = 0.0; // DIMDLI
            this.DimensionDecimalSeparatorChar = '.'; // DIMDSEP
            this.DimensionExtensionLineExtension = 0.0; // DIMEXE
            this.DimensionExtensionLineOffset = 0.0; // DIMEXO
            this.DimensionTextHeightScaleFactor = 1.0; // DIMFAC
            this.DimensionTextAndArrowPlacement = DxfDimensionFit.TextAndArrowsOutsideLines; // DIMFIT
            this.DimensionLineGap = 0.0; // DIMGAP
            this.DimensionTextJustification = DxfDimensionTextJustification.AboveLineCenter; // DIMJUST
            this.DimensionLeaderBlockName = null; // DIMLDRBLK
            this.DimensionLinearMeasurementsScaleFactor = 1.0; // DIMLFAC
            this.GenerateDimensionLimits = false; // DIMLIM
            this.DimensionNonAngularUnits = DxfNonAngularUnits.Scientific; // DIMLUNIT
            this.DimensioningSuffix = null; // DIMPOST
            this.DimensionDistanceRoundingValue = 0.001; // DIMRND
            this.UseSeparateArrowBlocksForDimensions = false; // DIMSAH
            this.DimensioningScaleFactor = 1.0; // DIMSCALE
            this.SuppressFirstDimensionExtensionLine = false; // DIMSD1
            this.SuppressSecondDimensionExtensionLine = false; // DIMSD2
            this.RecomputeDimensionsWhileDragging = true; // DIMSHO
            this.SuppressOutsideExtensionDimensionLines = false; // DIMSOXD
            this.DimensionStyleName = null; // DIMSTYLE
            this.TextAboveDimensionLine = false; // DIMTAD
            this.DimensionToleranceDecimalPlaces = 12; // DIMTDEC
            this.DimensionToleranceDisplayScaleFactor = 1.0; // DIMTFAC
            this.DimensionTextInsideHorizontal = false; // DIMTIH
            this.ForceDimensionTextInsideExtensions = false; // DIMTIX
            this.DimensionMinusTolerance = 0.0; // DIMTM
            this.DimensionTextMovementRule = DxfDimensionTextMovementRule.MoveLineWithText; // DIMTMOVE
            this.ForceDimensionLineExtensionsOutsideIfTextIs = false; // DIMTOFL
            this.DimensionTextOutsideHorizontal = false; // DIMTOH
            this.GenerateDimensionTolerances = false; // DIMTOL
            this.DimensionToleranceVerticalJustification = DxfJustification.Top; // DIMTOLJ
            this.DimensionPlusTolerance = 0.0; // DIMTP
            this.DimensioningTickSize = 0.0; // DIMTSZ
            this.DimensionVerticalTextPosition = 0.0; // DIMTVP
            this.DimensionTextStyle = null; // DIMTXSTY
            this.DimensioningTextHeight = 10.0; // DIMTXT
            this.DimensionToleranceZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMTZIN
            this.DimensionUnitFormat = DxfUnitFormat.Scientific; // DIMUNIT
            this.DimensionCursorControlsTextPosition = true; // DIMUPT
            this.DimensionUnitZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMZIN
            this.DisplaySilhouetteCurvesInWireframeMode = false; // DISPSILH
            this.DragMode = DxfDragMode.Auto; // DRAGMODE
            this.ThreeDSolidCreationVisualStyle = null; // DRAGVS
            this.DrawingCodePage = "437"; // DWGCODEPAGE
            this.Elevation = 0.0; // ELEVATION
            this.EndCapSetting = DxfEndCapSetting.None; // ENDCAPS
            this.MaximumDrawingExtents = DxfPoint.Origin; // EXTMAX
            this.MinimumDrawingExtents = DxfPoint.Origin; // EXTMIN
            this.UseACad2000SymbolTableNaming = false; // EXTNAMES
            this.FilletRadius = 0.0; // FILLETRAD
            this.FillModeOn = true; // FILLMODE
            this.FingerprintGuid = Guid.NewGuid(); // FINGERPRINTGUID
            this.HaloGapPercent = 0.0; // HALOGAP
            this.NextAvailableHandle = 0; // HANDLING
            this.NextAvailableHandle2 = ""; // HANDSEED
            this.HideTextObjectsWhenProducintHiddenView = false; // HIDETEXT
            this.HyperlinBase = null; // HYPERLINKBASE
            this.LayerAndSpatialIndexSaveMode = DxfLayerAndSpatialIndexSaveMode.None; // INDEXCTL
            this.InsertionBase = DxfPoint.Origin; // INSBASE
            this.DefaultDrawingUnits = DxfUnits.Unitless; // INSUNITS
            this.InterferenceObjectColor = DxfColor.FromIndex(1); // INTERFERECOLOR
            this.InterferenceObjectVisualStylePointer = "Conceptual"; // INTERFEREOBJVS
            this.InterferenceViewPortVisualStylePointer = "3d Wireframe"; // INTERFEREVPVS
            this.IntersectionPolylineColor = DxfColor.ByEntity; // INTERSECTIONCOLOR
            this.DisplayIntersectionPolylines = false; // INTERSECTIONDISPLAY
            this.LineweightJointSetting = DxfJoinStyle.None; // JOINSTYLE
            this.UseLimitsChecking = false; // LIMCHECK
            this.MaximumDrawingLimits = DxfPoint.Origin; // LIMMAX
            this.MinimumDrawingLimits = DxfPoint.Origin; // LIMMIN
            this.LinetypeScale = 1.0; // LTSCALE
            this.UnitFormat = DxfUnitFormat.Scientific; // LUNITS
            this.UnitPrecision = 12; // LUPREC
            this.DisplayLinewieghtInModelAndLayoutTab = false; // LWDISPLAY
            this.MaximumActiveViewports = 3; // MAXACTVP
            this.DrawingUnits = DxfDrawingUnits.English; // MEASUREMENT
            this.FileName = null; // MENU
            this.MirrorText = false; // MIRRTEXT
            this.ObscuredLineColor = DxfColor.ByLayer; // OBSCOLOR
            this.ObscuredLineTypeStyle = DxfLinetypeStyle.Off; // OBSLTYPE
            this.DrawOrthoganalLines = false; // ORTHOMODE
            this.ObjectSnapFlags = 4133; // OSMODE
            this.PointDisplayMode = 0; // PDMODE
            this.PointDisplaySize = 0.0; // PDSIZE
            this.PaperspaceElevation = 0.0; // PELEVATION
            this.PaperspaceMaximumDrawingExtents = DxfPoint.Origin; // PEXTMAX
            this.PaperspaceMinimumDrawingExtents = DxfPoint.Origin; // PEXTMIN
            this.PickStyle = DxfPickStyle.None; // PICKSTYLE
            this.PaperspaceInsertionBase = DxfPoint.Origin; // PINSBASE
            this.LimitCheckingInPaperspace = false; // PLIMCHECK
            this.PaperspaceMaximumDrawingLimits = DxfPoint.Origin; // PLIMMAX
            this.PaperspaceMinimumDrawingLimits = DxfPoint.Origin; // PLIMMIN
            this.IsPolylineContinuousAroundVerticies = true; // PLINEGEN
            this.DefaultPolylineWidth = 0.0; // PLINEWID
            this.ProjectName = null; // PROJECTNAME
            this.SaveProxyGraphics = true; // PROXYGRAPHICS
            this.ScaleLinetypesInPaperspace = true; // PSLTSCALE
            this.UsesColorDependentPlotStyleTables = false; // PSTYLEMODE
            this.ViewportViewScaleFactor = 0.0; // PSVPSCALE
            this.PaperspaceUCSDefinitionName = null; // PUCSBASE
            this.PaperspaceUCSName = null; // PUCSNAME
            this.PaperspaceUCSOrigin = DxfPoint.Origin; // PUCSORG
            this.PaperspaceUCSOriginBack = DxfPoint.Origin; // PUCSORGBACK
            this.PaperspaceUCSOriginBottom = DxfPoint.Origin; // PUCSORGBOTTOM
            this.PaperspaceUCSOriginFront = DxfPoint.Origin; // PUCSORGFRONT
            this.PaperspaceUCSOriginLeft = DxfPoint.Origin; // PUCSORGLEFT
            this.PaperspaceUCSOriginRight = DxfPoint.Origin; // PUCSORGRIGHT
            this.PaperspaceUCSOriginTop = DxfPoint.Origin; // PUCSORGTOP
            this.PaperspaceOrthoUCSReference = null; // PUCSORTHOREF
            this.PaperspaceOrthographicViewType = DxfOrthographicViewType.None; // PUCSORTHOVIEW
            this.PaperspaceXAxis = DxfVector.XAxis; // PUCSXDIR
            this.PaperspaceYAxis = DxfVector.YAxis; // PUCSYDIR
            this.UseQuickTextMode = true; // QTEXTMODE
            this.UseRegenMode = true; // REGENMODE
            this.EdgeShading = DxfShadeEdgeMode.FacesShadedEdgeNotHighlighted; // SHADEDGE
            this.PercentAmbientToDiffuse = 70; // SHADEDIF
            this.ShadowPlaneZOffset = 0.0; // SHADOWPLANELOCATION
            this.SketchRecordIncrement = 0.0; // SKETCHINC
            this.PolylineSketchMode = DxfPolySketchMode.SketchLines; // SKPOLY
            this.ObjectSortingMethodsFlags = 0; // SORTENTS
            this.DisplaySplinePolygonControl = true; // SPLFRAME
            this.LineSegmentsPerSplinePatch = 0; // SPLINESEGS
            this.PEditSplineCurveType = 0; // SPLINETYPE
            this.MeshTabulationsInFirstDirection = 0; // SURFTAB1
            this.MeshTabulationsInSecondDirection = 0; // SURFTAB2
            this.PEditSmoothSurfaceType = 0; // SURFTYPE
            this.PEditSmoothMDensith = 0; // SURFU
            this.PEditSmoothNDensith = 0; // SURFV
            this.CreationDate = DateTime.Now; // TDCREATE
            this.TimeInDrawing = TimeSpan.Zero; // TDINDWG
            this.CreationDateUniversal = DateTime.UtcNow; // TDUCREATE
            this.UpdateDate = DateTime.Now; // TDUPDATE
            this.UserElapsedTimer = TimeSpan.Zero; // TDUSRTIMER
            this.UpdateDateUniversal = DateTime.UtcNow; // TDUUPDATE
            this.DefaultTextHeight = 0.0; // TEXTSIZE
            this.TextStyle = null; // TEXTSTYLE
            this.Thickness = 0.0; // THICKNESS
            this.PreviousReleaseTileCompatability = false; // TILEMODE
            this.TraceWidth = 0.0; // TRACEWID
            this.SpacialIndexMaxDepth = 0; // TREEDEPTH
            this.UCSDefinitionName = null; // UCSBASE
            this.UCSName = null; // UCSNAME
            this.UCSOrigin = DxfPoint.Origin; // UCSORG
            this.UCSOriginBack = DxfPoint.Origin; // UCSORGBACK
            this.UCSOriginBottom = DxfPoint.Origin; // UCSORGBOTTOM
            this.UCSOriginFront = DxfPoint.Origin; // UCSORGFRONT
            this.UCSOriginLeft = DxfPoint.Origin; // UCSORGLEFT
            this.UCSOriginRight = DxfPoint.Origin; // UCSORGRIGHT
            this.UCSOriginTop = DxfPoint.Origin; // UCSORGTOP
            this.OrthoUCSReference = null; // UCSORTHOREF
            this.OrthgraphicViewType = DxfOrthographicViewType.None; // UCSORTHOVIEW
            this.UCSXAxis = DxfVector.XAxis; // UCSXDIR
            this.UCSYAxis = DxfVector.YAxis; // UCSYDIR
            this.DisplayFractionsInInput = true; // UNITMODE
            this.UserInt1 = 0; // USERI1
            this.UserInt2 = 0; // USERI2
            this.UserInt3 = 0; // USERI3
            this.UserInt4 = 0; // USERI4
            this.UserInt5 = 0; // USERI5
            this.UserReal1 = 0.0; // USERR1
            this.UserReal2 = 0.0; // USERR2
            this.UserReal3 = 0.0; // USERR3
            this.UserReal4 = 0.0; // USERR4
            this.UserReal5 = 0.0; // USERR5
            this.UserTimerOn = false; // USRTIMER
            this.VersionGuid = Guid.NewGuid(); // VERSIONGUID
            this.RetainXRefDependentVisibilitySettings = false; // VISRETAIN
            this.SetUCSToWCSInDViewOrVPoint = true; // WORLDVIEW
            this.IsXRefClippingBoundaryVisible = false; // XCLIPFRAME
            this.CanUseInPlaceReferenceEditing = false; // XEDIT
        }

        // build list of code value pairs
        internal static void AddValueToList(List<DxfCodePair> list, DxfHeader header, DxfAcadVersion version)
        {
            // ACADMAINTVER
            list.Add(new DxfCodePair(9, ACADMAINTVER));
            list.Add(new DxfCodePair(70, (header.MaintenenceVersion)));

            // ACADVER
            list.Add(new DxfCodePair(9, ACADVER));
            list.Add(new DxfCodePair(1, DxfAcadVersionStrings.VersionToString(header.Version)));

            // ANGBASE
            list.Add(new DxfCodePair(9, ANGBASE));
            list.Add(new DxfCodePair(50, (header.AngleZeroDirection)));

            // ANGDIR
            list.Add(new DxfCodePair(9, ANGDIR));
            list.Add(new DxfCodePair(70, (short)(header.AngleDirection)));

            // ATTDIA
            if (version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, ATTDIA));
                list.Add(new DxfCodePair(70, BoolShort(header.ShowAttributeEntryDialogs)));
            }

            // ATTMODE
            list.Add(new DxfCodePair(9, ATTMODE));
            list.Add(new DxfCodePair(70, (short)(header.AttributeVisibility)));

            // ATTREQ
            if (version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, ATTREQ));
                list.Add(new DxfCodePair(70, BoolShort(header.PromptForAttributeOnInsert)));
            }

            // AUNITS
            list.Add(new DxfCodePair(9, AUNITS));
            list.Add(new DxfCodePair(70, (short)(header.AngleUnitFormat)));

            // AUPREC
            list.Add(new DxfCodePair(9, AUPREC));
            list.Add(new DxfCodePair(70, (header.AngleUnitPrecision)));

            // BLIPMODE
            if (version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, BLIPMODE));
                list.Add(new DxfCodePair(70, BoolShort(header.BlipMode)));
            }

            // CECOLOR
            list.Add(new DxfCodePair(9, CECOLOR));
            list.Add(new DxfCodePair(62, DxfColor.GetRawValue(header.CurrentEntityColor)));

            // CELTSCALE
            list.Add(new DxfCodePair(9, CELTSCALE));
            list.Add(new DxfCodePair(40, (header.CurrentEntityLinetypeScale)));

            // CELTYPE
            list.Add(new DxfCodePair(9, CELTYPE));
            list.Add(new DxfCodePair(6, (header.CurrentEntityLinetype)));

            // CELWEIGHT
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, CELWEIGHT));
                list.Add(new DxfCodePair(370, (header.NewObjectLineWeight)));
            }

            // CEPSNID
            if (version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, CEPSNID));
                list.Add(new DxfCodePair(390, (header.NewObjectPlotStyleHandle)));
            }

            // CEPSNTYPE
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, CEPSNTYPE));
                list.Add(new DxfCodePair(380, (double)(header.NewObjectPlotStyle)));
            }

            // CHAMFERA
            list.Add(new DxfCodePair(9, CHAMFERA));
            list.Add(new DxfCodePair(40, (header.FirstChamferDistance)));

            // CHAMFERB
            list.Add(new DxfCodePair(9, CHAMFERB));
            list.Add(new DxfCodePair(40, (header.SecondChamferDistance)));

            // CHAMFERC
            list.Add(new DxfCodePair(9, CHAMFERC));
            list.Add(new DxfCodePair(40, (header.ChamferLength)));

            // CHAMFERD
            list.Add(new DxfCodePair(9, CHAMFERD));
            list.Add(new DxfCodePair(40, (header.ChamferAngle)));

            // CLAYER
            list.Add(new DxfCodePair(9, CLAYER));
            list.Add(new DxfCodePair(8, (header.CurrentLayer)));

            // CMLJUST
            list.Add(new DxfCodePair(9, CMLJUST));
            list.Add(new DxfCodePair(70, (short)(header.CurrentMultilineJustification)));

            // CMLSCALE
            list.Add(new DxfCodePair(9, CMLSCALE));
            list.Add(new DxfCodePair(40, (header.CurrentMultilineScale)));

            // CMLSTYLE
            list.Add(new DxfCodePair(9, CMLSTYLE));
            list.Add(new DxfCodePair(2, (header.CurrentMultilineStyle)));

            // COORDS
            if (version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, COORDS));
                list.Add(new DxfCodePair(70, (short)(header.CoordinateDisplay)));
            }

            // CPSNID
            if (version >= DxfAcadVersion.R2000 && version <= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, CPSNID));
                list.Add(new DxfCodePair(390, (header.NewObjectPlotStyleHandle)));
            }

            // CSHADOW
            if (version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, CSHADOW));
                list.Add(new DxfCodePair(280, (short)(header.ShadowMode)));
            }

            // DELOBJ
            if (version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, DELOBJ));
                list.Add(new DxfCodePair(70, BoolShort(header.RetainDeletedObjects)));
            }

            // DIMADEC
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMADEC));
                list.Add(new DxfCodePair(70, (header.AngularDimensionPrecision)));
            }

            // DIMALT
            list.Add(new DxfCodePair(9, DIMALT));
            list.Add(new DxfCodePair(70, BoolShort(header.UseAlternateDimensioning)));

            // DIMALTD
            list.Add(new DxfCodePair(9, DIMALTD));
            list.Add(new DxfCodePair(70, (header.AlternateDimensioningDecimalPlaces)));

            // DIMALTF
            list.Add(new DxfCodePair(9, DIMALTF));
            list.Add(new DxfCodePair(40, (header.AlternateDimensioningScaleFactor)));

            // DIMALTRND
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMALTRND));
                list.Add(new DxfCodePair(40, (header.AlternateDimensioningUnitRounding)));
            }

            // DIMALTTD
            list.Add(new DxfCodePair(9, DIMALTTD));
            list.Add(new DxfCodePair(70, (header.AlternateDimensioningToleranceDecimalPlaces)));

            // DIMALTTZ
            list.Add(new DxfCodePair(9, DIMALTTZ));
            list.Add(new DxfCodePair(70, (short)(header.AlternateDimensioningToleranceZeroSupression)));

            // DIMALTU
            list.Add(new DxfCodePair(9, DIMALTU));
            list.Add(new DxfCodePair(70, (short)(header.AlternateDimensioningUnits)));

            // DIMALTZ
            list.Add(new DxfCodePair(9, DIMALTZ));
            list.Add(new DxfCodePair(70, (short)(header.AlternateDimensioningZeroSupression)));

            // DIMAPOST
            list.Add(new DxfCodePair(9, DIMAPOST));
            list.Add(new DxfCodePair(1, (header.AlternateDimensioningSuffix)));

            // DIMASO
            list.Add(new DxfCodePair(9, DIMASO));
            list.Add(new DxfCodePair(70, BoolShort(header.CreateAssociativeDimensioning)));

            // DIMASSOC
            if (version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, DIMASSOC));
                list.Add(new DxfCodePair(280, (short)(header.DimensionObjectAssociativity)));
            }

            // DIMASZ
            list.Add(new DxfCodePair(9, DIMASZ));
            list.Add(new DxfCodePair(40, (header.DimensioningArrowSize)));

            // DIMATFIT
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMATFIT));
                list.Add(new DxfCodePair(70, (short)(header.DimensionTextAndArrowPlacement)));
            }

            // DIMAUNIT
            list.Add(new DxfCodePair(9, DIMAUNIT));
            list.Add(new DxfCodePair(70, (short)(header.DimensioningAngleFormat)));

            // DIMAZIN
            if (version <= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMAZIN));
                list.Add(new DxfCodePair(70, (short)(header.DimensionToleranceZeroSuppression)));
            }

            // DIMBLK
            list.Add(new DxfCodePair(9, DIMBLK));
            list.Add(new DxfCodePair(1, (header.ArrowBlockName)));

            // DIMBLK1
            list.Add(new DxfCodePair(9, DIMBLK1));
            list.Add(new DxfCodePair(1, (header.FirstArrowBlockName)));

            // DIMBLK2
            list.Add(new DxfCodePair(9, DIMBLK2));
            list.Add(new DxfCodePair(1, (header.SecondArrowBlockName)));

            // DIMCEN
            list.Add(new DxfCodePair(9, DIMCEN));
            list.Add(new DxfCodePair(40, (header.CenterMarkSize)));

            // DIMCLRD
            list.Add(new DxfCodePair(9, DIMCLRD));
            list.Add(new DxfCodePair(70, DxfColor.GetRawValue(header.DimensionLineColor)));

            // DIMCLRE
            list.Add(new DxfCodePair(9, DIMCLRE));
            list.Add(new DxfCodePair(70, DxfColor.GetRawValue(header.DimensionExtensionLineColor)));

            // DIMCLRT
            list.Add(new DxfCodePair(9, DIMCLRT));
            list.Add(new DxfCodePair(70, DxfColor.GetRawValue(header.DimensionTextColor)));

            // DIMDEC
            list.Add(new DxfCodePair(9, DIMDEC));
            list.Add(new DxfCodePair(70, (header.DimensionUnitToleranceDecimalPlaces)));

            // DIMDLE
            list.Add(new DxfCodePair(9, DIMDLE));
            list.Add(new DxfCodePair(40, (header.DimensionLineExtension)));

            // DIMDLI
            list.Add(new DxfCodePair(9, DIMDLI));
            list.Add(new DxfCodePair(40, (header.DimensionLineIncrement)));

            // DIMDSEP
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMDSEP));
                list.Add(new DxfCodePair(70, (short)(header.DimensionDecimalSeparatorChar)));
            }

            // DIMEXE
            list.Add(new DxfCodePair(9, DIMEXE));
            list.Add(new DxfCodePair(40, (header.DimensionExtensionLineExtension)));

            // DIMEXO
            list.Add(new DxfCodePair(9, DIMEXO));
            list.Add(new DxfCodePair(40, (header.DimensionExtensionLineOffset)));

            // DIMFAC
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMFAC));
                list.Add(new DxfCodePair(40, (header.DimensionTextHeightScaleFactor)));
            }

            // DIMFIT
            if (version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, DIMFIT));
                list.Add(new DxfCodePair(70, (short)(header.DimensionTextAndArrowPlacement)));
            }

            // DIMGAP
            list.Add(new DxfCodePair(9, DIMGAP));
            list.Add(new DxfCodePair(40, (header.DimensionLineGap)));

            // DIMJUST
            list.Add(new DxfCodePair(9, DIMJUST));
            list.Add(new DxfCodePair(70, (short)(header.DimensionTextJustification)));

            // DIMLDRBLK
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMLDRBLK));
                list.Add(new DxfCodePair(1, (header.DimensionLeaderBlockName)));
            }

            // DIMLFAC
            list.Add(new DxfCodePair(9, DIMLFAC));
            list.Add(new DxfCodePair(40, (header.DimensionLinearMeasurementsScaleFactor)));

            // DIMLIM
            list.Add(new DxfCodePair(9, DIMLIM));
            list.Add(new DxfCodePair(70, BoolShort(header.GenerateDimensionLimits)));

            // DIMLUNIT
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMLUNIT));
                list.Add(new DxfCodePair(70, (short)(header.DimensionNonAngularUnits)));
            }

            // DIMPOST
            list.Add(new DxfCodePair(9, DIMPOST));
            list.Add(new DxfCodePair(1, (header.DimensioningSuffix)));

            // DIMRND
            list.Add(new DxfCodePair(9, DIMRND));
            list.Add(new DxfCodePair(40, (header.DimensionDistanceRoundingValue)));

            // DIMSAH
            list.Add(new DxfCodePair(9, DIMSAH));
            list.Add(new DxfCodePair(70, BoolShort(header.UseSeparateArrowBlocksForDimensions)));

            // DIMSCALE
            list.Add(new DxfCodePair(9, DIMSCALE));
            list.Add(new DxfCodePair(40, (header.DimensioningScaleFactor)));

            // DIMSD1
            list.Add(new DxfCodePair(9, DIMSD1));
            list.Add(new DxfCodePair(70, BoolShort(header.SuppressFirstDimensionExtensionLine)));

            // DIMSD2
            list.Add(new DxfCodePair(9, DIMSD2));
            list.Add(new DxfCodePair(70, BoolShort(header.SuppressSecondDimensionExtensionLine)));

            // DIMSHO
            list.Add(new DxfCodePair(9, DIMSHO));
            list.Add(new DxfCodePair(70, BoolShort(header.RecomputeDimensionsWhileDragging)));

            // DIMSOXD
            list.Add(new DxfCodePair(9, DIMSOXD));
            list.Add(new DxfCodePair(70, BoolShort(header.SuppressOutsideExtensionDimensionLines)));

            // DIMSTYLE
            list.Add(new DxfCodePair(9, DIMSTYLE));
            list.Add(new DxfCodePair(2, (header.DimensionStyleName)));

            // DIMTAD
            list.Add(new DxfCodePair(9, DIMTAD));
            list.Add(new DxfCodePair(70, BoolShort(header.TextAboveDimensionLine)));

            // DIMTDEC
            list.Add(new DxfCodePair(9, DIMTDEC));
            list.Add(new DxfCodePair(70, (header.DimensionToleranceDecimalPlaces)));

            // DIMTFAC
            list.Add(new DxfCodePair(9, DIMTFAC));
            list.Add(new DxfCodePair(40, (header.DimensionToleranceDisplayScaleFactor)));

            // DIMTIH
            list.Add(new DxfCodePair(9, DIMTIH));
            list.Add(new DxfCodePair(70, BoolShort(header.DimensionTextInsideHorizontal)));

            // DIMTIX
            list.Add(new DxfCodePair(9, DIMTIX));
            list.Add(new DxfCodePair(70, BoolShort(header.ForceDimensionTextInsideExtensions)));

            // DIMTM
            list.Add(new DxfCodePair(9, DIMTM));
            list.Add(new DxfCodePair(40, (header.DimensionMinusTolerance)));

            // DIMTMOVE
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMTMOVE));
                list.Add(new DxfCodePair(70, (short)(header.DimensionTextMovementRule)));
            }

            // DIMTOFL
            list.Add(new DxfCodePair(9, DIMTOFL));
            list.Add(new DxfCodePair(70, BoolShort(header.ForceDimensionLineExtensionsOutsideIfTextIs)));

            // DIMTOH
            list.Add(new DxfCodePair(9, DIMTOH));
            list.Add(new DxfCodePair(70, BoolShort(header.DimensionTextOutsideHorizontal)));

            // DIMTOL
            list.Add(new DxfCodePair(9, DIMTOL));
            list.Add(new DxfCodePair(70, BoolShort(header.GenerateDimensionTolerances)));

            // DIMTOLJ
            list.Add(new DxfCodePair(9, DIMTOLJ));
            list.Add(new DxfCodePair(70, (short)(header.DimensionToleranceVerticalJustification)));

            // DIMTP
            list.Add(new DxfCodePair(9, DIMTP));
            list.Add(new DxfCodePair(40, (header.DimensionPlusTolerance)));

            // DIMTSZ
            list.Add(new DxfCodePair(9, DIMTSZ));
            list.Add(new DxfCodePair(40, (header.DimensioningTickSize)));

            // DIMTVP
            list.Add(new DxfCodePair(9, DIMTVP));
            list.Add(new DxfCodePair(40, (header.DimensionVerticalTextPosition)));

            // DIMTXSTY
            list.Add(new DxfCodePair(9, DIMTXSTY));
            list.Add(new DxfCodePair(7, (header.DimensionTextStyle)));

            // DIMTXT
            list.Add(new DxfCodePair(9, DIMTXT));
            list.Add(new DxfCodePair(40, (header.DimensioningTextHeight)));

            // DIMTZIN
            list.Add(new DxfCodePair(9, DIMTZIN));
            list.Add(new DxfCodePair(70, (short)(header.DimensionToleranceZeroSuppression)));

            // DIMUNIT
            if (version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, DIMUNIT));
                list.Add(new DxfCodePair(70, (short)(header.DimensionUnitFormat)));
            }

            // DIMUPT
            list.Add(new DxfCodePair(9, DIMUPT));
            list.Add(new DxfCodePair(70, BoolShort(header.DimensionCursorControlsTextPosition)));

            // DIMZIN
            list.Add(new DxfCodePair(9, DIMZIN));
            list.Add(new DxfCodePair(70, (short)(header.DimensionUnitZeroSuppression)));

            // DISPSILH
            list.Add(new DxfCodePair(9, DISPSILH));
            list.Add(new DxfCodePair(70, BoolShort(header.DisplaySilhouetteCurvesInWireframeMode)));

            // DRAGMODE
            if (version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, DRAGMODE));
                list.Add(new DxfCodePair(70, (short)(header.DragMode)));
            }

            // DRAGVS
            if (version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, DRAGVS));
                list.Add(new DxfCodePair(349, (header.ThreeDSolidCreationVisualStyle)));
            }

            // DWGCODEPAGE
            list.Add(new DxfCodePair(9, DWGCODEPAGE));
            list.Add(new DxfCodePair(3, (header.DrawingCodePage)));

            // ELEVATION
            list.Add(new DxfCodePair(9, ELEVATION));
            list.Add(new DxfCodePair(40, (header.Elevation)));

            // ENDCAPS
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, ENDCAPS));
                list.Add(new DxfCodePair(280, (short)(header.EndCapSetting)));
            }

            // EXTMAX
            list.Add(new DxfCodePair(9, EXTMAX));
            list.Add(new DxfCodePair(10, header.MaximumDrawingExtents.X));
            list.Add(new DxfCodePair(20, header.MaximumDrawingExtents.Y));
            list.Add(new DxfCodePair(30, header.MaximumDrawingExtents.Z));

            // EXTMIN
            list.Add(new DxfCodePair(9, EXTMIN));
            list.Add(new DxfCodePair(10, header.MinimumDrawingExtents.X));
            list.Add(new DxfCodePair(20, header.MinimumDrawingExtents.Y));
            list.Add(new DxfCodePair(30, header.MinimumDrawingExtents.Z));

            // EXTNAMES
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, EXTNAMES));
                list.Add(new DxfCodePair(290, (header.UseACad2000SymbolTableNaming)));
            }

            // FILLETRAD
            list.Add(new DxfCodePair(9, FILLETRAD));
            list.Add(new DxfCodePair(40, (header.FilletRadius)));

            // FILLMODE
            list.Add(new DxfCodePair(9, FILLMODE));
            list.Add(new DxfCodePair(70, BoolShort(header.FillModeOn)));

            // FINGERPRINTGUID
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, FINGERPRINTGUID));
                list.Add(new DxfCodePair(2, GuidString(header.FingerprintGuid)));
            }

            // HALOGAP
            if (version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, HALOGAP));
                list.Add(new DxfCodePair(280, (short)(header.HaloGapPercent)));
            }

            // HANDLING
            if (version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, HANDLING));
                list.Add(new DxfCodePair(70, (short)(header.NextAvailableHandle)));
            }

            // HANDSEED
            list.Add(new DxfCodePair(9, HANDSEED));
            list.Add(new DxfCodePair(5, (header.NextAvailableHandle2)));

            // HIDETEXT
            if (version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, HIDETEXT));
                list.Add(new DxfCodePair(290, (header.HideTextObjectsWhenProducintHiddenView)));
            }

            // HYPERLINKBASE
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, HYPERLINKBASE));
                list.Add(new DxfCodePair(1, (header.HyperlinBase)));
            }

            // INDEXCTL
            if (version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, INDEXCTL));
                list.Add(new DxfCodePair(280, (short)(header.LayerAndSpatialIndexSaveMode)));
            }

            // INSBASE
            list.Add(new DxfCodePair(9, INSBASE));
            list.Add(new DxfCodePair(10, header.InsertionBase.X));
            list.Add(new DxfCodePair(20, header.InsertionBase.Y));
            list.Add(new DxfCodePair(30, header.InsertionBase.Z));

            // INSUNITS
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, INSUNITS));
                list.Add(new DxfCodePair(70, (short)(header.DefaultDrawingUnits)));
            }

            // INTERFERECOLOR
            if (version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, INTERFERECOLOR));
                list.Add(new DxfCodePair(62, DxfColor.GetRawValue(header.InterferenceObjectColor)));
            }

            // INTERFEREOBJVS
            if (version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, INTERFEREOBJVS));
                list.Add(new DxfCodePair(345, (header.InterferenceObjectVisualStylePointer)));
            }

            // INTERFEREVPVS
            if (version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, INTERFEREVPVS));
                list.Add(new DxfCodePair(346, (header.InterferenceViewPortVisualStylePointer)));
            }

            // INTERSECTIONCOLOR
            if (version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, INTERSECTIONCOLOR));
                list.Add(new DxfCodePair(70, DxfColor.GetRawValue(header.IntersectionPolylineColor)));
            }

            // INTERSECTIONDISPLAY
            if (version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, INTERSECTIONDISPLAY));
                list.Add(new DxfCodePair(290, (header.DisplayIntersectionPolylines)));
            }

            // JOINSTYLE
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, JOINSTYLE));
                list.Add(new DxfCodePair(280, (short)(header.LineweightJointSetting)));
            }

            // LIMCHECK
            list.Add(new DxfCodePair(9, LIMCHECK));
            list.Add(new DxfCodePair(70, BoolShort(header.UseLimitsChecking)));

            // LIMMAX
            list.Add(new DxfCodePair(9, LIMMAX));
            list.Add(new DxfCodePair(10, header.MaximumDrawingLimits.X));
            list.Add(new DxfCodePair(20, header.MaximumDrawingLimits.Y));

            // LIMMIN
            list.Add(new DxfCodePair(9, LIMMIN));
            list.Add(new DxfCodePair(10, header.MinimumDrawingLimits.X));
            list.Add(new DxfCodePair(20, header.MinimumDrawingLimits.Y));

            // LTSCALE
            list.Add(new DxfCodePair(9, LTSCALE));
            list.Add(new DxfCodePair(40, (header.LinetypeScale)));

            // LUNITS
            list.Add(new DxfCodePair(9, LUNITS));
            list.Add(new DxfCodePair(70, (short)(header.UnitFormat)));

            // LUPREC
            list.Add(new DxfCodePair(9, LUPREC));
            list.Add(new DxfCodePair(70, (header.UnitPrecision)));

            // LWDISPLAY
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, LWDISPLAY));
                list.Add(new DxfCodePair(290, (header.DisplayLinewieghtInModelAndLayoutTab)));
            }

            // MAXACTVP
            list.Add(new DxfCodePair(9, MAXACTVP));
            list.Add(new DxfCodePair(70, (header.MaximumActiveViewports)));

            // MEASUREMENT
            list.Add(new DxfCodePair(9, MEASUREMENT));
            list.Add(new DxfCodePair(70, (short)(header.DrawingUnits)));

            // MENU
            list.Add(new DxfCodePair(9, MENU));
            list.Add(new DxfCodePair(1, (header.FileName)));

            // MIRRTEXT
            list.Add(new DxfCodePair(9, MIRRTEXT));
            list.Add(new DxfCodePair(70, BoolShort(header.MirrorText)));

            // OBSCOLOR
            if (version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, OBSCOLOR));
                list.Add(new DxfCodePair(70, DxfColor.GetRawValue(header.ObscuredLineColor)));
            }

            // OBSLTYPE
            if (version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, OBSLTYPE));
                list.Add(new DxfCodePair(280, (short)(header.ObscuredLineTypeStyle)));
            }

            // ORTHOMODE
            list.Add(new DxfCodePair(9, ORTHOMODE));
            list.Add(new DxfCodePair(70, BoolShort(header.DrawOrthoganalLines)));

            // OSMODE
            if (version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, OSMODE));
                list.Add(new DxfCodePair(70, (short)(header.ObjectSnapFlags)));
            }

            // PDMODE
            list.Add(new DxfCodePair(9, PDMODE));
            list.Add(new DxfCodePair(70, (short)(header.PointDisplayMode)));

            // PDSIZE
            list.Add(new DxfCodePair(9, PDSIZE));
            list.Add(new DxfCodePair(40, (header.PointDisplaySize)));

            // PELEVATION
            list.Add(new DxfCodePair(9, PELEVATION));
            list.Add(new DxfCodePair(40, (header.PaperspaceElevation)));

            // PEXTMAX
            list.Add(new DxfCodePair(9, PEXTMAX));
            list.Add(new DxfCodePair(10, header.PaperspaceMaximumDrawingExtents.X));
            list.Add(new DxfCodePair(20, header.PaperspaceMaximumDrawingExtents.Y));
            list.Add(new DxfCodePair(30, header.PaperspaceMaximumDrawingExtents.Z));

            // PEXTMIN
            list.Add(new DxfCodePair(9, PEXTMIN));
            list.Add(new DxfCodePair(10, header.PaperspaceMinimumDrawingExtents.X));
            list.Add(new DxfCodePair(20, header.PaperspaceMinimumDrawingExtents.Y));
            list.Add(new DxfCodePair(30, header.PaperspaceMinimumDrawingExtents.Z));

            // PICKSTYLE
            if (version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, PICKSTYLE));
                list.Add(new DxfCodePair(70, (short)(header.PickStyle)));
            }

            // PINSBASE
            list.Add(new DxfCodePair(9, PINSBASE));
            list.Add(new DxfCodePair(10, header.PaperspaceInsertionBase.X));
            list.Add(new DxfCodePair(20, header.PaperspaceInsertionBase.Y));
            list.Add(new DxfCodePair(30, header.PaperspaceInsertionBase.Z));

            // PLIMCHECK
            list.Add(new DxfCodePair(9, PLIMCHECK));
            list.Add(new DxfCodePair(70, BoolShort(header.LimitCheckingInPaperspace)));

            // PLIMMAX
            list.Add(new DxfCodePair(9, PLIMMAX));
            list.Add(new DxfCodePair(10, header.PaperspaceMaximumDrawingLimits.X));
            list.Add(new DxfCodePair(20, header.PaperspaceMaximumDrawingLimits.Y));

            // PLIMMIN
            list.Add(new DxfCodePair(9, PLIMMIN));
            list.Add(new DxfCodePair(10, header.PaperspaceMinimumDrawingLimits.X));
            list.Add(new DxfCodePair(20, header.PaperspaceMinimumDrawingLimits.Y));

            // PLINEGEN
            list.Add(new DxfCodePair(9, PLINEGEN));
            list.Add(new DxfCodePair(70, BoolShort(header.IsPolylineContinuousAroundVerticies)));

            // PLINEWID
            list.Add(new DxfCodePair(9, PLINEWID));
            list.Add(new DxfCodePair(40, (header.DefaultPolylineWidth)));

            // PROJECTNAME
            if (version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, PROJECTNAME));
                list.Add(new DxfCodePair(1, (header.ProjectName)));
            }

            // PROXYGRAPHICS
            list.Add(new DxfCodePair(9, PROXYGRAPHICS));
            list.Add(new DxfCodePair(70, BoolShort(header.SaveProxyGraphics)));

            // PSLTSCALE
            list.Add(new DxfCodePair(9, PSLTSCALE));
            list.Add(new DxfCodePair(70, BoolShort(header.ScaleLinetypesInPaperspace)));

            // PSTYLEMODE
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PSTYLEMODE));
                list.Add(new DxfCodePair(290, (header.UsesColorDependentPlotStyleTables)));
            }

            // PSVPSCALE
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PSVPSCALE));
                list.Add(new DxfCodePair(40, (header.ViewportViewScaleFactor)));
            }

            // PUCSBASE
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSBASE));
                list.Add(new DxfCodePair(2, (header.PaperspaceUCSDefinitionName)));
            }

            // PUCSNAME
            list.Add(new DxfCodePair(9, PUCSNAME));
            list.Add(new DxfCodePair(2, (header.PaperspaceUCSName)));

            // PUCSORG
            list.Add(new DxfCodePair(9, PUCSORG));
            list.Add(new DxfCodePair(10, header.PaperspaceUCSOrigin.X));
            list.Add(new DxfCodePair(20, header.PaperspaceUCSOrigin.Y));
            list.Add(new DxfCodePair(30, header.PaperspaceUCSOrigin.Z));

            // PUCSORGBACK
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORGBACK));
                list.Add(new DxfCodePair(10, header.PaperspaceUCSOriginBack.X));
                list.Add(new DxfCodePair(20, header.PaperspaceUCSOriginBack.Y));
                list.Add(new DxfCodePair(30, header.PaperspaceUCSOriginBack.Z));
            }

            // PUCSORGBOTTOM
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORGBOTTOM));
                list.Add(new DxfCodePair(10, header.PaperspaceUCSOriginBottom.X));
                list.Add(new DxfCodePair(20, header.PaperspaceUCSOriginBottom.Y));
                list.Add(new DxfCodePair(30, header.PaperspaceUCSOriginBottom.Z));
            }

            // PUCSORGFRONT
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORGFRONT));
                list.Add(new DxfCodePair(10, header.PaperspaceUCSOriginFront.X));
                list.Add(new DxfCodePair(20, header.PaperspaceUCSOriginFront.Y));
                list.Add(new DxfCodePair(30, header.PaperspaceUCSOriginFront.Z));
            }

            // PUCSORGLEFT
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORGLEFT));
                list.Add(new DxfCodePair(10, header.PaperspaceUCSOriginLeft.X));
                list.Add(new DxfCodePair(20, header.PaperspaceUCSOriginLeft.Y));
                list.Add(new DxfCodePair(30, header.PaperspaceUCSOriginLeft.Z));
            }

            // PUCSORGRIGHT
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORGRIGHT));
                list.Add(new DxfCodePair(10, header.PaperspaceUCSOriginRight.X));
                list.Add(new DxfCodePair(20, header.PaperspaceUCSOriginRight.Y));
                list.Add(new DxfCodePair(30, header.PaperspaceUCSOriginRight.Z));
            }

            // PUCSORGTOP
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORGTOP));
                list.Add(new DxfCodePair(10, header.PaperspaceUCSOriginTop.X));
                list.Add(new DxfCodePair(20, header.PaperspaceUCSOriginTop.Y));
                list.Add(new DxfCodePair(30, header.PaperspaceUCSOriginTop.Z));
            }

            // PUCSORTHOREF
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORTHOREF));
                list.Add(new DxfCodePair(2, (header.PaperspaceOrthoUCSReference)));
            }

            // PUCSORTHOVIEW
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORTHOVIEW));
                list.Add(new DxfCodePair(70, (short)(header.PaperspaceOrthographicViewType)));
            }

            // PUCSXDIR
            list.Add(new DxfCodePair(9, PUCSXDIR));
            list.Add(new DxfCodePair(10, header.PaperspaceXAxis.X));
            list.Add(new DxfCodePair(20, header.PaperspaceXAxis.Y));
            list.Add(new DxfCodePair(30, header.PaperspaceXAxis.Z));

            // PUCSYDIR
            list.Add(new DxfCodePair(9, PUCSYDIR));
            list.Add(new DxfCodePair(10, header.PaperspaceYAxis.X));
            list.Add(new DxfCodePair(20, header.PaperspaceYAxis.Y));
            list.Add(new DxfCodePair(30, header.PaperspaceYAxis.Z));

            // QTEXTMODE
            list.Add(new DxfCodePair(9, QTEXTMODE));
            list.Add(new DxfCodePair(70, BoolShort(header.UseQuickTextMode)));

            // REGENMODE
            list.Add(new DxfCodePair(9, REGENMODE));
            list.Add(new DxfCodePair(70, BoolShort(header.UseRegenMode)));

            // SHADEDGE
            list.Add(new DxfCodePair(9, SHADEDGE));
            list.Add(new DxfCodePair(70, (short)(header.EdgeShading)));

            // SHADEDIF
            list.Add(new DxfCodePair(9, SHADEDIF));
            list.Add(new DxfCodePair(70, (header.PercentAmbientToDiffuse)));

            // SHADOWPLANELOCATION
            if (version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, SHADOWPLANELOCATION));
                list.Add(new DxfCodePair(40, (header.ShadowPlaneZOffset)));
            }

            // SKETCHINC
            list.Add(new DxfCodePair(9, SKETCHINC));
            list.Add(new DxfCodePair(40, (header.SketchRecordIncrement)));

            // SKPOLY
            list.Add(new DxfCodePair(9, SKPOLY));
            list.Add(new DxfCodePair(70, (short)(header.PolylineSketchMode)));

            // SORTENTS
            if (version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, SORTENTS));
                list.Add(new DxfCodePair(280, (short)(header.ObjectSortingMethodsFlags)));
            }

            // SPLFRAME
            if (version <= DxfAcadVersion.R2010)
            {
                list.Add(new DxfCodePair(9, SPLFRAME));
                list.Add(new DxfCodePair(70, BoolShort(header.DisplaySplinePolygonControl)));
            }

            // SPLINESEGS
            list.Add(new DxfCodePair(9, SPLINESEGS));
            list.Add(new DxfCodePair(70, (header.LineSegmentsPerSplinePatch)));

            // SPLINETYPE
            list.Add(new DxfCodePair(9, SPLINETYPE));
            list.Add(new DxfCodePair(70, (header.PEditSplineCurveType)));

            // SURFTAB1
            list.Add(new DxfCodePair(9, SURFTAB1));
            list.Add(new DxfCodePair(70, (header.MeshTabulationsInFirstDirection)));

            // SURFTAB2
            list.Add(new DxfCodePair(9, SURFTAB2));
            list.Add(new DxfCodePair(70, (header.MeshTabulationsInSecondDirection)));

            // SURFTYPE
            list.Add(new DxfCodePair(9, SURFTYPE));
            list.Add(new DxfCodePair(70, (header.PEditSmoothSurfaceType)));

            // SURFU
            list.Add(new DxfCodePair(9, SURFU));
            list.Add(new DxfCodePair(70, (header.PEditSmoothMDensith)));

            // SURFV
            list.Add(new DxfCodePair(9, SURFV));
            list.Add(new DxfCodePair(70, (header.PEditSmoothNDensith)));

            // TDCREATE
            list.Add(new DxfCodePair(9, TDCREATE));
            list.Add(new DxfCodePair(40, DateDouble(header.CreationDate)));

            // TDINDWG
            list.Add(new DxfCodePair(9, TDINDWG));
            list.Add(new DxfCodePair(40, TimeSpanDouble(header.TimeInDrawing)));

            // TDUCREATE
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, TDUCREATE));
                list.Add(new DxfCodePair(40, DateDouble(header.CreationDateUniversal)));
            }

            // TDUPDATE
            list.Add(new DxfCodePair(9, TDUPDATE));
            list.Add(new DxfCodePair(40, DateDouble(header.UpdateDate)));

            // TDUSRTIMER
            list.Add(new DxfCodePair(9, TDUSRTIMER));
            list.Add(new DxfCodePair(40, TimeSpanDouble(header.UserElapsedTimer)));

            // TDUUPDATE
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, TDUUPDATE));
                list.Add(new DxfCodePair(40, DateDouble(header.UpdateDateUniversal)));
            }

            // TEXTSIZE
            list.Add(new DxfCodePair(9, TEXTSIZE));
            list.Add(new DxfCodePair(40, (header.DefaultTextHeight)));

            // TEXTSTYLE
            list.Add(new DxfCodePair(9, TEXTSTYLE));
            list.Add(new DxfCodePair(7, (header.TextStyle)));

            // THICKNESS
            list.Add(new DxfCodePair(9, THICKNESS));
            list.Add(new DxfCodePair(40, (header.Thickness)));

            // TILEMODE
            list.Add(new DxfCodePair(9, TILEMODE));
            list.Add(new DxfCodePair(70, BoolShort(header.PreviousReleaseTileCompatability)));

            // TRACEWID
            list.Add(new DxfCodePair(9, TRACEWID));
            list.Add(new DxfCodePair(40, (header.TraceWidth)));

            // TREEDEPTH
            list.Add(new DxfCodePair(9, TREEDEPTH));
            list.Add(new DxfCodePair(70, (header.SpacialIndexMaxDepth)));

            // UCSBASE
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSBASE));
                list.Add(new DxfCodePair(2, (header.UCSDefinitionName)));
            }

            // UCSNAME
            list.Add(new DxfCodePair(9, UCSNAME));
            list.Add(new DxfCodePair(2, (header.UCSName)));

            // UCSORG
            list.Add(new DxfCodePair(9, UCSORG));
            list.Add(new DxfCodePair(10, header.UCSOrigin.X));
            list.Add(new DxfCodePair(20, header.UCSOrigin.Y));
            list.Add(new DxfCodePair(30, header.UCSOrigin.Z));

            // UCSORGBACK
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORGBACK));
                list.Add(new DxfCodePair(10, header.UCSOriginBack.X));
                list.Add(new DxfCodePair(20, header.UCSOriginBack.Y));
                list.Add(new DxfCodePair(30, header.UCSOriginBack.Z));
            }

            // UCSORGBOTTOM
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORGBOTTOM));
                list.Add(new DxfCodePair(10, header.UCSOriginBottom.X));
                list.Add(new DxfCodePair(20, header.UCSOriginBottom.Y));
                list.Add(new DxfCodePair(30, header.UCSOriginBottom.Z));
            }

            // UCSORGFRONT
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORGFRONT));
                list.Add(new DxfCodePair(10, header.UCSOriginFront.X));
                list.Add(new DxfCodePair(20, header.UCSOriginFront.Y));
                list.Add(new DxfCodePair(30, header.UCSOriginFront.Z));
            }

            // UCSORGLEFT
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORGLEFT));
                list.Add(new DxfCodePair(10, header.UCSOriginLeft.X));
                list.Add(new DxfCodePair(20, header.UCSOriginLeft.Y));
                list.Add(new DxfCodePair(30, header.UCSOriginLeft.Z));
            }

            // UCSORGRIGHT
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORGRIGHT));
                list.Add(new DxfCodePair(10, header.UCSOriginRight.X));
                list.Add(new DxfCodePair(20, header.UCSOriginRight.Y));
                list.Add(new DxfCodePair(30, header.UCSOriginRight.Z));
            }

            // UCSORGTOP
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORGTOP));
                list.Add(new DxfCodePair(10, header.UCSOriginTop.X));
                list.Add(new DxfCodePair(20, header.UCSOriginTop.Y));
                list.Add(new DxfCodePair(30, header.UCSOriginTop.Z));
            }

            // UCSORTHOREF
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORTHOREF));
                list.Add(new DxfCodePair(2, (header.OrthoUCSReference)));
            }

            // UCSORTHOVIEW
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORTHOVIEW));
                list.Add(new DxfCodePair(70, (short)(header.OrthgraphicViewType)));
            }

            // UCSXDIR
            list.Add(new DxfCodePair(9, UCSXDIR));
            list.Add(new DxfCodePair(10, header.UCSXAxis.X));
            list.Add(new DxfCodePair(20, header.UCSXAxis.Y));
            list.Add(new DxfCodePair(30, header.UCSXAxis.Z));

            // UCSYDIR
            list.Add(new DxfCodePair(9, UCSYDIR));
            list.Add(new DxfCodePair(10, header.UCSYAxis.X));
            list.Add(new DxfCodePair(20, header.UCSYAxis.Y));
            list.Add(new DxfCodePair(30, header.UCSYAxis.Z));

            // UNITMODE
            list.Add(new DxfCodePair(9, UNITMODE));
            list.Add(new DxfCodePair(70, BoolShort(header.DisplayFractionsInInput)));

            // USERI1
            list.Add(new DxfCodePair(9, USERI1));
            list.Add(new DxfCodePair(70, (header.UserInt1)));

            // USERI2
            list.Add(new DxfCodePair(9, USERI2));
            list.Add(new DxfCodePair(70, (header.UserInt2)));

            // USERI3
            list.Add(new DxfCodePair(9, USERI3));
            list.Add(new DxfCodePair(70, (header.UserInt3)));

            // USERI4
            list.Add(new DxfCodePair(9, USERI4));
            list.Add(new DxfCodePair(70, (header.UserInt4)));

            // USERI5
            list.Add(new DxfCodePair(9, USERI5));
            list.Add(new DxfCodePair(70, (header.UserInt5)));

            // USERR1
            list.Add(new DxfCodePair(9, USERR1));
            list.Add(new DxfCodePair(40, (header.UserReal1)));

            // USERR2
            list.Add(new DxfCodePair(9, USERR2));
            list.Add(new DxfCodePair(40, (header.UserReal2)));

            // USERR3
            list.Add(new DxfCodePair(9, USERR3));
            list.Add(new DxfCodePair(40, (header.UserReal3)));

            // USERR4
            list.Add(new DxfCodePair(9, USERR4));
            list.Add(new DxfCodePair(40, (header.UserReal4)));

            // USERR5
            list.Add(new DxfCodePair(9, USERR5));
            list.Add(new DxfCodePair(40, (header.UserReal5)));

            // USRTIMER
            list.Add(new DxfCodePair(9, USRTIMER));
            list.Add(new DxfCodePair(70, BoolShort(header.UserTimerOn)));

            // VERSIONGUID
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, VERSIONGUID));
                list.Add(new DxfCodePair(2, GuidString(header.VersionGuid)));
            }

            // VISRETAIN
            list.Add(new DxfCodePair(9, VISRETAIN));
            list.Add(new DxfCodePair(70, BoolShort(header.RetainXRefDependentVisibilitySettings)));

            // WORLDVIEW
            list.Add(new DxfCodePair(9, WORLDVIEW));
            list.Add(new DxfCodePair(70, BoolShort(header.SetUCSToWCSInDViewOrVPoint)));

            // XCLIPFRAME
            if (version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, XCLIPFRAME));
                list.Add(new DxfCodePair(290, (header.IsXRefClippingBoundaryVisible)));
            }

            // XEDIT
            if (version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, XEDIT));
                list.Add(new DxfCodePair(290, (header.CanUseInPlaceReferenceEditing)));
            }

        }

        // setter method
        internal static void SetHeaderVariable(string keyName, DxfCodePair pair, DxfHeader header)
        {
		    switch (keyName)
            {
                case ACADMAINTVER:
                    EnsureCode(pair, 70);
                    header.MaintenenceVersion = (pair.ShortValue);
                    break;
                case ACADVER:
                    EnsureCode(pair, 1);
                    header.Version = DxfAcadVersionStrings.StringToVersion(pair.StringValue);
                    break;
                case ANGBASE:
                    EnsureCode(pair, 50);
                    header.AngleZeroDirection = (pair.DoubleValue);
                    break;
                case ANGDIR:
                    EnsureCode(pair, 70);
                    header.AngleDirection = (DxfAngleDirection)(pair.ShortValue);
                    break;
                case ATTDIA:
                    EnsureCode(pair, 70);
                    header.ShowAttributeEntryDialogs = BoolShort(pair.ShortValue);
                    break;
                case ATTMODE:
                    EnsureCode(pair, 70);
                    header.AttributeVisibility = (DxfAttributeVisibility)(pair.ShortValue);
                    break;
                case ATTREQ:
                    EnsureCode(pair, 70);
                    header.PromptForAttributeOnInsert = BoolShort(pair.ShortValue);
                    break;
                case AUNITS:
                    EnsureCode(pair, 70);
                    header.AngleUnitFormat = (DxfAngleFormat)(pair.ShortValue);
                    break;
                case AUPREC:
                    EnsureCode(pair, 70);
                    header.AngleUnitPrecision = (pair.ShortValue);
                    break;
                case BLIPMODE:
                    EnsureCode(pair, 70);
                    header.BlipMode = BoolShort(pair.ShortValue);
                    break;
                case CECOLOR:
                    EnsureCode(pair, 62);
                    header.CurrentEntityColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case CELTSCALE:
                    EnsureCode(pair, 40);
                    header.CurrentEntityLinetypeScale = (pair.DoubleValue);
                    break;
                case CELTYPE:
                    EnsureCode(pair, 6);
                    header.CurrentEntityLinetype = (pair.StringValue);
                    break;
                case CELWEIGHT:
                    EnsureCode(pair, 370);
                    header.NewObjectLineWeight = (pair.ShortValue);
                    break;
                case CEPSNID:
                    EnsureCode(pair, 390);
                    header.NewObjectPlotStyleHandle = (pair.StringValue);
                    break;
                case CEPSNTYPE:
                    EnsureCode(pair, 380);
                    header.NewObjectPlotStyle = (DxfPlotStyle)(pair.DoubleValue);
                    break;
                case CHAMFERA:
                    EnsureCode(pair, 40);
                    header.FirstChamferDistance = (pair.DoubleValue);
                    break;
                case CHAMFERB:
                    EnsureCode(pair, 40);
                    header.SecondChamferDistance = (pair.DoubleValue);
                    break;
                case CHAMFERC:
                    EnsureCode(pair, 40);
                    header.ChamferLength = (pair.DoubleValue);
                    break;
                case CHAMFERD:
                    EnsureCode(pair, 40);
                    header.ChamferAngle = (pair.DoubleValue);
                    break;
                case CLAYER:
                    EnsureCode(pair, 8);
                    header.CurrentLayer = (pair.StringValue);
                    break;
                case CMLJUST:
                    EnsureCode(pair, 70);
                    header.CurrentMultilineJustification = (DxfJustification)(pair.ShortValue);
                    break;
                case CMLSCALE:
                    EnsureCode(pair, 40);
                    header.CurrentMultilineScale = (pair.DoubleValue);
                    break;
                case CMLSTYLE:
                    EnsureCode(pair, 2);
                    header.CurrentMultilineStyle = (pair.StringValue);
                    break;
                case COORDS:
                    EnsureCode(pair, 70);
                    header.CoordinateDisplay = (DxfCoordinateDisplay)(pair.ShortValue);
                    break;
                case CPSNID:
                    EnsureCode(pair, 390);
                    header.NewObjectPlotStyleHandle = (pair.StringValue);
                    break;
                case CSHADOW:
                    EnsureCode(pair, 280);
                    header.ShadowMode = (DxfShadowMode)(pair.ShortValue);
                    break;
                case DELOBJ:
                    EnsureCode(pair, 70);
                    header.RetainDeletedObjects = BoolShort(pair.ShortValue);
                    break;
                case DIMADEC:
                    EnsureCode(pair, 70);
                    header.AngularDimensionPrecision = (pair.ShortValue);
                    break;
                case DIMALT:
                    EnsureCode(pair, 70);
                    header.UseAlternateDimensioning = BoolShort(pair.ShortValue);
                    break;
                case DIMALTD:
                    EnsureCode(pair, 70);
                    header.AlternateDimensioningDecimalPlaces = (pair.ShortValue);
                    break;
                case DIMALTF:
                    EnsureCode(pair, 40);
                    header.AlternateDimensioningScaleFactor = (pair.DoubleValue);
                    break;
                case DIMALTRND:
                    EnsureCode(pair, 40);
                    header.AlternateDimensioningUnitRounding = (pair.DoubleValue);
                    break;
                case DIMALTTD:
                    EnsureCode(pair, 70);
                    header.AlternateDimensioningToleranceDecimalPlaces = (pair.ShortValue);
                    break;
                case DIMALTTZ:
                    EnsureCode(pair, 70);
                    header.AlternateDimensioningToleranceZeroSupression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DIMALTU:
                    EnsureCode(pair, 70);
                    header.AlternateDimensioningUnits = (DxfUnitFormat)(pair.ShortValue);
                    break;
                case DIMALTZ:
                    EnsureCode(pair, 70);
                    header.AlternateDimensioningZeroSupression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DIMAPOST:
                    EnsureCode(pair, 1);
                    header.AlternateDimensioningSuffix = (pair.StringValue);
                    break;
                case DIMASO:
                    EnsureCode(pair, 70);
                    header.CreateAssociativeDimensioning = BoolShort(pair.ShortValue);
                    break;
                case DIMASSOC:
                    EnsureCode(pair, 280);
                    header.DimensionObjectAssociativity = (DxfDimensionAssociativity)(pair.ShortValue);
                    break;
                case DIMASZ:
                    EnsureCode(pair, 40);
                    header.DimensioningArrowSize = (pair.DoubleValue);
                    break;
                case DIMATFIT:
                    EnsureCode(pair, 70);
                    header.DimensionTextAndArrowPlacement = (DxfDimensionFit)(pair.ShortValue);
                    break;
                case DIMAUNIT:
                    EnsureCode(pair, 70);
                    header.DimensioningAngleFormat = (DxfAngleFormat)(pair.ShortValue);
                    break;
                case DIMAZIN:
                    EnsureCode(pair, 70);
                    header.DimensionToleranceZeroSuppression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DIMBLK:
                    EnsureCode(pair, 1);
                    header.ArrowBlockName = (pair.StringValue);
                    break;
                case DIMBLK1:
                    EnsureCode(pair, 1);
                    header.FirstArrowBlockName = (pair.StringValue);
                    break;
                case DIMBLK2:
                    EnsureCode(pair, 1);
                    header.SecondArrowBlockName = (pair.StringValue);
                    break;
                case DIMCEN:
                    EnsureCode(pair, 40);
                    header.CenterMarkSize = (pair.DoubleValue);
                    break;
                case DIMCLRD:
                    EnsureCode(pair, 70);
                    header.DimensionLineColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case DIMCLRE:
                    EnsureCode(pair, 70);
                    header.DimensionExtensionLineColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case DIMCLRT:
                    EnsureCode(pair, 70);
                    header.DimensionTextColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case DIMDEC:
                    EnsureCode(pair, 70);
                    header.DimensionUnitToleranceDecimalPlaces = (pair.ShortValue);
                    break;
                case DIMDLE:
                    EnsureCode(pair, 40);
                    header.DimensionLineExtension = (pair.DoubleValue);
                    break;
                case DIMDLI:
                    EnsureCode(pair, 40);
                    header.DimensionLineIncrement = (pair.DoubleValue);
                    break;
                case DIMDSEP:
                    EnsureCode(pair, 70);
                    header.DimensionDecimalSeparatorChar = (char)(pair.ShortValue);
                    break;
                case DIMEXE:
                    EnsureCode(pair, 40);
                    header.DimensionExtensionLineExtension = (pair.DoubleValue);
                    break;
                case DIMEXO:
                    EnsureCode(pair, 40);
                    header.DimensionExtensionLineOffset = (pair.DoubleValue);
                    break;
                case DIMFAC:
                    EnsureCode(pair, 40);
                    header.DimensionTextHeightScaleFactor = (pair.DoubleValue);
                    break;
                case DIMFIT:
                    EnsureCode(pair, 70);
                    header.DimensionTextAndArrowPlacement = (DxfDimensionFit)(pair.ShortValue);
                    break;
                case DIMGAP:
                    EnsureCode(pair, 40);
                    header.DimensionLineGap = (pair.DoubleValue);
                    break;
                case DIMJUST:
                    EnsureCode(pair, 70);
                    header.DimensionTextJustification = (DxfDimensionTextJustification)(pair.ShortValue);
                    break;
                case DIMLDRBLK:
                    EnsureCode(pair, 1);
                    header.DimensionLeaderBlockName = (pair.StringValue);
                    break;
                case DIMLFAC:
                    EnsureCode(pair, 40);
                    header.DimensionLinearMeasurementsScaleFactor = (pair.DoubleValue);
                    break;
                case DIMLIM:
                    EnsureCode(pair, 70);
                    header.GenerateDimensionLimits = BoolShort(pair.ShortValue);
                    break;
                case DIMLUNIT:
                    EnsureCode(pair, 70);
                    header.DimensionNonAngularUnits = (DxfNonAngularUnits)(pair.ShortValue);
                    break;
                case DIMPOST:
                    EnsureCode(pair, 1);
                    header.DimensioningSuffix = (pair.StringValue);
                    break;
                case DIMRND:
                    EnsureCode(pair, 40);
                    header.DimensionDistanceRoundingValue = (pair.DoubleValue);
                    break;
                case DIMSAH:
                    EnsureCode(pair, 70);
                    header.UseSeparateArrowBlocksForDimensions = BoolShort(pair.ShortValue);
                    break;
                case DIMSCALE:
                    EnsureCode(pair, 40);
                    header.DimensioningScaleFactor = (pair.DoubleValue);
                    break;
                case DIMSD1:
                    EnsureCode(pair, 70);
                    header.SuppressFirstDimensionExtensionLine = BoolShort(pair.ShortValue);
                    break;
                case DIMSD2:
                    EnsureCode(pair, 70);
                    header.SuppressSecondDimensionExtensionLine = BoolShort(pair.ShortValue);
                    break;
                case DIMSHO:
                    EnsureCode(pair, 70);
                    header.RecomputeDimensionsWhileDragging = BoolShort(pair.ShortValue);
                    break;
                case DIMSOXD:
                    EnsureCode(pair, 70);
                    header.SuppressOutsideExtensionDimensionLines = BoolShort(pair.ShortValue);
                    break;
                case DIMSTYLE:
                    EnsureCode(pair, 2);
                    header.DimensionStyleName = (pair.StringValue);
                    break;
                case DIMTAD:
                    EnsureCode(pair, 70);
                    header.TextAboveDimensionLine = BoolShort(pair.ShortValue);
                    break;
                case DIMTDEC:
                    EnsureCode(pair, 70);
                    header.DimensionToleranceDecimalPlaces = (pair.ShortValue);
                    break;
                case DIMTFAC:
                    EnsureCode(pair, 40);
                    header.DimensionToleranceDisplayScaleFactor = (pair.DoubleValue);
                    break;
                case DIMTIH:
                    EnsureCode(pair, 70);
                    header.DimensionTextInsideHorizontal = BoolShort(pair.ShortValue);
                    break;
                case DIMTIX:
                    EnsureCode(pair, 70);
                    header.ForceDimensionTextInsideExtensions = BoolShort(pair.ShortValue);
                    break;
                case DIMTM:
                    EnsureCode(pair, 40);
                    header.DimensionMinusTolerance = (pair.DoubleValue);
                    break;
                case DIMTMOVE:
                    EnsureCode(pair, 70);
                    header.DimensionTextMovementRule = (DxfDimensionTextMovementRule)(pair.ShortValue);
                    break;
                case DIMTOFL:
                    EnsureCode(pair, 70);
                    header.ForceDimensionLineExtensionsOutsideIfTextIs = BoolShort(pair.ShortValue);
                    break;
                case DIMTOH:
                    EnsureCode(pair, 70);
                    header.DimensionTextOutsideHorizontal = BoolShort(pair.ShortValue);
                    break;
                case DIMTOL:
                    EnsureCode(pair, 70);
                    header.GenerateDimensionTolerances = BoolShort(pair.ShortValue);
                    break;
                case DIMTOLJ:
                    EnsureCode(pair, 70);
                    header.DimensionToleranceVerticalJustification = (DxfJustification)(pair.ShortValue);
                    break;
                case DIMTP:
                    EnsureCode(pair, 40);
                    header.DimensionPlusTolerance = (pair.DoubleValue);
                    break;
                case DIMTSZ:
                    EnsureCode(pair, 40);
                    header.DimensioningTickSize = (pair.DoubleValue);
                    break;
                case DIMTVP:
                    EnsureCode(pair, 40);
                    header.DimensionVerticalTextPosition = (pair.DoubleValue);
                    break;
                case DIMTXSTY:
                    EnsureCode(pair, 7);
                    header.DimensionTextStyle = (pair.StringValue);
                    break;
                case DIMTXT:
                    EnsureCode(pair, 40);
                    header.DimensioningTextHeight = (pair.DoubleValue);
                    break;
                case DIMTZIN:
                    EnsureCode(pair, 70);
                    header.DimensionToleranceZeroSuppression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DIMUNIT:
                    EnsureCode(pair, 70);
                    header.DimensionUnitFormat = (DxfUnitFormat)(pair.ShortValue);
                    break;
                case DIMUPT:
                    EnsureCode(pair, 70);
                    header.DimensionCursorControlsTextPosition = BoolShort(pair.ShortValue);
                    break;
                case DIMZIN:
                    EnsureCode(pair, 70);
                    header.DimensionUnitZeroSuppression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DISPSILH:
                    EnsureCode(pair, 70);
                    header.DisplaySilhouetteCurvesInWireframeMode = BoolShort(pair.ShortValue);
                    break;
                case DRAGMODE:
                    EnsureCode(pair, 70);
                    header.DragMode = (DxfDragMode)(pair.ShortValue);
                    break;
                case DRAGVS:
                    EnsureCode(pair, 349);
                    header.ThreeDSolidCreationVisualStyle = (pair.StringValue);
                    break;
                case DWGCODEPAGE:
                    EnsureCode(pair, 3);
                    header.DrawingCodePage = (pair.StringValue);
                    break;
                case ELEVATION:
                    EnsureCode(pair, 40);
                    header.Elevation = (pair.DoubleValue);
                    break;
                case ENDCAPS:
                    EnsureCode(pair, 280);
                    header.EndCapSetting = (DxfEndCapSetting)(pair.ShortValue);
                    break;
                case EXTMAX:
                    SetPoint(pair, header.MaximumDrawingExtents);
                    break;
                case EXTMIN:
                    SetPoint(pair, header.MinimumDrawingExtents);
                    break;
                case EXTNAMES:
                    EnsureCode(pair, 290);
                    header.UseACad2000SymbolTableNaming = (pair.BoolValue);
                    break;
                case FILLETRAD:
                    EnsureCode(pair, 40);
                    header.FilletRadius = (pair.DoubleValue);
                    break;
                case FILLMODE:
                    EnsureCode(pair, 70);
                    header.FillModeOn = BoolShort(pair.ShortValue);
                    break;
                case FINGERPRINTGUID:
                    EnsureCode(pair, 2);
                    header.FingerprintGuid = GuidString(pair.StringValue);
                    break;
                case HALOGAP:
                    EnsureCode(pair, 280);
                    header.HaloGapPercent = (double)(pair.ShortValue);
                    break;
                case HANDLING:
                    EnsureCode(pair, 70);
                    header.NextAvailableHandle = (int)(pair.ShortValue);
                    break;
                case HANDSEED:
                    EnsureCode(pair, 5);
                    header.NextAvailableHandle2 = (pair.StringValue);
                    break;
                case HIDETEXT:
                    EnsureCode(pair, 290);
                    header.HideTextObjectsWhenProducintHiddenView = (pair.BoolValue);
                    break;
                case HYPERLINKBASE:
                    EnsureCode(pair, 1);
                    header.HyperlinBase = (pair.StringValue);
                    break;
                case INDEXCTL:
                    EnsureCode(pair, 280);
                    header.LayerAndSpatialIndexSaveMode = (DxfLayerAndSpatialIndexSaveMode)(pair.ShortValue);
                    break;
                case INSBASE:
                    SetPoint(pair, header.InsertionBase);
                    break;
                case INSUNITS:
                    EnsureCode(pair, 70);
                    header.DefaultDrawingUnits = (DxfUnits)(pair.ShortValue);
                    break;
                case INTERFERECOLOR:
                    EnsureCode(pair, 62);
                    header.InterferenceObjectColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case INTERFEREOBJVS:
                    EnsureCode(pair, 345);
                    header.InterferenceObjectVisualStylePointer = (pair.StringValue);
                    break;
                case INTERFEREVPVS:
                    EnsureCode(pair, 346);
                    header.InterferenceViewPortVisualStylePointer = (pair.StringValue);
                    break;
                case INTERSECTIONCOLOR:
                    EnsureCode(pair, 70);
                    header.IntersectionPolylineColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case INTERSECTIONDISPLAY:
                    EnsureCode(pair, 290);
                    header.DisplayIntersectionPolylines = (pair.BoolValue);
                    break;
                case JOINSTYLE:
                    EnsureCode(pair, 280);
                    header.LineweightJointSetting = (DxfJoinStyle)(pair.ShortValue);
                    break;
                case LIMCHECK:
                    EnsureCode(pair, 70);
                    header.UseLimitsChecking = BoolShort(pair.ShortValue);
                    break;
                case LIMMAX:
                    SetPoint(pair, header.MaximumDrawingLimits);
                    break;
                case LIMMIN:
                    SetPoint(pair, header.MinimumDrawingLimits);
                    break;
                case LTSCALE:
                    EnsureCode(pair, 40);
                    header.LinetypeScale = (pair.DoubleValue);
                    break;
                case LUNITS:
                    EnsureCode(pair, 70);
                    header.UnitFormat = (DxfUnitFormat)(pair.ShortValue);
                    break;
                case LUPREC:
                    EnsureCode(pair, 70);
                    header.UnitPrecision = (pair.ShortValue);
                    break;
                case LWDISPLAY:
                    EnsureCode(pair, 290);
                    header.DisplayLinewieghtInModelAndLayoutTab = (pair.BoolValue);
                    break;
                case MAXACTVP:
                    EnsureCode(pair, 70);
                    header.MaximumActiveViewports = (pair.ShortValue);
                    break;
                case MEASUREMENT:
                    EnsureCode(pair, 70);
                    header.DrawingUnits = (DxfDrawingUnits)(pair.ShortValue);
                    break;
                case MENU:
                    EnsureCode(pair, 1);
                    header.FileName = (pair.StringValue);
                    break;
                case MIRRTEXT:
                    EnsureCode(pair, 70);
                    header.MirrorText = BoolShort(pair.ShortValue);
                    break;
                case OBSCOLOR:
                    EnsureCode(pair, 70);
                    header.ObscuredLineColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case OBSLTYPE:
                    EnsureCode(pair, 280);
                    header.ObscuredLineTypeStyle = (DxfLinetypeStyle)(pair.ShortValue);
                    break;
                case ORTHOMODE:
                    EnsureCode(pair, 70);
                    header.DrawOrthoganalLines = BoolShort(pair.ShortValue);
                    break;
                case OSMODE:
                    EnsureCode(pair, 70);
                    header.ObjectSnapFlags = (int)(pair.ShortValue);
                    break;
                case PDMODE:
                    EnsureCode(pair, 70);
                    header.PointDisplayMode = (int)(pair.ShortValue);
                    break;
                case PDSIZE:
                    EnsureCode(pair, 40);
                    header.PointDisplaySize = (pair.DoubleValue);
                    break;
                case PELEVATION:
                    EnsureCode(pair, 40);
                    header.PaperspaceElevation = (pair.DoubleValue);
                    break;
                case PEXTMAX:
                    SetPoint(pair, header.PaperspaceMaximumDrawingExtents);
                    break;
                case PEXTMIN:
                    SetPoint(pair, header.PaperspaceMinimumDrawingExtents);
                    break;
                case PICKSTYLE:
                    EnsureCode(pair, 70);
                    header.PickStyle = (DxfPickStyle)(pair.ShortValue);
                    break;
                case PINSBASE:
                    SetPoint(pair, header.PaperspaceInsertionBase);
                    break;
                case PLIMCHECK:
                    EnsureCode(pair, 70);
                    header.LimitCheckingInPaperspace = BoolShort(pair.ShortValue);
                    break;
                case PLIMMAX:
                    SetPoint(pair, header.PaperspaceMaximumDrawingLimits);
                    break;
                case PLIMMIN:
                    SetPoint(pair, header.PaperspaceMinimumDrawingLimits);
                    break;
                case PLINEGEN:
                    EnsureCode(pair, 70);
                    header.IsPolylineContinuousAroundVerticies = BoolShort(pair.ShortValue);
                    break;
                case PLINEWID:
                    EnsureCode(pair, 40);
                    header.DefaultPolylineWidth = (pair.DoubleValue);
                    break;
                case PROJECTNAME:
                    EnsureCode(pair, 1);
                    header.ProjectName = (pair.StringValue);
                    break;
                case PROXYGRAPHICS:
                    EnsureCode(pair, 70);
                    header.SaveProxyGraphics = BoolShort(pair.ShortValue);
                    break;
                case PSLTSCALE:
                    EnsureCode(pair, 70);
                    header.ScaleLinetypesInPaperspace = BoolShort(pair.ShortValue);
                    break;
                case PSTYLEMODE:
                    EnsureCode(pair, 290);
                    header.UsesColorDependentPlotStyleTables = (pair.BoolValue);
                    break;
                case PSVPSCALE:
                    EnsureCode(pair, 40);
                    header.ViewportViewScaleFactor = (pair.DoubleValue);
                    break;
                case PUCSBASE:
                    EnsureCode(pair, 2);
                    header.PaperspaceUCSDefinitionName = (pair.StringValue);
                    break;
                case PUCSNAME:
                    EnsureCode(pair, 2);
                    header.PaperspaceUCSName = (pair.StringValue);
                    break;
                case PUCSORG:
                    SetPoint(pair, header.PaperspaceUCSOrigin);
                    break;
                case PUCSORGBACK:
                    SetPoint(pair, header.PaperspaceUCSOriginBack);
                    break;
                case PUCSORGBOTTOM:
                    SetPoint(pair, header.PaperspaceUCSOriginBottom);
                    break;
                case PUCSORGFRONT:
                    SetPoint(pair, header.PaperspaceUCSOriginFront);
                    break;
                case PUCSORGLEFT:
                    SetPoint(pair, header.PaperspaceUCSOriginLeft);
                    break;
                case PUCSORGRIGHT:
                    SetPoint(pair, header.PaperspaceUCSOriginRight);
                    break;
                case PUCSORGTOP:
                    SetPoint(pair, header.PaperspaceUCSOriginTop);
                    break;
                case PUCSORTHOREF:
                    EnsureCode(pair, 2);
                    header.PaperspaceOrthoUCSReference = (pair.StringValue);
                    break;
                case PUCSORTHOVIEW:
                    EnsureCode(pair, 70);
                    header.PaperspaceOrthographicViewType = (DxfOrthographicViewType)(pair.ShortValue);
                    break;
                case PUCSXDIR:
                    SetPoint(pair, header.PaperspaceXAxis);
                    break;
                case PUCSYDIR:
                    SetPoint(pair, header.PaperspaceYAxis);
                    break;
                case QTEXTMODE:
                    EnsureCode(pair, 70);
                    header.UseQuickTextMode = BoolShort(pair.ShortValue);
                    break;
                case REGENMODE:
                    EnsureCode(pair, 70);
                    header.UseRegenMode = BoolShort(pair.ShortValue);
                    break;
                case SHADEDGE:
                    EnsureCode(pair, 70);
                    header.EdgeShading = (DxfShadeEdgeMode)(pair.ShortValue);
                    break;
                case SHADEDIF:
                    EnsureCode(pair, 70);
                    header.PercentAmbientToDiffuse = (pair.ShortValue);
                    break;
                case SHADOWPLANELOCATION:
                    EnsureCode(pair, 40);
                    header.ShadowPlaneZOffset = (pair.DoubleValue);
                    break;
                case SKETCHINC:
                    EnsureCode(pair, 40);
                    header.SketchRecordIncrement = (pair.DoubleValue);
                    break;
                case SKPOLY:
                    EnsureCode(pair, 70);
                    header.PolylineSketchMode = (DxfPolySketchMode)(pair.ShortValue);
                    break;
                case SORTENTS:
                    EnsureCode(pair, 280);
                    header.ObjectSortingMethodsFlags = (int)(pair.ShortValue);
                    break;
                case SPLFRAME:
                    EnsureCode(pair, 70);
                    header.DisplaySplinePolygonControl = BoolShort(pair.ShortValue);
                    break;
                case SPLINESEGS:
                    EnsureCode(pair, 70);
                    header.LineSegmentsPerSplinePatch = (pair.ShortValue);
                    break;
                case SPLINETYPE:
                    EnsureCode(pair, 70);
                    header.PEditSplineCurveType = (pair.ShortValue);
                    break;
                case SURFTAB1:
                    EnsureCode(pair, 70);
                    header.MeshTabulationsInFirstDirection = (pair.ShortValue);
                    break;
                case SURFTAB2:
                    EnsureCode(pair, 70);
                    header.MeshTabulationsInSecondDirection = (pair.ShortValue);
                    break;
                case SURFTYPE:
                    EnsureCode(pair, 70);
                    header.PEditSmoothSurfaceType = (pair.ShortValue);
                    break;
                case SURFU:
                    EnsureCode(pair, 70);
                    header.PEditSmoothMDensith = (pair.ShortValue);
                    break;
                case SURFV:
                    EnsureCode(pair, 70);
                    header.PEditSmoothNDensith = (pair.ShortValue);
                    break;
                case TDCREATE:
                    EnsureCode(pair, 40);
                    header.CreationDate = DateDouble(pair.DoubleValue);
                    break;
                case TDINDWG:
                    EnsureCode(pair, 40);
                    header.TimeInDrawing = TimeSpanDouble(pair.DoubleValue);
                    break;
                case TDUCREATE:
                    EnsureCode(pair, 40);
                    header.CreationDateUniversal = DateDouble(pair.DoubleValue);
                    break;
                case TDUPDATE:
                    EnsureCode(pair, 40);
                    header.UpdateDate = DateDouble(pair.DoubleValue);
                    break;
                case TDUSRTIMER:
                    EnsureCode(pair, 40);
                    header.UserElapsedTimer = TimeSpanDouble(pair.DoubleValue);
                    break;
                case TDUUPDATE:
                    EnsureCode(pair, 40);
                    header.UpdateDateUniversal = DateDouble(pair.DoubleValue);
                    break;
                case TEXTSIZE:
                    EnsureCode(pair, 40);
                    header.DefaultTextHeight = (pair.DoubleValue);
                    break;
                case TEXTSTYLE:
                    EnsureCode(pair, 7);
                    header.TextStyle = (pair.StringValue);
                    break;
                case THICKNESS:
                    EnsureCode(pair, 40);
                    header.Thickness = (pair.DoubleValue);
                    break;
                case TILEMODE:
                    EnsureCode(pair, 70);
                    header.PreviousReleaseTileCompatability = BoolShort(pair.ShortValue);
                    break;
                case TRACEWID:
                    EnsureCode(pair, 40);
                    header.TraceWidth = (pair.DoubleValue);
                    break;
                case TREEDEPTH:
                    EnsureCode(pair, 70);
                    header.SpacialIndexMaxDepth = (pair.ShortValue);
                    break;
                case UCSBASE:
                    EnsureCode(pair, 2);
                    header.UCSDefinitionName = (pair.StringValue);
                    break;
                case UCSNAME:
                    EnsureCode(pair, 2);
                    header.UCSName = (pair.StringValue);
                    break;
                case UCSORG:
                    SetPoint(pair, header.UCSOrigin);
                    break;
                case UCSORGBACK:
                    SetPoint(pair, header.UCSOriginBack);
                    break;
                case UCSORGBOTTOM:
                    SetPoint(pair, header.UCSOriginBottom);
                    break;
                case UCSORGFRONT:
                    SetPoint(pair, header.UCSOriginFront);
                    break;
                case UCSORGLEFT:
                    SetPoint(pair, header.UCSOriginLeft);
                    break;
                case UCSORGRIGHT:
                    SetPoint(pair, header.UCSOriginRight);
                    break;
                case UCSORGTOP:
                    SetPoint(pair, header.UCSOriginTop);
                    break;
                case UCSORTHOREF:
                    EnsureCode(pair, 2);
                    header.OrthoUCSReference = (pair.StringValue);
                    break;
                case UCSORTHOVIEW:
                    EnsureCode(pair, 70);
                    header.OrthgraphicViewType = (DxfOrthographicViewType)(pair.ShortValue);
                    break;
                case UCSXDIR:
                    SetPoint(pair, header.UCSXAxis);
                    break;
                case UCSYDIR:
                    SetPoint(pair, header.UCSYAxis);
                    break;
                case UNITMODE:
                    EnsureCode(pair, 70);
                    header.DisplayFractionsInInput = BoolShort(pair.ShortValue);
                    break;
                case USERI1:
                    EnsureCode(pair, 70);
                    header.UserInt1 = (pair.ShortValue);
                    break;
                case USERI2:
                    EnsureCode(pair, 70);
                    header.UserInt2 = (pair.ShortValue);
                    break;
                case USERI3:
                    EnsureCode(pair, 70);
                    header.UserInt3 = (pair.ShortValue);
                    break;
                case USERI4:
                    EnsureCode(pair, 70);
                    header.UserInt4 = (pair.ShortValue);
                    break;
                case USERI5:
                    EnsureCode(pair, 70);
                    header.UserInt5 = (pair.ShortValue);
                    break;
                case USERR1:
                    EnsureCode(pair, 40);
                    header.UserReal1 = (pair.DoubleValue);
                    break;
                case USERR2:
                    EnsureCode(pair, 40);
                    header.UserReal2 = (pair.DoubleValue);
                    break;
                case USERR3:
                    EnsureCode(pair, 40);
                    header.UserReal3 = (pair.DoubleValue);
                    break;
                case USERR4:
                    EnsureCode(pair, 40);
                    header.UserReal4 = (pair.DoubleValue);
                    break;
                case USERR5:
                    EnsureCode(pair, 40);
                    header.UserReal5 = (pair.DoubleValue);
                    break;
                case USRTIMER:
                    EnsureCode(pair, 70);
                    header.UserTimerOn = BoolShort(pair.ShortValue);
                    break;
                case VERSIONGUID:
                    EnsureCode(pair, 2);
                    header.VersionGuid = GuidString(pair.StringValue);
                    break;
                case VISRETAIN:
                    EnsureCode(pair, 70);
                    header.RetainXRefDependentVisibilitySettings = BoolShort(pair.ShortValue);
                    break;
                case WORLDVIEW:
                    EnsureCode(pair, 70);
                    header.SetUCSToWCSInDViewOrVPoint = BoolShort(pair.ShortValue);
                    break;
                case XCLIPFRAME:
                    EnsureCode(pair, 290);
                    header.IsXRefClippingBoundaryVisible = (pair.BoolValue);
                    break;
                case XEDIT:
                    EnsureCode(pair, 290);
                    header.CanUseInPlaceReferenceEditing = (pair.BoolValue);
                    break;
                default:
                    // unsupported variable
                    break;
            }
        }

        // OSMODE flags
        public bool EndPointSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 1); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                ObjectSnapFlags = flags;
            }
        }

        public bool MidPointSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 2); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                ObjectSnapFlags = flags;
            }
        }

        public bool CenterSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 4); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                ObjectSnapFlags = flags;
            }
        }

        public bool NodeSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 8); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                ObjectSnapFlags = flags;
            }
        }

        public bool QuadrantSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 16); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 16);
                ObjectSnapFlags = flags;
            }
        }

        public bool IntersectionSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 32); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 32);
                ObjectSnapFlags = flags;
            }
        }

        public bool InsertionSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 64); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 64);
                ObjectSnapFlags = flags;
            }
        }

        public bool PerpendicularSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 128); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 128);
                ObjectSnapFlags = flags;
            }
        }

        public bool TangentSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 256); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 256);
                ObjectSnapFlags = flags;
            }
        }

        public bool NearestSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 512); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 512);
                ObjectSnapFlags = flags;
            }
        }

        public bool ApparentIntersectionSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 2048); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 2048);
                ObjectSnapFlags = flags;
            }
        }

        public bool ExtensionSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 4096); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 4096);
                ObjectSnapFlags = flags;
            }
        }

        public bool ParallelSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 8192); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 8192);
                ObjectSnapFlags = flags;
            }
        }

        // SORTENTS flags
        public bool SortObjectsForObjectSelection
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 1); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                ObjectSortingMethodsFlags = flags;
            }
        }

        public bool SortObjectsForObjectSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 2); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                ObjectSortingMethodsFlags = flags;
            }
        }

        public bool SortObjectsForRedraw
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 4); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                ObjectSortingMethodsFlags = flags;
            }
        }

        public bool SortObjectsForMSlide
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 8); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                ObjectSortingMethodsFlags = flags;
            }
        }

        public bool SortObjectsForRegen
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 16); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 16);
                ObjectSortingMethodsFlags = flags;
            }
        }

        public bool SortObjectsForPlotting
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 32); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 32);
                ObjectSortingMethodsFlags = flags;
            }
        }

        public bool SortObjectsForPostScriptOutput
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 64); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 64);
                ObjectSortingMethodsFlags = flags;
            }
        }


        private object GetValue(string variableName)
        {
            switch (variableName.ToUpper())
            {
                case ACADMAINTVER:
                    return this.MaintenenceVersion;
                case ACADVER:
                    return this.Version;
                case ANGBASE:
                    return this.AngleZeroDirection;
                case ANGDIR:
                    return this.AngleDirection;
                case ATTDIA:
                    return this.ShowAttributeEntryDialogs;
                case ATTMODE:
                    return this.AttributeVisibility;
                case ATTREQ:
                    return this.PromptForAttributeOnInsert;
                case AUNITS:
                    return this.AngleUnitFormat;
                case AUPREC:
                    return this.AngleUnitPrecision;
                case BLIPMODE:
                    return this.BlipMode;
                case CECOLOR:
                    return this.CurrentEntityColor;
                case CELTSCALE:
                    return this.CurrentEntityLinetypeScale;
                case CELTYPE:
                    return this.CurrentEntityLinetype;
                case CELWEIGHT:
                    return this.NewObjectLineWeight;
                case CEPSNID:
                    return this.NewObjectPlotStyleHandle;
                case CEPSNTYPE:
                    return this.NewObjectPlotStyle;
                case CHAMFERA:
                    return this.FirstChamferDistance;
                case CHAMFERB:
                    return this.SecondChamferDistance;
                case CHAMFERC:
                    return this.ChamferLength;
                case CHAMFERD:
                    return this.ChamferAngle;
                case CLAYER:
                    return this.CurrentLayer;
                case CMLJUST:
                    return this.CurrentMultilineJustification;
                case CMLSCALE:
                    return this.CurrentMultilineScale;
                case CMLSTYLE:
                    return this.CurrentMultilineStyle;
                case COORDS:
                    return this.CoordinateDisplay;
                case CPSNID:
                    return this.NewObjectPlotStyleHandle;
                case CSHADOW:
                    return this.ShadowMode;
                case DELOBJ:
                    return this.RetainDeletedObjects;
                case DIMADEC:
                    return this.AngularDimensionPrecision;
                case DIMALT:
                    return this.UseAlternateDimensioning;
                case DIMALTD:
                    return this.AlternateDimensioningDecimalPlaces;
                case DIMALTF:
                    return this.AlternateDimensioningScaleFactor;
                case DIMALTRND:
                    return this.AlternateDimensioningUnitRounding;
                case DIMALTTD:
                    return this.AlternateDimensioningToleranceDecimalPlaces;
                case DIMALTTZ:
                    return this.AlternateDimensioningToleranceZeroSupression;
                case DIMALTU:
                    return this.AlternateDimensioningUnits;
                case DIMALTZ:
                    return this.AlternateDimensioningZeroSupression;
                case DIMAPOST:
                    return this.AlternateDimensioningSuffix;
                case DIMASO:
                    return this.CreateAssociativeDimensioning;
                case DIMASSOC:
                    return this.DimensionObjectAssociativity;
                case DIMASZ:
                    return this.DimensioningArrowSize;
                case DIMATFIT:
                    return this.DimensionTextAndArrowPlacement;
                case DIMAUNIT:
                    return this.DimensioningAngleFormat;
                case DIMAZIN:
                    return this.DimensionToleranceZeroSuppression;
                case DIMBLK:
                    return this.ArrowBlockName;
                case DIMBLK1:
                    return this.FirstArrowBlockName;
                case DIMBLK2:
                    return this.SecondArrowBlockName;
                case DIMCEN:
                    return this.CenterMarkSize;
                case DIMCLRD:
                    return this.DimensionLineColor;
                case DIMCLRE:
                    return this.DimensionExtensionLineColor;
                case DIMCLRT:
                    return this.DimensionTextColor;
                case DIMDEC:
                    return this.DimensionUnitToleranceDecimalPlaces;
                case DIMDLE:
                    return this.DimensionLineExtension;
                case DIMDLI:
                    return this.DimensionLineIncrement;
                case DIMDSEP:
                    return this.DimensionDecimalSeparatorChar;
                case DIMEXE:
                    return this.DimensionExtensionLineExtension;
                case DIMEXO:
                    return this.DimensionExtensionLineOffset;
                case DIMFAC:
                    return this.DimensionTextHeightScaleFactor;
                case DIMFIT:
                    return this.DimensionTextAndArrowPlacement;
                case DIMGAP:
                    return this.DimensionLineGap;
                case DIMJUST:
                    return this.DimensionTextJustification;
                case DIMLDRBLK:
                    return this.DimensionLeaderBlockName;
                case DIMLFAC:
                    return this.DimensionLinearMeasurementsScaleFactor;
                case DIMLIM:
                    return this.GenerateDimensionLimits;
                case DIMLUNIT:
                    return this.DimensionNonAngularUnits;
                case DIMPOST:
                    return this.DimensioningSuffix;
                case DIMRND:
                    return this.DimensionDistanceRoundingValue;
                case DIMSAH:
                    return this.UseSeparateArrowBlocksForDimensions;
                case DIMSCALE:
                    return this.DimensioningScaleFactor;
                case DIMSD1:
                    return this.SuppressFirstDimensionExtensionLine;
                case DIMSD2:
                    return this.SuppressSecondDimensionExtensionLine;
                case DIMSHO:
                    return this.RecomputeDimensionsWhileDragging;
                case DIMSOXD:
                    return this.SuppressOutsideExtensionDimensionLines;
                case DIMSTYLE:
                    return this.DimensionStyleName;
                case DIMTAD:
                    return this.TextAboveDimensionLine;
                case DIMTDEC:
                    return this.DimensionToleranceDecimalPlaces;
                case DIMTFAC:
                    return this.DimensionToleranceDisplayScaleFactor;
                case DIMTIH:
                    return this.DimensionTextInsideHorizontal;
                case DIMTIX:
                    return this.ForceDimensionTextInsideExtensions;
                case DIMTM:
                    return this.DimensionMinusTolerance;
                case DIMTMOVE:
                    return this.DimensionTextMovementRule;
                case DIMTOFL:
                    return this.ForceDimensionLineExtensionsOutsideIfTextIs;
                case DIMTOH:
                    return this.DimensionTextOutsideHorizontal;
                case DIMTOL:
                    return this.GenerateDimensionTolerances;
                case DIMTOLJ:
                    return this.DimensionToleranceVerticalJustification;
                case DIMTP:
                    return this.DimensionPlusTolerance;
                case DIMTSZ:
                    return this.DimensioningTickSize;
                case DIMTVP:
                    return this.DimensionVerticalTextPosition;
                case DIMTXSTY:
                    return this.DimensionTextStyle;
                case DIMTXT:
                    return this.DimensioningTextHeight;
                case DIMTZIN:
                    return this.DimensionToleranceZeroSuppression;
                case DIMUNIT:
                    return this.DimensionUnitFormat;
                case DIMUPT:
                    return this.DimensionCursorControlsTextPosition;
                case DIMZIN:
                    return this.DimensionUnitZeroSuppression;
                case DISPSILH:
                    return this.DisplaySilhouetteCurvesInWireframeMode;
                case DRAGMODE:
                    return this.DragMode;
                case DRAGVS:
                    return this.ThreeDSolidCreationVisualStyle;
                case DWGCODEPAGE:
                    return this.DrawingCodePage;
                case ELEVATION:
                    return this.Elevation;
                case ENDCAPS:
                    return this.EndCapSetting;
                case EXTMAX:
                    return this.MaximumDrawingExtents;
                case EXTMIN:
                    return this.MinimumDrawingExtents;
                case EXTNAMES:
                    return this.UseACad2000SymbolTableNaming;
                case FILLETRAD:
                    return this.FilletRadius;
                case FILLMODE:
                    return this.FillModeOn;
                case FINGERPRINTGUID:
                    return this.FingerprintGuid;
                case HALOGAP:
                    return this.HaloGapPercent;
                case HANDLING:
                    return this.NextAvailableHandle;
                case HANDSEED:
                    return this.NextAvailableHandle2;
                case HIDETEXT:
                    return this.HideTextObjectsWhenProducintHiddenView;
                case HYPERLINKBASE:
                    return this.HyperlinBase;
                case INDEXCTL:
                    return this.LayerAndSpatialIndexSaveMode;
                case INSBASE:
                    return this.InsertionBase;
                case INSUNITS:
                    return this.DefaultDrawingUnits;
                case INTERFERECOLOR:
                    return this.InterferenceObjectColor;
                case INTERFEREOBJVS:
                    return this.InterferenceObjectVisualStylePointer;
                case INTERFEREVPVS:
                    return this.InterferenceViewPortVisualStylePointer;
                case INTERSECTIONCOLOR:
                    return this.IntersectionPolylineColor;
                case INTERSECTIONDISPLAY:
                    return this.DisplayIntersectionPolylines;
                case JOINSTYLE:
                    return this.LineweightJointSetting;
                case LIMCHECK:
                    return this.UseLimitsChecking;
                case LIMMAX:
                    return this.MaximumDrawingLimits;
                case LIMMIN:
                    return this.MinimumDrawingLimits;
                case LTSCALE:
                    return this.LinetypeScale;
                case LUNITS:
                    return this.UnitFormat;
                case LUPREC:
                    return this.UnitPrecision;
                case LWDISPLAY:
                    return this.DisplayLinewieghtInModelAndLayoutTab;
                case MAXACTVP:
                    return this.MaximumActiveViewports;
                case MEASUREMENT:
                    return this.DrawingUnits;
                case MENU:
                    return this.FileName;
                case MIRRTEXT:
                    return this.MirrorText;
                case OBSCOLOR:
                    return this.ObscuredLineColor;
                case OBSLTYPE:
                    return this.ObscuredLineTypeStyle;
                case ORTHOMODE:
                    return this.DrawOrthoganalLines;
                case OSMODE:
                    return this.ObjectSnapFlags;
                case PDMODE:
                    return this.PointDisplayMode;
                case PDSIZE:
                    return this.PointDisplaySize;
                case PELEVATION:
                    return this.PaperspaceElevation;
                case PEXTMAX:
                    return this.PaperspaceMaximumDrawingExtents;
                case PEXTMIN:
                    return this.PaperspaceMinimumDrawingExtents;
                case PICKSTYLE:
                    return this.PickStyle;
                case PINSBASE:
                    return this.PaperspaceInsertionBase;
                case PLIMCHECK:
                    return this.LimitCheckingInPaperspace;
                case PLIMMAX:
                    return this.PaperspaceMaximumDrawingLimits;
                case PLIMMIN:
                    return this.PaperspaceMinimumDrawingLimits;
                case PLINEGEN:
                    return this.IsPolylineContinuousAroundVerticies;
                case PLINEWID:
                    return this.DefaultPolylineWidth;
                case PROJECTNAME:
                    return this.ProjectName;
                case PROXYGRAPHICS:
                    return this.SaveProxyGraphics;
                case PSLTSCALE:
                    return this.ScaleLinetypesInPaperspace;
                case PSTYLEMODE:
                    return this.UsesColorDependentPlotStyleTables;
                case PSVPSCALE:
                    return this.ViewportViewScaleFactor;
                case PUCSBASE:
                    return this.PaperspaceUCSDefinitionName;
                case PUCSNAME:
                    return this.PaperspaceUCSName;
                case PUCSORG:
                    return this.PaperspaceUCSOrigin;
                case PUCSORGBACK:
                    return this.PaperspaceUCSOriginBack;
                case PUCSORGBOTTOM:
                    return this.PaperspaceUCSOriginBottom;
                case PUCSORGFRONT:
                    return this.PaperspaceUCSOriginFront;
                case PUCSORGLEFT:
                    return this.PaperspaceUCSOriginLeft;
                case PUCSORGRIGHT:
                    return this.PaperspaceUCSOriginRight;
                case PUCSORGTOP:
                    return this.PaperspaceUCSOriginTop;
                case PUCSORTHOREF:
                    return this.PaperspaceOrthoUCSReference;
                case PUCSORTHOVIEW:
                    return this.PaperspaceOrthographicViewType;
                case PUCSXDIR:
                    return this.PaperspaceXAxis;
                case PUCSYDIR:
                    return this.PaperspaceYAxis;
                case QTEXTMODE:
                    return this.UseQuickTextMode;
                case REGENMODE:
                    return this.UseRegenMode;
                case SHADEDGE:
                    return this.EdgeShading;
                case SHADEDIF:
                    return this.PercentAmbientToDiffuse;
                case SHADOWPLANELOCATION:
                    return this.ShadowPlaneZOffset;
                case SKETCHINC:
                    return this.SketchRecordIncrement;
                case SKPOLY:
                    return this.PolylineSketchMode;
                case SORTENTS:
                    return this.ObjectSortingMethodsFlags;
                case SPLFRAME:
                    return this.DisplaySplinePolygonControl;
                case SPLINESEGS:
                    return this.LineSegmentsPerSplinePatch;
                case SPLINETYPE:
                    return this.PEditSplineCurveType;
                case SURFTAB1:
                    return this.MeshTabulationsInFirstDirection;
                case SURFTAB2:
                    return this.MeshTabulationsInSecondDirection;
                case SURFTYPE:
                    return this.PEditSmoothSurfaceType;
                case SURFU:
                    return this.PEditSmoothMDensith;
                case SURFV:
                    return this.PEditSmoothNDensith;
                case TDCREATE:
                    return this.CreationDate;
                case TDINDWG:
                    return this.TimeInDrawing;
                case TDUCREATE:
                    return this.CreationDateUniversal;
                case TDUPDATE:
                    return this.UpdateDate;
                case TDUSRTIMER:
                    return this.UserElapsedTimer;
                case TDUUPDATE:
                    return this.UpdateDateUniversal;
                case TEXTSIZE:
                    return this.DefaultTextHeight;
                case TEXTSTYLE:
                    return this.TextStyle;
                case THICKNESS:
                    return this.Thickness;
                case TILEMODE:
                    return this.PreviousReleaseTileCompatability;
                case TRACEWID:
                    return this.TraceWidth;
                case TREEDEPTH:
                    return this.SpacialIndexMaxDepth;
                case UCSBASE:
                    return this.UCSDefinitionName;
                case UCSNAME:
                    return this.UCSName;
                case UCSORG:
                    return this.UCSOrigin;
                case UCSORGBACK:
                    return this.UCSOriginBack;
                case UCSORGBOTTOM:
                    return this.UCSOriginBottom;
                case UCSORGFRONT:
                    return this.UCSOriginFront;
                case UCSORGLEFT:
                    return this.UCSOriginLeft;
                case UCSORGRIGHT:
                    return this.UCSOriginRight;
                case UCSORGTOP:
                    return this.UCSOriginTop;
                case UCSORTHOREF:
                    return this.OrthoUCSReference;
                case UCSORTHOVIEW:
                    return this.OrthgraphicViewType;
                case UCSXDIR:
                    return this.UCSXAxis;
                case UCSYDIR:
                    return this.UCSYAxis;
                case UNITMODE:
                    return this.DisplayFractionsInInput;
                case USERI1:
                    return this.UserInt1;
                case USERI2:
                    return this.UserInt2;
                case USERI3:
                    return this.UserInt3;
                case USERI4:
                    return this.UserInt4;
                case USERI5:
                    return this.UserInt5;
                case USERR1:
                    return this.UserReal1;
                case USERR2:
                    return this.UserReal2;
                case USERR3:
                    return this.UserReal3;
                case USERR4:
                    return this.UserReal4;
                case USERR5:
                    return this.UserReal5;
                case USRTIMER:
                    return this.UserTimerOn;
                case VERSIONGUID:
                    return this.VersionGuid;
                case VISRETAIN:
                    return this.RetainXRefDependentVisibilitySettings;
                case WORLDVIEW:
                    return this.SetUCSToWCSInDViewOrVPoint;
                case XCLIPFRAME:
                    return this.IsXRefClippingBoundaryVisible;
                case XEDIT:
                    return this.CanUseInPlaceReferenceEditing;
                default:
                    throw new ArgumentException("Unrecognized variable", "variableName");
            }
        }

        private void SetValue(string variableName, object value)
        {
            switch (variableName.ToUpper())
            {
                case ACADMAINTVER:
                    this.MaintenenceVersion = (short)value;
                    break;
                case ACADVER:
                    this.Version = (DxfAcadVersion)value;
                    break;
                case ANGBASE:
                    this.AngleZeroDirection = (double)value;
                    break;
                case ANGDIR:
                    this.AngleDirection = (DxfAngleDirection)value;
                    break;
                case ATTDIA:
                    this.ShowAttributeEntryDialogs = (bool)value;
                    break;
                case ATTMODE:
                    this.AttributeVisibility = (DxfAttributeVisibility)value;
                    break;
                case ATTREQ:
                    this.PromptForAttributeOnInsert = (bool)value;
                    break;
                case AUNITS:
                    this.AngleUnitFormat = (DxfAngleFormat)value;
                    break;
                case AUPREC:
                    this.AngleUnitPrecision = (short)value;
                    break;
                case BLIPMODE:
                    this.BlipMode = (bool)value;
                    break;
                case CECOLOR:
                    this.CurrentEntityColor = (DxfColor)value;
                    break;
                case CELTSCALE:
                    this.CurrentEntityLinetypeScale = (double)value;
                    break;
                case CELTYPE:
                    this.CurrentEntityLinetype = (string)value;
                    break;
                case CELWEIGHT:
                    this.NewObjectLineWeight = (short)value;
                    break;
                case CEPSNID:
                    this.NewObjectPlotStyleHandle = (string)value;
                    break;
                case CEPSNTYPE:
                    this.NewObjectPlotStyle = (DxfPlotStyle)value;
                    break;
                case CHAMFERA:
                    this.FirstChamferDistance = (double)value;
                    break;
                case CHAMFERB:
                    this.SecondChamferDistance = (double)value;
                    break;
                case CHAMFERC:
                    this.ChamferLength = (double)value;
                    break;
                case CHAMFERD:
                    this.ChamferAngle = (double)value;
                    break;
                case CLAYER:
                    this.CurrentLayer = (string)value;
                    break;
                case CMLJUST:
                    this.CurrentMultilineJustification = (DxfJustification)value;
                    break;
                case CMLSCALE:
                    this.CurrentMultilineScale = (double)value;
                    break;
                case CMLSTYLE:
                    this.CurrentMultilineStyle = (string)value;
                    break;
                case COORDS:
                    this.CoordinateDisplay = (DxfCoordinateDisplay)value;
                    break;
                case CPSNID:
                    this.NewObjectPlotStyleHandle = (string)value;
                    break;
                case CSHADOW:
                    this.ShadowMode = (DxfShadowMode)value;
                    break;
                case DELOBJ:
                    this.RetainDeletedObjects = (bool)value;
                    break;
                case DIMADEC:
                    this.AngularDimensionPrecision = (short)value;
                    break;
                case DIMALT:
                    this.UseAlternateDimensioning = (bool)value;
                    break;
                case DIMALTD:
                    this.AlternateDimensioningDecimalPlaces = (short)value;
                    break;
                case DIMALTF:
                    this.AlternateDimensioningScaleFactor = (double)value;
                    break;
                case DIMALTRND:
                    this.AlternateDimensioningUnitRounding = (double)value;
                    break;
                case DIMALTTD:
                    this.AlternateDimensioningToleranceDecimalPlaces = (short)value;
                    break;
                case DIMALTTZ:
                    this.AlternateDimensioningToleranceZeroSupression = (DxfUnitZeroSuppression)value;
                    break;
                case DIMALTU:
                    this.AlternateDimensioningUnits = (DxfUnitFormat)value;
                    break;
                case DIMALTZ:
                    this.AlternateDimensioningZeroSupression = (DxfUnitZeroSuppression)value;
                    break;
                case DIMAPOST:
                    this.AlternateDimensioningSuffix = (string)value;
                    break;
                case DIMASO:
                    this.CreateAssociativeDimensioning = (bool)value;
                    break;
                case DIMASSOC:
                    this.DimensionObjectAssociativity = (DxfDimensionAssociativity)value;
                    break;
                case DIMASZ:
                    this.DimensioningArrowSize = (double)value;
                    break;
                case DIMATFIT:
                    this.DimensionTextAndArrowPlacement = (DxfDimensionFit)value;
                    break;
                case DIMAUNIT:
                    this.DimensioningAngleFormat = (DxfAngleFormat)value;
                    break;
                case DIMAZIN:
                    this.DimensionToleranceZeroSuppression = (DxfUnitZeroSuppression)value;
                    break;
                case DIMBLK:
                    this.ArrowBlockName = (string)value;
                    break;
                case DIMBLK1:
                    this.FirstArrowBlockName = (string)value;
                    break;
                case DIMBLK2:
                    this.SecondArrowBlockName = (string)value;
                    break;
                case DIMCEN:
                    this.CenterMarkSize = (double)value;
                    break;
                case DIMCLRD:
                    this.DimensionLineColor = (DxfColor)value;
                    break;
                case DIMCLRE:
                    this.DimensionExtensionLineColor = (DxfColor)value;
                    break;
                case DIMCLRT:
                    this.DimensionTextColor = (DxfColor)value;
                    break;
                case DIMDEC:
                    this.DimensionUnitToleranceDecimalPlaces = (short)value;
                    break;
                case DIMDLE:
                    this.DimensionLineExtension = (double)value;
                    break;
                case DIMDLI:
                    this.DimensionLineIncrement = (double)value;
                    break;
                case DIMDSEP:
                    this.DimensionDecimalSeparatorChar = (char)value;
                    break;
                case DIMEXE:
                    this.DimensionExtensionLineExtension = (double)value;
                    break;
                case DIMEXO:
                    this.DimensionExtensionLineOffset = (double)value;
                    break;
                case DIMFAC:
                    this.DimensionTextHeightScaleFactor = (double)value;
                    break;
                case DIMFIT:
                    this.DimensionTextAndArrowPlacement = (DxfDimensionFit)value;
                    break;
                case DIMGAP:
                    this.DimensionLineGap = (double)value;
                    break;
                case DIMJUST:
                    this.DimensionTextJustification = (DxfDimensionTextJustification)value;
                    break;
                case DIMLDRBLK:
                    this.DimensionLeaderBlockName = (string)value;
                    break;
                case DIMLFAC:
                    this.DimensionLinearMeasurementsScaleFactor = (double)value;
                    break;
                case DIMLIM:
                    this.GenerateDimensionLimits = (bool)value;
                    break;
                case DIMLUNIT:
                    this.DimensionNonAngularUnits = (DxfNonAngularUnits)value;
                    break;
                case DIMPOST:
                    this.DimensioningSuffix = (string)value;
                    break;
                case DIMRND:
                    this.DimensionDistanceRoundingValue = (double)value;
                    break;
                case DIMSAH:
                    this.UseSeparateArrowBlocksForDimensions = (bool)value;
                    break;
                case DIMSCALE:
                    this.DimensioningScaleFactor = (double)value;
                    break;
                case DIMSD1:
                    this.SuppressFirstDimensionExtensionLine = (bool)value;
                    break;
                case DIMSD2:
                    this.SuppressSecondDimensionExtensionLine = (bool)value;
                    break;
                case DIMSHO:
                    this.RecomputeDimensionsWhileDragging = (bool)value;
                    break;
                case DIMSOXD:
                    this.SuppressOutsideExtensionDimensionLines = (bool)value;
                    break;
                case DIMSTYLE:
                    this.DimensionStyleName = (string)value;
                    break;
                case DIMTAD:
                    this.TextAboveDimensionLine = (bool)value;
                    break;
                case DIMTDEC:
                    this.DimensionToleranceDecimalPlaces = (short)value;
                    break;
                case DIMTFAC:
                    this.DimensionToleranceDisplayScaleFactor = (double)value;
                    break;
                case DIMTIH:
                    this.DimensionTextInsideHorizontal = (bool)value;
                    break;
                case DIMTIX:
                    this.ForceDimensionTextInsideExtensions = (bool)value;
                    break;
                case DIMTM:
                    this.DimensionMinusTolerance = (double)value;
                    break;
                case DIMTMOVE:
                    this.DimensionTextMovementRule = (DxfDimensionTextMovementRule)value;
                    break;
                case DIMTOFL:
                    this.ForceDimensionLineExtensionsOutsideIfTextIs = (bool)value;
                    break;
                case DIMTOH:
                    this.DimensionTextOutsideHorizontal = (bool)value;
                    break;
                case DIMTOL:
                    this.GenerateDimensionTolerances = (bool)value;
                    break;
                case DIMTOLJ:
                    this.DimensionToleranceVerticalJustification = (DxfJustification)value;
                    break;
                case DIMTP:
                    this.DimensionPlusTolerance = (double)value;
                    break;
                case DIMTSZ:
                    this.DimensioningTickSize = (double)value;
                    break;
                case DIMTVP:
                    this.DimensionVerticalTextPosition = (double)value;
                    break;
                case DIMTXSTY:
                    this.DimensionTextStyle = (string)value;
                    break;
                case DIMTXT:
                    this.DimensioningTextHeight = (double)value;
                    break;
                case DIMTZIN:
                    this.DimensionToleranceZeroSuppression = (DxfUnitZeroSuppression)value;
                    break;
                case DIMUNIT:
                    this.DimensionUnitFormat = (DxfUnitFormat)value;
                    break;
                case DIMUPT:
                    this.DimensionCursorControlsTextPosition = (bool)value;
                    break;
                case DIMZIN:
                    this.DimensionUnitZeroSuppression = (DxfUnitZeroSuppression)value;
                    break;
                case DISPSILH:
                    this.DisplaySilhouetteCurvesInWireframeMode = (bool)value;
                    break;
                case DRAGMODE:
                    this.DragMode = (DxfDragMode)value;
                    break;
                case DRAGVS:
                    this.ThreeDSolidCreationVisualStyle = (string)value;
                    break;
                case DWGCODEPAGE:
                    this.DrawingCodePage = (string)value;
                    break;
                case ELEVATION:
                    this.Elevation = (double)value;
                    break;
                case ENDCAPS:
                    this.EndCapSetting = (DxfEndCapSetting)value;
                    break;
                case EXTMAX:
                    this.MaximumDrawingExtents = (DxfPoint)value;
                    break;
                case EXTMIN:
                    this.MinimumDrawingExtents = (DxfPoint)value;
                    break;
                case EXTNAMES:
                    this.UseACad2000SymbolTableNaming = (bool)value;
                    break;
                case FILLETRAD:
                    this.FilletRadius = (double)value;
                    break;
                case FILLMODE:
                    this.FillModeOn = (bool)value;
                    break;
                case FINGERPRINTGUID:
                    this.FingerprintGuid = (Guid)value;
                    break;
                case HALOGAP:
                    this.HaloGapPercent = (double)value;
                    break;
                case HANDLING:
                    this.NextAvailableHandle = (int)value;
                    break;
                case HANDSEED:
                    this.NextAvailableHandle2 = (string)value;
                    break;
                case HIDETEXT:
                    this.HideTextObjectsWhenProducintHiddenView = (bool)value;
                    break;
                case HYPERLINKBASE:
                    this.HyperlinBase = (string)value;
                    break;
                case INDEXCTL:
                    this.LayerAndSpatialIndexSaveMode = (DxfLayerAndSpatialIndexSaveMode)value;
                    break;
                case INSBASE:
                    this.InsertionBase = (DxfPoint)value;
                    break;
                case INSUNITS:
                    this.DefaultDrawingUnits = (DxfUnits)value;
                    break;
                case INTERFERECOLOR:
                    this.InterferenceObjectColor = (DxfColor)value;
                    break;
                case INTERFEREOBJVS:
                    this.InterferenceObjectVisualStylePointer = (string)value;
                    break;
                case INTERFEREVPVS:
                    this.InterferenceViewPortVisualStylePointer = (string)value;
                    break;
                case INTERSECTIONCOLOR:
                    this.IntersectionPolylineColor = (DxfColor)value;
                    break;
                case INTERSECTIONDISPLAY:
                    this.DisplayIntersectionPolylines = (bool)value;
                    break;
                case JOINSTYLE:
                    this.LineweightJointSetting = (DxfJoinStyle)value;
                    break;
                case LIMCHECK:
                    this.UseLimitsChecking = (bool)value;
                    break;
                case LIMMAX:
                    this.MaximumDrawingLimits = (DxfPoint)value;
                    break;
                case LIMMIN:
                    this.MinimumDrawingLimits = (DxfPoint)value;
                    break;
                case LTSCALE:
                    this.LinetypeScale = (double)value;
                    break;
                case LUNITS:
                    this.UnitFormat = (DxfUnitFormat)value;
                    break;
                case LUPREC:
                    this.UnitPrecision = (short)value;
                    break;
                case LWDISPLAY:
                    this.DisplayLinewieghtInModelAndLayoutTab = (bool)value;
                    break;
                case MAXACTVP:
                    this.MaximumActiveViewports = (short)value;
                    break;
                case MEASUREMENT:
                    this.DrawingUnits = (DxfDrawingUnits)value;
                    break;
                case MENU:
                    this.FileName = (string)value;
                    break;
                case MIRRTEXT:
                    this.MirrorText = (bool)value;
                    break;
                case OBSCOLOR:
                    this.ObscuredLineColor = (DxfColor)value;
                    break;
                case OBSLTYPE:
                    this.ObscuredLineTypeStyle = (DxfLinetypeStyle)value;
                    break;
                case ORTHOMODE:
                    this.DrawOrthoganalLines = (bool)value;
                    break;
                case OSMODE:
                    this.ObjectSnapFlags = (int)value;
                    break;
                case PDMODE:
                    this.PointDisplayMode = (int)value;
                    break;
                case PDSIZE:
                    this.PointDisplaySize = (double)value;
                    break;
                case PELEVATION:
                    this.PaperspaceElevation = (double)value;
                    break;
                case PEXTMAX:
                    this.PaperspaceMaximumDrawingExtents = (DxfPoint)value;
                    break;
                case PEXTMIN:
                    this.PaperspaceMinimumDrawingExtents = (DxfPoint)value;
                    break;
                case PICKSTYLE:
                    this.PickStyle = (DxfPickStyle)value;
                    break;
                case PINSBASE:
                    this.PaperspaceInsertionBase = (DxfPoint)value;
                    break;
                case PLIMCHECK:
                    this.LimitCheckingInPaperspace = (bool)value;
                    break;
                case PLIMMAX:
                    this.PaperspaceMaximumDrawingLimits = (DxfPoint)value;
                    break;
                case PLIMMIN:
                    this.PaperspaceMinimumDrawingLimits = (DxfPoint)value;
                    break;
                case PLINEGEN:
                    this.IsPolylineContinuousAroundVerticies = (bool)value;
                    break;
                case PLINEWID:
                    this.DefaultPolylineWidth = (double)value;
                    break;
                case PROJECTNAME:
                    this.ProjectName = (string)value;
                    break;
                case PROXYGRAPHICS:
                    this.SaveProxyGraphics = (bool)value;
                    break;
                case PSLTSCALE:
                    this.ScaleLinetypesInPaperspace = (bool)value;
                    break;
                case PSTYLEMODE:
                    this.UsesColorDependentPlotStyleTables = (bool)value;
                    break;
                case PSVPSCALE:
                    this.ViewportViewScaleFactor = (double)value;
                    break;
                case PUCSBASE:
                    this.PaperspaceUCSDefinitionName = (string)value;
                    break;
                case PUCSNAME:
                    this.PaperspaceUCSName = (string)value;
                    break;
                case PUCSORG:
                    this.PaperspaceUCSOrigin = (DxfPoint)value;
                    break;
                case PUCSORGBACK:
                    this.PaperspaceUCSOriginBack = (DxfPoint)value;
                    break;
                case PUCSORGBOTTOM:
                    this.PaperspaceUCSOriginBottom = (DxfPoint)value;
                    break;
                case PUCSORGFRONT:
                    this.PaperspaceUCSOriginFront = (DxfPoint)value;
                    break;
                case PUCSORGLEFT:
                    this.PaperspaceUCSOriginLeft = (DxfPoint)value;
                    break;
                case PUCSORGRIGHT:
                    this.PaperspaceUCSOriginRight = (DxfPoint)value;
                    break;
                case PUCSORGTOP:
                    this.PaperspaceUCSOriginTop = (DxfPoint)value;
                    break;
                case PUCSORTHOREF:
                    this.PaperspaceOrthoUCSReference = (string)value;
                    break;
                case PUCSORTHOVIEW:
                    this.PaperspaceOrthographicViewType = (DxfOrthographicViewType)value;
                    break;
                case PUCSXDIR:
                    this.PaperspaceXAxis = (DxfVector)value;
                    break;
                case PUCSYDIR:
                    this.PaperspaceYAxis = (DxfVector)value;
                    break;
                case QTEXTMODE:
                    this.UseQuickTextMode = (bool)value;
                    break;
                case REGENMODE:
                    this.UseRegenMode = (bool)value;
                    break;
                case SHADEDGE:
                    this.EdgeShading = (DxfShadeEdgeMode)value;
                    break;
                case SHADEDIF:
                    this.PercentAmbientToDiffuse = (short)value;
                    break;
                case SHADOWPLANELOCATION:
                    this.ShadowPlaneZOffset = (double)value;
                    break;
                case SKETCHINC:
                    this.SketchRecordIncrement = (double)value;
                    break;
                case SKPOLY:
                    this.PolylineSketchMode = (DxfPolySketchMode)value;
                    break;
                case SORTENTS:
                    this.ObjectSortingMethodsFlags = (int)value;
                    break;
                case SPLFRAME:
                    this.DisplaySplinePolygonControl = (bool)value;
                    break;
                case SPLINESEGS:
                    this.LineSegmentsPerSplinePatch = (short)value;
                    break;
                case SPLINETYPE:
                    this.PEditSplineCurveType = (short)value;
                    break;
                case SURFTAB1:
                    this.MeshTabulationsInFirstDirection = (short)value;
                    break;
                case SURFTAB2:
                    this.MeshTabulationsInSecondDirection = (short)value;
                    break;
                case SURFTYPE:
                    this.PEditSmoothSurfaceType = (short)value;
                    break;
                case SURFU:
                    this.PEditSmoothMDensith = (short)value;
                    break;
                case SURFV:
                    this.PEditSmoothNDensith = (short)value;
                    break;
                case TDCREATE:
                    this.CreationDate = (DateTime)value;
                    break;
                case TDINDWG:
                    this.TimeInDrawing = (TimeSpan)value;
                    break;
                case TDUCREATE:
                    this.CreationDateUniversal = (DateTime)value;
                    break;
                case TDUPDATE:
                    this.UpdateDate = (DateTime)value;
                    break;
                case TDUSRTIMER:
                    this.UserElapsedTimer = (TimeSpan)value;
                    break;
                case TDUUPDATE:
                    this.UpdateDateUniversal = (DateTime)value;
                    break;
                case TEXTSIZE:
                    this.DefaultTextHeight = (double)value;
                    break;
                case TEXTSTYLE:
                    this.TextStyle = (string)value;
                    break;
                case THICKNESS:
                    this.Thickness = (double)value;
                    break;
                case TILEMODE:
                    this.PreviousReleaseTileCompatability = (bool)value;
                    break;
                case TRACEWID:
                    this.TraceWidth = (double)value;
                    break;
                case TREEDEPTH:
                    this.SpacialIndexMaxDepth = (short)value;
                    break;
                case UCSBASE:
                    this.UCSDefinitionName = (string)value;
                    break;
                case UCSNAME:
                    this.UCSName = (string)value;
                    break;
                case UCSORG:
                    this.UCSOrigin = (DxfPoint)value;
                    break;
                case UCSORGBACK:
                    this.UCSOriginBack = (DxfPoint)value;
                    break;
                case UCSORGBOTTOM:
                    this.UCSOriginBottom = (DxfPoint)value;
                    break;
                case UCSORGFRONT:
                    this.UCSOriginFront = (DxfPoint)value;
                    break;
                case UCSORGLEFT:
                    this.UCSOriginLeft = (DxfPoint)value;
                    break;
                case UCSORGRIGHT:
                    this.UCSOriginRight = (DxfPoint)value;
                    break;
                case UCSORGTOP:
                    this.UCSOriginTop = (DxfPoint)value;
                    break;
                case UCSORTHOREF:
                    this.OrthoUCSReference = (string)value;
                    break;
                case UCSORTHOVIEW:
                    this.OrthgraphicViewType = (DxfOrthographicViewType)value;
                    break;
                case UCSXDIR:
                    this.UCSXAxis = (DxfVector)value;
                    break;
                case UCSYDIR:
                    this.UCSYAxis = (DxfVector)value;
                    break;
                case UNITMODE:
                    this.DisplayFractionsInInput = (bool)value;
                    break;
                case USERI1:
                    this.UserInt1 = (short)value;
                    break;
                case USERI2:
                    this.UserInt2 = (short)value;
                    break;
                case USERI3:
                    this.UserInt3 = (short)value;
                    break;
                case USERI4:
                    this.UserInt4 = (short)value;
                    break;
                case USERI5:
                    this.UserInt5 = (short)value;
                    break;
                case USERR1:
                    this.UserReal1 = (double)value;
                    break;
                case USERR2:
                    this.UserReal2 = (double)value;
                    break;
                case USERR3:
                    this.UserReal3 = (double)value;
                    break;
                case USERR4:
                    this.UserReal4 = (double)value;
                    break;
                case USERR5:
                    this.UserReal5 = (double)value;
                    break;
                case USRTIMER:
                    this.UserTimerOn = (bool)value;
                    break;
                case VERSIONGUID:
                    this.VersionGuid = (Guid)value;
                    break;
                case VISRETAIN:
                    this.RetainXRefDependentVisibilitySettings = (bool)value;
                    break;
                case WORLDVIEW:
                    this.SetUCSToWCSInDViewOrVPoint = (bool)value;
                    break;
                case XCLIPFRAME:
                    this.IsXRefClippingBoundaryVisible = (bool)value;
                    break;
                case XEDIT:
                    this.CanUseInPlaceReferenceEditing = (bool)value;
                    break;
                default:
                    throw new ArgumentException("Unrecognized variable", "variableName");
            }
        }
    }
}
// This line is required for T4 template generation to work. 
// This line is required for T4 template generation to work. 


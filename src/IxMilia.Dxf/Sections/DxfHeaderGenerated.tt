<# // Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#
var xml = XDocument.Load(this.Host.ResolvePath(@"HeaderVariablesSpec.xml")).Root;
var xmlns = "http://IxMilia.com/Dxf/HeaderVariablesSpec";
var flagElement = XName.Get("Flag", xmlns);
var variables = xml.Elements(XName.Get("Variable", xmlns));
#>
// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using IxMilia.Dxf.Entities;

namespace IxMilia.Dxf
{
    public partial class DxfHeader
    {
        // key names
<#  var seenKeys = new HashSet<string>();
    foreach (var property in variables) {
        var name = property.Attribute("Name").Value.ToUpper();
        if (seenKeys.Contains(name))
        {
            this.Warning("Duplicate key found: " + name);
        }
        else
        {
            seenKeys.Add(name);
#>
        private const string <#= Identifier(name) #> = "$<#= name #>";
<#      }
    } // foreach

var seenProperties = new HashSet<string>();
foreach (var property in variables) {
    var propertyName = property.Attribute("Property").Value;
    if (!seenProperties.Contains(propertyName)) {
        seenProperties.Add(propertyName); // don't write duplicate properties
#>

        /// <summary>
        /// The $<#= property.Attribute("Name").Value #> header variable.
        /// </summary>
        public <#= property.Attribute("Type").Value #> <#= property.Attribute("Property").Value #> { get; set; }
<#
    } // if
    else
    {
        this.Warning("Duplicate property found: " + propertyName);
    } // else
} // foreach
#>

        // set defaults
        public void SetDefaults()
        {
<#
    seenProperties.Clear();
    foreach (var property in variables)
    {
        var propertyName = property.Attribute("Property").Value;
        if (seenProperties.Contains(propertyName))
        {
            this.Warning("Duplicate property found: " + propertyName);
        }
        else
        {
            seenProperties.Add(propertyName);
            var defaultValue = property.Attribute("DefaultValue").Value;
            if (property.Attribute("Type").Value == "string" && defaultValue != "null" && (!defaultValue.StartsWith("\"") && !defaultValue.EndsWith("\"")))
            {
                defaultValue = string.Format("\"{0}\"", defaultValue);
            }
            else if (property.Attribute("Type").Value == "char" && defaultValue.Length == 1)
            {
                if (defaultValue == "\"")
                    defaultValue = "\\\"";
                defaultValue = string.Format("'{0}'", defaultValue);
            }
#>
            this.<#= propertyName #> = <#= defaultValue #>; // <#= property.Attribute("Name").Value #>
<#
        } // if
    } // foreach
#>
        }

        // build list of code value pairs
        internal static void AddValueToList(List<DxfCodePair> list, DxfHeader header, DxfAcadVersion version)
        {
<# foreach (var property in variables.Where(p => !SuppressWriting(p))) {
    var converterAtt = property.Attribute("WriteConverter");
    var converter = converterAtt == null ? string.Empty : converterAtt.Value;
    var type = property.Attribute("Type").Value;
    var dontWriteDefaultAtt = property.Attribute("DontWriteDefault");
    var minVersionAtt = property.Attribute("MinVersion");
    var maxVersionAtt = property.Attribute("MaxVersion");
    var dontWriteDefault = dontWriteDefaultAtt == null ? false : bool.Parse(dontWriteDefaultAtt.Value);
    var usingIf = dontWriteDefault || minVersionAtt != null || maxVersionAtt != null;
#>
            // <#= property.Attribute("Name").Value #>
<#
    if (usingIf) {
        var ifParts = new List<string>();
        if (minVersionAtt != null && maxVersionAtt != null && minVersionAtt.Value == maxVersionAtt.Value)
        {
            ifParts.Add(string.Format("version == DxfAcadVersion.{0}", minVersionAtt.Value));
        }
        else {
            if (minVersionAtt != null) {
                ifParts.Add(string.Format("version >= DxfAcadVersion.{0}", minVersionAtt.Value));
            }
            if (maxVersionAtt != null) {
                ifParts.Add(string.Format("version <= DxfAcadVersion.{0}", maxVersionAtt.Value));
            }
        }
        if (dontWriteDefault) {
            ifParts.Add(string.Format("header.{0} != {1}", property.Attribute("Property").Value, property.Attribute("DefaultValue").Value));
        }
        var allIfText = string.Join(" && ", ifParts);
#>
            if (<#= allIfText #>)
            {
<#
    } // if
#>
<# if (usingIf) { #>    <# } // if #>            list.Add(new DxfCodePair(9, <#= Identifier(property.Attribute("Name").Value) #>));
<#
    if (type == "DxfPoint" || type == "DxfVector")
    {
        var prop = property.Attribute("Property").Value;
#>
<# if (usingIf) { #>    <# } // if #>            list.Add(new DxfCodePair(10, header.<#= prop #>?.X ?? default(double)));
<# if (usingIf) { #>    <# } // if #>            list.Add(new DxfCodePair(20, header.<#= prop #>?.Y ?? default(double)));
<#
        if (Math.Abs(int.Parse(property.Attribute("Code").Value)) >= 3)
        {
#>
<# if (usingIf) { #>    <# } // if #>            list.Add(new DxfCodePair(30, header.<#= prop #>?.Z ?? default(double)));
<#
        }
    }
    else
    {
#>
<# if (usingIf) { #>    <# } // if #>            list.Add(new DxfCodePair(<#= property.Attribute("Code").Value #>, <#= converter #>(header.<#= property.Attribute("Property").Value #>)));
<#
    } // if
    if (usingIf) {
#>
            }
<#
    } // if
#>

<#
} // foreach
#>
        }

        // setter method
        internal static void SetHeaderVariable(string keyName, DxfCodePair pair, DxfHeader header)
        {
            switch (keyName)
            {
<#
    foreach (var propertyGroup in variables.GroupBy(v => v.Attribute("Name").Value))
    {
#>
                case <#= Identifier(propertyGroup.Key) #>:
<#
        var type = propertyGroup.First().Attribute("Type").Value;
        var prop = propertyGroup.First().Attribute("Property").Value;
        if (type == "DxfPoint" || type == "DxfVector")
        {
#>
                    SetPoint(pair, header.<#= prop #>);
                    break;
<#
        }
        else
        {
            if (propertyGroup.Count() > 1)
            {
#>
                    switch (pair.Code)
                    {
<#
                foreach (var property in propertyGroup)
                {
                    var code = int.Parse(property.Attribute("Code").Value);
                    var codeType = DxfCodePair.ExpectedType(code);
                    var codeTypeValue = TypeToString(codeType);
                    var converterAtt = property.Attribute("ReadConverter");
                    var converter = converterAtt == null ? string.Empty : converterAtt.Value;
#>
                        case <#= code #>:
                            header.<#= prop #> = <#= converter #>(pair.<#= codeTypeValue #>);
                            break;
<#
                }
#>
                        default:
                            Debug.Assert(false, string.Format("Expected code [<#= string.Join(", ", propertyGroup.Select(p => p.Attribute("Code").Value)) #>], got {0}", pair.Code));
                            break;
                    }
<#
            }
            else
            {
                var code = int.Parse(propertyGroup.First().Attribute("Code").Value);
                var codeType = DxfCodePair.ExpectedType(code);
                var codeTypeValue = TypeToString(codeType);
                var converterAtt = propertyGroup.First().Attribute("ReadConverter");
                var converter = converterAtt == null ? string.Empty : converterAtt.Value;
#>
                    EnsureCode(pair, <#= code #>);
                    header.<#= prop #> = <#= converter #>(pair.<#= codeTypeValue #>);
<#
            } // if
#>
                    break;
<#
        } // if
    } // foreach
#>
                default:
                    // unsupported variable
                    break;
            }
        }

<# foreach (var property in variables) {
    var flags = property.Elements(flagElement);
    if (flags.Any()) {
#>
        // <#= property.Attribute("Name").Value #> flags
<#
        foreach (var flag in flags) {
#>
        public bool <#= flag.Attribute("Name").Value #>
        {
            get { return DxfHelpers.GetFlag(<#= property.Attribute("Property").Value #>, <#= flag.Attribute("Mask").Value #>); }
            set
            {
                var flags = <#= property.Attribute("Property").Value #>;
                DxfHelpers.SetFlag(value, ref flags, <#= flag.Attribute("Mask").Value #>);
                <#= property.Attribute("Property").Value #> = flags;
            }
        }

<#
        } // foreach
    } // if
} // foreach
#>

        private object GetValue(string variableName)
        {
            switch (variableName.ToUpper())
            {
<#
    seenProperties.Clear();
    foreach (var property in variables)
    {
        var propertyName = property.Attribute("Name").Value;
        if (seenProperties.Contains(propertyName))
        {
            this.Warning("Duplicate property found: " + propertyName);
        }
        else
        {
            seenProperties.Add(propertyName);
#>
                case <#= Identifier(propertyName) #>:
                    return this.<#= property.Attribute("Property").Value #>;
<#
        } // if
    } // foreach
#>
                default:
                    throw new ArgumentException("Unrecognized variable", "variableName");
            }
        }

        private void SetValue(string variableName, object value)
        {
            switch (variableName.ToUpper())
            {
<#
    seenProperties.Clear();
    foreach (var property in variables)
    {
        var propertyName = property.Attribute("Name").Value;
        if (seenProperties.Contains(propertyName))
        {
            this.Warning("Duplicate property found: " + propertyName);
        }
        else
        {
            seenProperties.Add(propertyName);
#>
                case <#= Identifier(propertyName) #>:
                    this.<#= property.Attribute("Property").Value #> = (<#= property.Attribute("Type").Value #>)value;
                    break;
<#
        } // if
    } // foreach
#>
                default:
                    throw new ArgumentException("Unrecognized variable", "variableName");
            }
        }
    }
}
<#@ include file="$(ProjectDir)\DxfCommon.t4" #>

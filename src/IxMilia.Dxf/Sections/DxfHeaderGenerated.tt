<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#
var xml = XDocument.Load(this.Host.ResolvePath(@"HeaderVariablesSpec.xml")).Root;
var xmlns = "http://IxMilia.com/Dxf/HeaderVariablesSpec";
var flagElement = XName.Get("Flag", xmlns);
var variables = xml.Elements(XName.Get("Variable", xmlns));
#>
// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;

namespace IxMilia.Dxf
{
    public partial class DxfHeader
    {
        // key names
<# foreach (var property in variables) {
    var name = property.Attribute("Name").Value.ToUpper();
#>
        private const string <#= name #> = "$<#= name #>";
<# }

var seenProperties = new HashSet<string>();
foreach (var property in variables) {
	var propertyName = property.Attribute("Property").Value;
    if (!seenProperties.Contains(propertyName)) {
		seenProperties.Add(propertyName); // don't write duplicate properties
#>

        /// <summary>
        /// The $<#= property.Attribute("Name").Value #> header variable.
        /// </summary>
        public <#= property.Attribute("Type").Value #> <#= property.Attribute("Property").Value #> { get; set; }
<#
	} // if
	else
	{
		this.Warning("Duplicate property found: " + propertyName);
	} // else
} // foreach
#>

        // set defaults
        private void SetDefaults()
        {
<# foreach (var property in variables) {
	var defaultValue = property.Attribute("DefaultValue").Value;
	if (property.Attribute("Type").Value == "string" && defaultValue != "null" && (!defaultValue.StartsWith("\"") && !defaultValue.EndsWith("\"")))
	{
		defaultValue = string.Format("\"{0}\"", defaultValue);
	}
	else if (property.Attribute("Type").Value == "char" && defaultValue.Length == 1)
	{
		if (defaultValue == "\"")
			defaultValue = "\\\"";
		defaultValue = string.Format("'{0}'", defaultValue);
	}
#>
            this.<#= property.Attribute("Property").Value #> = <#= defaultValue #>; // <#= property.Attribute("Name").Value #>
<# } #>
        }

        // build list of code value pairs
        internal static void AddValueToList(List<DxfCodePair> list, DxfHeader header, DxfAcadVersion version)
        {
<# foreach (var property in variables) {
    var converterAtt = property.Attribute("WriteConverter");
	var converter = converterAtt == null ? string.Empty : converterAtt.Value;
	var type = property.Attribute("Type").Value;
	var minVersionAtt = property.Attribute("MinVersion");
	var maxVersionAtt = property.Attribute("MaxVersion");
	var minVersion = minVersionAtt == null ? "Min" : minVersionAtt.Value;
	var maxVersion = maxVersionAtt == null ? "Max" : maxVersionAtt.Value;
	var usingIf = minVersionAtt != null || maxVersionAtt != null;
#>
            // <#= property.Attribute("Name").Value #>
<#
    if (usingIf) {
		var minIfText = "version >= DxfAcadVersion." + minVersion;
		var maxIfText = "version <= DxfAcadVersion." + maxVersion;
		string allIfText;
		if (minVersionAtt != null && maxVersionAtt != null) {
			allIfText = minIfText + " && " + maxIfText;
		}
		else if (minVersionAtt != null) {
			allIfText = minIfText;
		}
		else {
			allIfText = maxIfText;
		}
#>
            if (<#= allIfText #>)
            {
<#
    } // if
#>
<# if (usingIf) { #>    <# } // if #>            list.Add(new DxfCodePair(9, <#= property.Attribute("Name").Value #>));
<#
	if (type == "DxfPoint" || type == "DxfVector")
	{
		var prop = property.Attribute("Property").Value;
#>
<# if (usingIf) { #>    <# } // if #>            list.Add(new DxfCodePair(10, header.<#= prop #>.X));
<# if (usingIf) { #>    <# } // if #>            list.Add(new DxfCodePair(20, header.<#= prop #>.Y));
<#
		if (Math.Abs(int.Parse(property.Attribute("Code").Value)) >= 3)
		{
#>
<# if (usingIf) { #>    <# } // if #>            list.Add(new DxfCodePair(30, header.<#= prop #>.Z));
<#
		}
	}
	else
	{
#>
<# if (usingIf) { #>    <# } // if #>            list.Add(new DxfCodePair(<#= property.Attribute("Code").Value #>, <#= converter #>(header.<#= property.Attribute("Property").Value #>)));
<#
	} // if
	if (usingIf) {
#>
            }
<#
    } // if
#>

<#
} // foreach
#>
        }

        // setter method
        internal static void SetHeaderVariable(string keyName, DxfCodePair pair, DxfHeader header)
        {
		    switch (keyName)
            {
<# foreach (var property in variables) {
    var converterAtt = property.Attribute("ReadConverter");
	var converter = converterAtt == null ? string.Empty : converterAtt.Value;
#>
                case <#= property.Attribute("Name").Value #>:
<#
	var type = property.Attribute("Type").Value;
	var prop = property.Attribute("Property").Value;
	if (type == "DxfPoint" || type == "DxfVector")
	{
#>
                    SetPoint(pair, header.<#= prop #>);
                    break;
<#
	}
	else
	{
		var code = int.Parse(property.Attribute("Code").Value);
		var codeType = DxfCodePair.ExpectedType(code);
		var codeTypeValue = TypeToString(codeType);
#>
                    EnsureCode(pair, <#= code #>);
                    header.<#= prop #> = <#= converter #>(pair.<#= codeTypeValue #>);
                    break;
<#
	} // if
} // foreach
#>
                default:
                    // unsupported variable
                    break;
            }
        }

<# foreach (var property in variables) {
	var flags = property.Elements(flagElement);
	if (flags.Any()) {
#>
        // <#= property.Attribute("Name").Value #> flags
<#
		foreach (var flag in flags) {
#>
        public bool <#= flag.Attribute("Name").Value #>
        {
            get { return DxfHelpers.GetFlag(<#= property.Attribute("Property").Value #>, <#= flag.Attribute("Mask").Value #>); }
            set
            {
                var flags = <#= property.Attribute("Property").Value #>;
                DxfHelpers.SetFlag(value, ref flags, <#= flag.Attribute("Mask").Value #>);
                <#= property.Attribute("Property").Value #> = flags;
            }
        }

<#
		} // foreach
	} // if
} // foreach
#>

        private object GetValue(string variableName)
        {
            switch (variableName.ToUpper())
            {
<#
foreach (var property in variables) {
#>
                case <#= property.Attribute("Name").Value #>:
                    return this.<#= property.Attribute("Property").Value #>;
<#
} // foreach
#>
                default:
                    throw new ArgumentException("Unrecognized variable", "variableName");
            }
        }

        private void SetValue(string variableName, object value)
        {
            switch (variableName.ToUpper())
            {
<#
foreach (var property in variables) {
#>
                case <#= property.Attribute("Name").Value #>:
                    this.<#= property.Attribute("Property").Value #> = (<#= property.Attribute("Type").Value #>)value;
                    break;
<#
} // foreach
#>
                default:
                    throw new ArgumentException("Unrecognized variable", "variableName");
            }
        }
    }
}
<#@ include file="$(ProjectDir)\DxfCommon.t4" #>

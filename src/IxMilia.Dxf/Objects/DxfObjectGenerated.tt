<# // Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#@ include file="$(ProjectDir)\MultipleOutputHelper.t4" #>
<#
var manager = Manager.Create(Host, GenerationEnvironment);
var xml = XDocument.Load(this.Host.ResolvePath(@"ObjectsSpec.xml")).Root;
var xmlns = xml.Name.NamespaceName;
var objects = xml.Elements(XName.Get("Object", xmlns)).Where(x => x.Attribute("Name").Value != "DxfObject");
#>
<# manager.StartHeader(); #>
// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Entities;

namespace IxMilia.Dxf.Objects
{

<# manager.EndBlock(); #>
    public enum DxfObjectType
    {
<#
var enumNames = new HashSet<string>();
foreach (var obj in objects.OrderBy(o => ObjectType(o)))
{
    var objectType = ObjectType(obj);
    if (!string.IsNullOrEmpty(objectType) && !enumNames.Contains(objectType))
    {
        enumNames.Add(objectType);
#>
        <#= objectType #>,
<#
    } // if
} // foreach object
#>
    }

<#
var baseObject = xml.Elements(XName.Get("Object", xmlns)).Where(x => Name(x) == "DxfObject").Single();
#>
    /// <summary>
    /// DxfObject class
    /// </summary>
    public partial class DxfObject : IDxfItemInternal
    {
#region IDxfItem and IDxfItemInternal
        uint IDxfItemInternal.Handle { get; set; }
        uint IDxfItemInternal.OwnerHandle { get; set; }
        public IDxfItem Owner { get; private set;}

        void IDxfItemInternal.SetOwner(IDxfItem owner)
        {
            Owner = owner;
        }

        IEnumerable<DxfPointer> IDxfItemInternal.GetPointers()
        {
            yield break;
        }

        IEnumerable<IDxfItemInternal> IDxfItemInternal.GetChildItems()
        {
            return ((IDxfItemInternal)this).GetPointers().Select(p => (IDxfItemInternal)p.Item);
        }
#endregion

<#
foreach (var property in GetProperties(baseObject))
{
    var typeString = Type(property);
    if (AllowMultiples(property))
        typeString = string.Format("List<{0}>", typeString);
#>
        public <#= typeString #> <#= Name(property) #> { get; <#= SetterAccessibility(property) #>set; }
<#
} // foreach property
#>

        public string ObjectTypeString
        {
            get
            {
                switch (ObjectType)
                {
<#
foreach (var obj in objects)
{
    var typeString = TypeString(obj);
    var commaIndex = typeString.IndexOf(',');
    if (commaIndex >= 0)
        typeString = typeString.Substring(0, commaIndex);
    if (!string.IsNullOrEmpty(typeString))
    {
#>
                    case DxfObjectType.<#= ObjectType(obj) #>:
                        return "<#= typeString #>";
<#
    } // if
} // foreach obj
#>
                    default:
                        throw new NotImplementedException();
                }
            }
        }

        protected DxfObject(DxfObject other)
            : this()
        {
<#
foreach (var property in GetProperties(baseObject))
{
#>
            this.<#= Name(property) #> = other.<#= Name(property) #>;
<#
} // foreach property
#>
        }

        protected virtual void Initialize()
        {
<#
foreach (var property in GetProperties(baseObject))
{
    var defaultValue = AllowMultiples(property)
        ? string.Format("new List<{0}>()", Type(property))
        : DefaultValue(property);
#>
            this.<#= Name(property) #> = <#= defaultValue #>;
<#
} // foreach property
#>
        }

        protected virtual void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            pairs.Add(new DxfCodePair(0, ObjectTypeString));
<#
            foreach (var line in GetWriteCommands(baseObject))
            {
                if (string.IsNullOrWhiteSpace(line))
                {
#>

<#
                }
                else
                {
#>
            <#= line #>
<#
                }
            } // foreach
#>
        }

        internal virtual bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 5:
                    ((IDxfItemInternal)this).Handle = UIntHandle(pair.StringValue);
                    break;
                case 330:
                    ((IDxfItemInternal)this).OwnerHandle = UIntHandle(pair.StringValue);
                    break;
<#
        foreach (var propertyGroup in GetProperties(baseObject).Where(p => !ProtectedSet(p)).GroupBy(p => Code(p)).OrderBy(p => p.Key))
        {
            var code = propertyGroup.Key;
            if (propertyGroup.Count() == 1)
            {
                var property = propertyGroup.Single();
                var name = Name(property);
                var codes = GetCodeOverrides(property);
                if (codes != null)
                {
                    var suffix = 'X';
                    for (int i = 0; i < codes.Length; i++, suffix++)
                    {
#>
                case <#= codes[i] #>:
                    this.<#= name #>.<#= suffix #> = pair.DoubleValue;
                    break;
<#
                    } // for
                } // if
                else
                {
                    var codeType = DxfCodePair.ExpectedType(code);
                    var codeTypeValue = TypeToString(codeType);
                    var assignCode = AllowMultiples(property)
                        ? string.Format("this.{0}.Add(", Name(property))
                        : string.Format("this.{0} = ", Name(property));
                    var assignSuffix = AllowMultiples(property)
                        ? ")"
                        : "";
#>
                case <#= code #>:
                    <#= assignCode #><#= ReadConverter(property) #>(pair.<#= codeTypeValue #>)<#= assignSuffix #>;
                    break;
<#
                } // else
            } // if one property per code
            else
            {
#>
                case <#= code #>:
                    // TODO: code is shared by properties <#= string.Join(", ", propertyGroup.Select(p => Name(p))) #>
                    break;
<#
            } // else multiple properties per code
        } // foreach property
#>
                default:
                    return false;
            }

            return true;
        }

        internal static DxfObject FromBuffer(DxfCodePairBufferReader buffer)
        {
            var first = buffer.Peek();
            buffer.Advance();
            DxfObject obj;
            switch (first.StringValue)
            {
<#
foreach (var obj in objects)
{
    var typeString = TypeString(obj);
    if (!string.IsNullOrEmpty(typeString))
    {
        var typeStrings = typeString.Split(',');
        foreach (var singleTypeString in typeStrings)
        {
#>
                case "<#= singleTypeString #>":
<#
        } // foreach
#>
                    obj = new <#= Name(obj) #>();
                    break;
<#
    } // if
} // foreach obj
#>
                default:
                    SwallowObject(buffer);
                    obj = null;
                    break;
            }

            if (obj != null)
            {
                obj = obj.PopulateFromBuffer(buffer);
            }

            return obj;
        }
    }

}

<#
foreach (var obj in objects)
{
    var className = Name(obj);
    var baseClass = BaseClass(obj, "DxfObject");
    if (GetPointers(obj).Any()) baseClass += ", IDxfItemInternal";
    manager.StartNewFile(className + "Generated.cs");
#>
    /// <summary>
    /// <#= className #> class
    /// </summary>
    <#= Accessibility(obj) #> partial class <#= className #> : <#= baseClass #>
    {
        public override DxfObjectType ObjectType { get { return DxfObjectType.<#= ObjectType(obj) #>; } }
<#
    // min and max obj supported versions
    var minVersion = MinVersion(obj);
    if (minVersion != null)
    {
#>
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.<#= minVersion #>; } }
<#
    } // if

    var maxVersion = MaxVersion(obj);
    if (maxVersion != null)
    {
#>
        protected override DxfAcadVersion MaxVersion { get { return DxfAcadVersion.<#= maxVersion #>; } }
<#
    } // if

    //
    // Pointers
    //
    var pointers = GetPointers(obj);
    if (pointers.Any())
    {
#>

        IEnumerable<DxfPointer> IDxfItemInternal.GetPointers()
        {
<#
        foreach (var pointer in pointers)
        {
            if (AllowMultiples(pointer))
            {
#>
            foreach (var pointer in <#= Name(pointer) #>Pointers.Pointers)
            {
                yield return pointer;
            }
<#
            }
            else
            {
#>
            yield return <#= Name(pointer) #>Pointer;
<#
            }
        }
#>
        }

        IEnumerable<IDxfItemInternal> IDxfItemInternal.GetChildItems()
        {
            return ((IDxfItemInternal)this).GetPointers().Select(p => (IDxfItemInternal)p.Item);
        }
<#

        foreach (var pointer in pointers)
        {
            var defaultValue = "new DxfPointer()";
            var typeString = "DxfPointer";
            var suffix = "Pointer";
            if (AllowMultiples(pointer))
            {
                var type = Type(pointer);
                defaultValue = string.Format("new DxfPointerList<{0}>()", type);
                typeString = string.Format("DxfPointerList<{0}>", type);
                suffix += "s";
            }
#>
        internal <#= typeString #> <#= Name(pointer) #><#= suffix #> { get; } = <#= defaultValue #>;
<#
        } // foreach pointer
#>

<#
    } // end if pointers.Any()

    //
    // Properties
    //
    var seenProperties = new HashSet<string>();
    foreach (var property in GetPropertiesAndPointers(obj))
    {
        var propertyName = Name(property);
        if (seenProperties.Contains(propertyName))
        {
            continue;
        }

        seenProperties.Add(propertyName);
        var propertyType = Type(property);
        var getset = string.Format("{{ get; {0}set; }}", SetterAccessibility(property));

        // special-case pointers
        if (IsPointer(property))
        {
            if (AllowMultiples(property))
            {
                getset = string.Format("{{ get {{ return {0}Pointers; }} }}", Name(property));
            }
            else
            {
                getset = string.Format("{{ get {{ return {0}Pointer.Item as {1}; }} set {{ {0}Pointer.Item = value; }} }}", Name(property), propertyType);
            }
        }

        if (AllowMultiples(property))
        {
            propertyType = string.Format("IList<{0}>", propertyType);
        }
#>
        <#= Accessibility(property) #> <#= propertyType #> <#= propertyName #> <#= getset #>
<#
    } // foreach property

    foreach (var property in GetProperties(obj))
    {
        var flags = property.Elements(XName.Get("Flag", xmlns));
        if (flags.Any())
        {
#>

        // <#= Name(property) #> flags
<#
            foreach (var flag in flags)
            {
#>

        public bool <#= Name(flag) #>
        {
            get { return DxfHelpers.GetFlag(<#= Name(property) #>, <#= Mask(flag) #>); }
            set
            {
                var flags = <#= Name(property) #>;
                DxfHelpers.SetFlag(value, ref flags, <#= Mask(flag) #>);
                <#= Name(property) #> = flags;
            }
        }
<#
            } // foreach flag
        } // if
    } // foreach property

    if (HasXData(obj))
    {
#>
        public DxfXData XData { get { return XDataProtected; } set { XDataProtected = value; } }
<#
    }

    var defaultConstructorType = DefaultConstructor(obj);
    if (defaultConstructorType != null)
    {
        //
        // Default constructor
        //
#>

        <#= defaultConstructorType #> <#= className #>()
            : base()
        {
        }

<#
    } // if (defaultConstructorType != null)

    var constructors = obj.Elements(XName.Get("Constructor", xmlns));
    if (constructors.Any())
    {
#>
        //
        // Parameterized constructors
        //
<#
        foreach (var constructor in constructors)
        {
            var parameters = constructor.Elements(XName.Get("ConstructorParameter", xmlns));
            var argList = new List<string>();
            foreach (var parameter in parameters)
            {
                var paramName = CamlCase(Property(parameter));
                var paramType = Type(parameter);
                argList.Add(paramType + " " + paramName);
            }

            var sig = string.Join(", ", argList);
#>
        public <#= className #>(<#= sig #>)
            : this()
        {
<#
            foreach (var parameter in parameters)
            {
#>
            this.<#= Property(parameter) #> = <#= CamlCase(Property(parameter)) #>;
<#
            } // foreach parameter
#>
        }

<#
        } // foreach constructor
    } // if

    //
    // Copy constructor
    //
    var copyConstructorAccessibility = CopyConstructor(obj);
    if (copyConstructorAccessibility != null)
    {
        if (copyConstructorAccessibility == "inherited")
        {
#>
        internal <#= className #>(<#= BaseClass(obj, "DxfObject") #> other)
            : base(other)
        {
        }
<#
        }
        else
        {
#>
        <#= copyConstructorAccessibility #> <#= className #>(<#= className #> other)
            : base(other)
        {
<#
        foreach (var property in GetProperties(obj))
        {
#>
            this.<#= Name(property) #> = other.<#= Name(property) #>;
<#
        } // foreach property
#>
        }
<#
        } // else
#>

<#
    } // copyConstructorAccessibility != null
#>
        protected override void Initialize()
        {
            base.Initialize();
<#
        seenProperties = new HashSet<string>();
        foreach (var property in GetProperties(obj))
        {
            var propertyName = Name(property);
            if (seenProperties.Contains(propertyName))
            {
                continue;
            }

            seenProperties.Add(propertyName);
            var defaultValue = AllowMultiples(property)
                ? string.Format("new List<{0}>()", Type(property))
                : DefaultValue(property);
#>
            this.<#= propertyName #> = <#= defaultValue #>;
<#
        } // foreach property
#>
        }

<#
        if (GenerateWriterFunction(obj))
        {
#>
        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
<#
            foreach (var line in GetWriteCommands(obj))
            {
                if (string.IsNullOrWhiteSpace(line))
                {
#>

<#
                }
                else
                {
#>
            <#= line #>
<#
                }
            } // foreach

            if (HasXData(obj))
            {
#>
            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
<#
            }
#>
        }
<#

    } // if (GenerateWriterFunction(obj))

    if (GetPropertiesAndPointers(obj).Any() && GenerateReaderFunction(obj))
    {
        // handle codes with multiple values (but only positive codes (negative codes mean special handling))
        var multiCodeProperties = GetProperties(obj)
            .Where(p => !ProtectedSet(p))
            .GroupBy(p => Code(p))
            .Where(p => p.Key > 0 && p.Count() > 1)
            .OrderBy(p => p.Key);
        if (multiCodeProperties.Any())
        {
#>

        // This object has vales that share codes between properties and these counters are used to know which property to
        // assign to in TrySetPair() below.
<#
        }

        foreach (var propertyGroup in multiCodeProperties)
        {
#>
        private int _code_<#= propertyGroup.Key #>_index = 0; // shared by properties <#= string.Join(", ", propertyGroup.Select(p => Name(p))) #>
<#
        }
#>

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
<#
        foreach (var propertyGroup in GetPropertiesAndPointers(obj).Where(p => !ProtectedSet(p)).GroupBy(p => Code(p)).OrderBy(p => p.Key))
        {
            var code = propertyGroup.Key;
            if (propertyGroup.Count() == 1)
            {
                var property = propertyGroup.Single();
                var name = Name(property);
                var codes = GetCodeOverrides(property);
                if (codes != null)
                {
                    var suffix = 'X';
                    for (int i = 0; i < codes.Length; i++, suffix++)
                    {
#>
                case <#= codes[i] #>:
                    this.<#= name #>.<#= suffix #> = pair.DoubleValue;
                    break;
<#
                    } // for
                } // if
                else
                {
                    var codeType = DxfCodePair.ExpectedType(code);
                    var codeTypeValue = TypeToString(codeType);
                    if (IsPointer(property))
                    {
                        if (AllowMultiples(property)) name += "Pointers.Pointers";
                        else name += "Pointer.Handle";
                    }
                    var assignCode = AllowMultiples(property)
                        ? string.Format("this.{0}.Add(", name)
                        : string.Format("this.{0} = ", name);
                    var assignSuffix = AllowMultiples(property)
                        ? ")"
                        : "";
                    var value = string.Format("{0}(pair.{1})", ReadConverter(property), codeTypeValue);
                    if (IsPointer(property) && AllowMultiples(property))
                    {
                        value = "new DxfPointer(" + value + ")";
                    }
#>
                case <#= code #>:
                    <#= assignCode #><#= value #><#= assignSuffix #>;
                    break;
<#
                } // else
            } // if one property per code
            else
            {
#>
                case <#= code #>:
<#
                if (code > 0)
                {
#>
                    switch (_code_<#= code #>_index)
                    {
<#
                    for (int i = 0; i < propertyGroup.Count(); i++)
                    {
                        var property = propertyGroup.Skip(i).First();
#>
                        case <#= i #>:
                            this.<#= Name(property) #> = <#= ReadConverter(property) #>(pair.<#= TypeToString(DxfCodePair.ExpectedType(code)) #>);
                            _code_<#= code #>_index++;
                            break;
<#
                    }
#>
                        default:
                            Debug.Assert(false, "Unexpected extra values for code <#= code #>");
                            break;
                    }
<#
                } // code > 0
                else
                {
#>
                    // code is custom-handled and shared by properties <#= string.Join(", ", propertyGroup.Select(p => Name(p))) #>
<#
                } // else code > 0
#>
                    break;
<#
            } // else multiple properties per code
        } // foreach property
#>
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
<#
    } // if
#>
    }

}
<#
    manager.EndBlock();
} // foreach obj

manager.Process(true);
#>
<#@ include file="$(ProjectDir)\DxfCommon.t4" #>

<# // Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#@ include file="$(ProjectDir)\MultipleOutputHelper.t4" #>
<#
var manager = Manager.Create(Host, GenerationEnvironment);
var xml = XDocument.Load(this.Host.ResolvePath(@"ObjectsSpec.xml")).Root;
var xmlns = xml.Name.NamespaceName;
var objects = xml.Elements(XName.Get("Object", xmlns)).Where(x => x.Attribute("Name").Value != "DxfObject");
#>
<# manager.StartHeader(); #>
// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;

namespace IxMilia.Dxf.Objects
{

<# manager.EndBlock(); #>
    public enum DxfObjectType
    {
<#
var enumNames = new HashSet<string>();
foreach (var obj in objects.OrderBy(o => ObjectType(o)))
{
    var objectType = ObjectType(obj);
    if (!string.IsNullOrEmpty(objectType) && !enumNames.Contains(objectType))
    {
        enumNames.Add(objectType);
#>
        <#= objectType #>,
<#
    } // if
} // foreach object
#>
    }

    /// <summary>
    /// DxfObject class
    /// </summary>
    public partial class DxfObject //: IDxfHasHandle
    {
        public string ObjectTypeString
        {
            get
            {
                switch (ObjectType)
                {
<#
foreach (var obj in objects.OrderBy(o => ObjectType(o)))
{
#>
                    case DxfObjectType.<#= ObjectType(obj) #>:
                        return "<#= obj.Attribute("TypeString").Value #>";
<#
}
#>
                    default:
                        throw new NotImplementedException();
                }
            }
        }

        public virtual void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            pairs.Add(new DxfCodePair(0, ObjectTypeString));
        }

        internal virtual bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                //case 5:
                //    this.Handle = pair.StringValue;
                //    break;
                default:
                    return false;
            }

            return true;
        }

        internal static DxfObject FromBuffer(DxfCodePairBufferReader buffer)
        {
            var first = buffer.Peek();
            buffer.Advance();
            DxfObject obj;
            switch (first.StringValue)
            {
<#
foreach (var obj in objects)
{
#>
                case "<#= obj.Attribute("TypeString").Value #>":
                    obj = new <#= obj.Attribute("Name").Value #>();
                    break;
<#
}
#>
                default:
                    SwallowObject(buffer);
                    obj = null;
                    break;
            }

            if (obj != null)
            {
                obj.PopulateFromBuffer(buffer);
            }

            return obj;
        }
    }
}
<#
foreach (var obj in objects)
{
    var className = obj.Attribute("Name").Value;
    manager.StartNewFile(className + ".cs");
#>
    public class <#= className #> : DxfObject
    {
        public override DxfObjectType ObjectType { get { return DxfObjectType.<#= ObjectType(obj) #>; } }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                //case 5:
                //    this.Handle = pair.StringValue;
                //    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }
<#
}
#>
}
<#
manager.EndBlock();
manager.Process(true);
#>
<#+
string ObjectType(XElement obj)
{
    return obj.Attribute("ObjectType").Value;
}
#>

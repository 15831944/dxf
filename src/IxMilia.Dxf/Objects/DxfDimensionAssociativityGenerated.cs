// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;

namespace IxMilia.Dxf.Objects
{

    /// <summary>
    /// DxfDimensionAssociativity class
    /// </summary>
    public partial class DxfDimensionAssociativity : DxfObject
    {
        public override DxfObjectType ObjectType { get { return DxfObjectType.DimensionAssociativity; } }

        public uint DimensionHandle { get; set; }
        public int AssociativityFlags { get; set; }
        public bool IsTransSpace { get; set; }
        public DxfRotatedDimensionType RotatedDimensionType { get; set; }
        public string ClassName { get; set; }
        public DxfObjectOsnapType ObjectOsnapType { get; set; }
        public uint MainObjectHandle { get; set; }
        public DxfSubentityType MainObjectSubentityType { get; set; }
        public int MainObjectGsMarkerIndex { get; set; }
        public string MainObjectXrefHandle { get; set; }
        public double NearOsnapGeometryParameter { get; set; }
        public DxfPoint OsnapPoint { get; set; }
        public uint IntersectionObjectHandle { get; set; }
        public DxfSubentityType IntersectionSubentityType { get; set; }
        public int IntersectionObjectGsMarkerIndex { get; set; }
        public string IntersectionObjectXrefHandle { get; set; }
        public bool HasLastPointReference { get; set; }

        // AssociativityFlags flags

        public bool IsFirstPointReference
        {
            get { return DxfHelpers.GetFlag(AssociativityFlags, 1); }
            set
            {
                var flags = AssociativityFlags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                AssociativityFlags = flags;
            }
        }

        public bool IsSecondPointReference
        {
            get { return DxfHelpers.GetFlag(AssociativityFlags, 2); }
            set
            {
                var flags = AssociativityFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                AssociativityFlags = flags;
            }
        }

        public bool IsThirdPointReference
        {
            get { return DxfHelpers.GetFlag(AssociativityFlags, 4); }
            set
            {
                var flags = AssociativityFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                AssociativityFlags = flags;
            }
        }

        public bool IsFourthPointReference
        {
            get { return DxfHelpers.GetFlag(AssociativityFlags, 8); }
            set
            {
                var flags = AssociativityFlags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                AssociativityFlags = flags;
            }
        }

        public DxfDimensionAssociativity()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DimensionHandle = 0u;
            this.AssociativityFlags = 0;
            this.IsTransSpace = true;
            this.RotatedDimensionType = DxfRotatedDimensionType.Parallel;
            this.ClassName = "AcDbOsnapPointRef";
            this.ObjectOsnapType = DxfObjectOsnapType.None;
            this.MainObjectHandle = 0u;
            this.MainObjectSubentityType = DxfSubentityType.Edge;
            this.MainObjectGsMarkerIndex = 0;
            this.MainObjectXrefHandle = null;
            this.NearOsnapGeometryParameter = 0.0;
            this.OsnapPoint = DxfPoint.Origin;
            this.IntersectionObjectHandle = 0u;
            this.IntersectionSubentityType = DxfSubentityType.Edge;
            this.IntersectionObjectGsMarkerIndex = 0;
            this.IntersectionObjectXrefHandle = null;
            this.HasLastPointReference = false;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(100, "AcDbDimAssoc"));
            pairs.Add(new DxfCodePair(330, UIntHandle(this.DimensionHandle)));
            pairs.Add(new DxfCodePair(90, (this.AssociativityFlags)));
            pairs.Add(new DxfCodePair(70, BoolShort(this.IsTransSpace)));
            pairs.Add(new DxfCodePair(71, (short)(this.RotatedDimensionType)));
            pairs.Add(new DxfCodePair(1, (this.ClassName)));
            pairs.Add(new DxfCodePair(72, (short)(this.ObjectOsnapType)));
            pairs.Add(new DxfCodePair(331, UIntHandle(this.MainObjectHandle)));
            pairs.Add(new DxfCodePair(73, (short)(this.MainObjectSubentityType)));
            pairs.Add(new DxfCodePair(91, (this.MainObjectGsMarkerIndex)));
            pairs.Add(new DxfCodePair(301, (this.MainObjectXrefHandle)));
            pairs.Add(new DxfCodePair(40, (this.NearOsnapGeometryParameter)));
            pairs.Add(new DxfCodePair(10, OsnapPoint.X));
            pairs.Add(new DxfCodePair(20, OsnapPoint.Y));
            pairs.Add(new DxfCodePair(30, OsnapPoint.Z));
            pairs.Add(new DxfCodePair(332, UIntHandle(this.IntersectionObjectHandle)));
            pairs.Add(new DxfCodePair(74, (short)(this.IntersectionSubentityType)));
            pairs.Add(new DxfCodePair(92, (this.IntersectionObjectGsMarkerIndex)));
            pairs.Add(new DxfCodePair(302, (this.IntersectionObjectXrefHandle)));
            pairs.Add(new DxfCodePair(75, BoolShort(this.HasLastPointReference)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 1:
                    this.ClassName = (pair.StringValue);
                    break;
                case 10:
                    this.OsnapPoint.X = pair.DoubleValue;
                    break;
                case 20:
                    this.OsnapPoint.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.OsnapPoint.Z = pair.DoubleValue;
                    break;
                case 40:
                    this.NearOsnapGeometryParameter = (pair.DoubleValue);
                    break;
                case 70:
                    this.IsTransSpace = BoolShort(pair.ShortValue);
                    break;
                case 71:
                    this.RotatedDimensionType = (DxfRotatedDimensionType)(pair.ShortValue);
                    break;
                case 72:
                    this.ObjectOsnapType = (DxfObjectOsnapType)(pair.ShortValue);
                    break;
                case 73:
                    this.MainObjectSubentityType = (DxfSubentityType)(pair.ShortValue);
                    break;
                case 74:
                    this.IntersectionSubentityType = (DxfSubentityType)(pair.ShortValue);
                    break;
                case 75:
                    this.HasLastPointReference = BoolShort(pair.ShortValue);
                    break;
                case 90:
                    this.AssociativityFlags = (pair.IntegerValue);
                    break;
                case 91:
                    this.MainObjectGsMarkerIndex = (pair.IntegerValue);
                    break;
                case 92:
                    this.IntersectionObjectGsMarkerIndex = (pair.IntegerValue);
                    break;
                case 301:
                    this.MainObjectXrefHandle = (pair.StringValue);
                    break;
                case 302:
                    this.IntersectionObjectXrefHandle = (pair.StringValue);
                    break;
                case 330:
                    this.DimensionHandle = UIntHandle(pair.StringValue);
                    break;
                case 331:
                    this.MainObjectHandle = UIntHandle(pair.StringValue);
                    break;
                case 332:
                    this.IntersectionObjectHandle = UIntHandle(pair.StringValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

}

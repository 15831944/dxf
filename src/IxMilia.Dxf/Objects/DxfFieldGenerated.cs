// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace IxMilia.Dxf.Objects
{

    /// <summary>
    /// DxfField class
    /// </summary>
    public partial class DxfField : DxfObject
    {
        public override DxfObjectType ObjectType { get { return DxfObjectType.Field; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R2004; } }

        public string EvaluatorId { get; set; }
        public string FieldCodeString { get; set; }
        public string FieldCodeStringOverflow { get; set; }
        private string _formatStringCode4 { get; set; }
        public string EvaluationErrorMessage { get; set; }
        private int _childFieldCount { get; set; }
        public List<uint> ChildFieldHandles { get; private set; }
        public int EvaluationOption { get; set; }
        public int FillingOption { get; set; }
        public int FieldState { get; set; }
        public int EvaluationStatus { get; set; }
        public int EvaluationErrorCode { get; set; }
        private int _objectIdCount { get; set; }
        public List<uint> ObjectIds { get; private set; }
        private int _dataSetCount { get; set; }
        public List<string> FieldDataKeys { get; private set; }
        public string EvaluatedCacheKey { get; protected set; }
        private int _valueTypeCode { get; set; }
        private int _longValue { get; set; }
        private double _doubleValue { get; set; }
        private uint _idValue { get; set; }
        private int _binaryDataBufferSize { get; set; }
        private string _binaryData { get; set; }
        private string _formatStringCode301 { get; set; }
        private string _formatStringOverflow { get; set; }
        private int _formatStringLength { get; set; }
        private List<int> _childFieldCount_valueTypeCode { get; set; }

        public DxfField()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.EvaluatorId = null;
            this.FieldCodeString = null;
            this.FieldCodeStringOverflow = null;
            this._formatStringCode4 = null;
            this.EvaluationErrorMessage = null;
            this._childFieldCount = 0;
            this.ChildFieldHandles = new List<uint>();
            this.EvaluationOption = 0;
            this.FillingOption = 0;
            this.FieldState = 0;
            this.EvaluationStatus = 0;
            this.EvaluationErrorCode = 0;
            this._objectIdCount = 0;
            this.ObjectIds = new List<uint>();
            this._dataSetCount = 0;
            this.FieldDataKeys = new List<string>();
            this.EvaluatedCacheKey = "ACFD_FIELD_VALUE";
            this._valueTypeCode = 0;
            this._longValue = 0;
            this._doubleValue = 0.0;
            this._idValue = 0u;
            this._binaryDataBufferSize = 0;
            this._binaryData = null;
            this._formatStringCode301 = null;
            this._formatStringOverflow = null;
            this._formatStringLength = 0;
            this._childFieldCount_valueTypeCode = new List<int>();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(1, (this.EvaluatorId)));
            pairs.Add(new DxfCodePair(2, (this.FieldCodeString)));
            pairs.Add(new DxfCodePair(3, (this.FieldCodeStringOverflow)));
            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(4, FormatString));
            }
            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(300, (this.EvaluationErrorMessage)));
            }

            pairs.Add(new DxfCodePair(90, ChildFieldHandles.Count));
            pairs.AddRange(this.ChildFieldHandles.Select(p => new DxfCodePair(360, UIntHandle(p))));
            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(91, (this.EvaluationOption)));
            }

            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(92, (this.FillingOption)));
            }

            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(94, (this.FieldState)));
            }

            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(95, (this.EvaluationStatus)));
            }

            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(96, (this.EvaluationErrorCode)));
            }

            pairs.Add(new DxfCodePair(97, ObjectIds.Count));
            foreach (var item in ObjectIds)
            {
                if (version <= DxfAcadVersion.R2007)
                {
                    pairs.Add(new DxfCodePair(330, UIntHandle(item)));
                }
                if (version >= DxfAcadVersion.R2010)
                {
                    pairs.Add(new DxfCodePair(331, UIntHandle(item)));
                }
            }

            pairs.Add(new DxfCodePair(93, FieldDataKeys.Count));
            pairs.AddRange(this.FieldDataKeys.Select(p => new DxfCodePair(6, p)));
            pairs.Add(new DxfCodePair(7, (this.EvaluatedCacheKey)));
            pairs.Add(new DxfCodePair(90, _valueTypeCode));
            pairs.Add(new DxfCodePair(_valueTypeCode, Value));
            if (version >= DxfAcadVersion.R2010)
            {
                pairs.Add(new DxfCodePair(301, FormatString));
            }
            pairs.Add(new DxfCodePair(9, (this._formatStringOverflow)));
            pairs.Add(new DxfCodePair(98, FormatString?.Length ?? default(int)));
        }

        // This object has vales that share codes between properties and these counters are used to know which property to
        // assign to in TrySetPair() below.
        private int _code_91_index = 0; // shared by properties EvaluationOption, _longValue
        private int _code_92_index = 0; // shared by properties FillingOption, _binaryDataBufferSize

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case -90:
                    // code is custom-handled and shared by properties _childFieldCount, _valueTypeCode
                    break;
                case 1:
                    this.EvaluatorId = (pair.StringValue);
                    break;
                case 2:
                    this.FieldCodeString = (pair.StringValue);
                    break;
                case 3:
                    this.FieldCodeStringOverflow = (pair.StringValue);
                    break;
                case 4:
                    this._formatStringCode4 = (pair.StringValue);
                    break;
                case 6:
                    this.FieldDataKeys.Add((pair.StringValue));
                    break;
                case 9:
                    this._formatStringOverflow = (pair.StringValue);
                    break;
                case 90:
                    this._childFieldCount_valueTypeCode.Add((pair.IntegerValue));
                    break;
                case 91:
                    switch (_code_91_index)
                    {
                        case 0:
                            this.EvaluationOption = (pair.IntegerValue);
                            _code_91_index++;
                            break;
                        case 1:
                            this._longValue = (pair.IntegerValue);
                            _code_91_index++;
                            break;
                        default:
                            Debug.Assert(false, "Unexpected extra values for code 91");
                            break;
                    }
                    break;
                case 92:
                    switch (_code_92_index)
                    {
                        case 0:
                            this.FillingOption = (pair.IntegerValue);
                            _code_92_index++;
                            break;
                        case 1:
                            this._binaryDataBufferSize = (pair.IntegerValue);
                            _code_92_index++;
                            break;
                        default:
                            Debug.Assert(false, "Unexpected extra values for code 92");
                            break;
                    }
                    break;
                case 93:
                    this._dataSetCount = (pair.IntegerValue);
                    break;
                case 94:
                    this.FieldState = (pair.IntegerValue);
                    break;
                case 95:
                    this.EvaluationStatus = (pair.IntegerValue);
                    break;
                case 96:
                    this.EvaluationErrorCode = (pair.IntegerValue);
                    break;
                case 97:
                    this._objectIdCount = (pair.IntegerValue);
                    break;
                case 98:
                    this._formatStringLength = (pair.IntegerValue);
                    break;
                case 140:
                    this._doubleValue = (pair.DoubleValue);
                    break;
                case 300:
                    this.EvaluationErrorMessage = (pair.StringValue);
                    break;
                case 301:
                    this._formatStringCode301 = (pair.StringValue);
                    break;
                case 310:
                    this._binaryData = (pair.StringValue);
                    break;
                case 330:
                    this._idValue = UIntHandle(pair.StringValue);
                    break;
                case 331:
                    this.ObjectIds.Add(UIntHandle(pair.StringValue));
                    break;
                case 360:
                    this.ChildFieldHandles.Add(UIntHandle(pair.StringValue));
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

}

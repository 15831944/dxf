// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;

namespace IxMilia.Dxf.Entities
{

    /// <summary>
    /// DxfOleFrame class
    /// </summary>
    public partial class DxfOleFrame : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.OleFrame; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R13; } }

        public int VersionNumber { get; set; }
        public int BinaryDataLength { get; set; }
        public List<string> BinaryDataStrings { get; private set; }

        public DxfOleFrame()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.VersionNumber = 0;
            this.BinaryDataLength = 0;
            this.BinaryDataStrings = new List<string>();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(100, "AcDbOleFrame"));
            pairs.Add(new DxfCodePair(70, (short)(this.VersionNumber)));
            pairs.Add(new DxfCodePair(90, (this.BinaryDataLength)));
            foreach (var item in BinaryDataStrings)
            {
                pairs.Add(new DxfCodePair(310, item));
            }

            pairs.Add(new DxfCodePair(1, "OLE"));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 70:
                    this.VersionNumber = (int)(pair.ShortValue);
                    break;
                case 90:
                    this.BinaryDataLength = (pair.IntegerValue);
                    break;
                case 310:
                    this.BinaryDataStrings.Add((pair.StringValue));
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

}

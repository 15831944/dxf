<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#
var xml = XDocument.Load(this.Host.ResolvePath(@"EntitiesSpec.xml")).Root;
var xmlns = xml.Name.NamespaceName;
var entities = xml.Elements(XName.Get("Entity", xmlns)).Where(x => x.Attribute("Name").Value != "DxfEntity");
#>
// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;

namespace IxMilia.Dxf.Entities
{

    public enum DxfEntityType
    {
<#
var enumNames = new HashSet<string>();
foreach (var entity in entities.OrderBy(e => EntityType(e)))
{
	var entityType = EntityType(entity);
	if (!string.IsNullOrEmpty(entityType) && !enumNames.Contains(entityType))
	{
		enumNames.Add(entityType);
#>
        <#= entityType #>,
<#
	} // if
} // foreach entity
#>
    }

<#
var baseEntity = xml.Elements(XName.Get("Entity", xmlns)).Where(x => Name(x) == "DxfEntity").Single();
#>
    /// <summary>
    /// DxfEntity class
    /// </summary>
    public partial class DxfEntity
    {
<#
foreach (var property in GetProperties(baseEntity))
{
	var typeString = Type(property);
	if (AllowMultiples(property))
		typeString = string.Format("List<{0}>", typeString);
#>
        public <#= typeString #> <#= Name(property) #> { get; set; }
<#
} // foreach property
#>

        public string EntityTypeString
        {
            get
            {
                switch (EntityType)
                {
<#
foreach (var entity in entities)
{
	var typeString = TypeString(entity);
	if (!string.IsNullOrEmpty(typeString))
	{
#>
                    case DxfEntityType.<#= EntityType(entity) #>:
                        return "<#= typeString #>";
<#
	} // if
} // foreach entity
#>
                    default:
                        throw new NotImplementedException();
                }
            }
        }

        protected DxfEntity()
        {
            Initialize();
        }

        protected DxfEntity(DxfEntity other)
            : this()
        {
<#
foreach (var property in GetProperties(baseEntity))
{
#>
            this.<#= Name(property) #> = other.<#= Name(property) #>;
<#
} // foreach property
#>
        }

        protected virtual void Initialize()
        {
<#
foreach (var property in GetProperties(baseEntity))
{
	var defaultValue = AllowMultiples(property)
		? string.Format("new List<{0}>()", Type(property))
		: DefaultValue(property);
#>
            this.<#= Name(property) #> = <#= defaultValue #>;
<#
} // foreach property
#>
        }

        protected virtual void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            pairs.Add(new DxfCodePair(0, EntityTypeString));
<#
			foreach (var line in GetWriteCommands(baseEntity))
			{
				if (string.IsNullOrWhiteSpace(line))
				{
#>

<#
				}
				else
				{
#>
            <#= line #>
<#
				}
			} // foreach
#>
        }

        internal virtual bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
<#
		foreach (var propertyGroup in GetProperties(baseEntity).Where(p => !ProtectedSet(p)).GroupBy(p => Code(p)).OrderBy(p => p.Key))
		{
			var code = propertyGroup.Key;
			if (propertyGroup.Count() == 1)
			{
				var property = propertyGroup.Single();
				var name = Name(property);
				var codes = GetCodeOverrides(property);
				if (codes != null)
				{
					var suffix = 'X';
					for (int i = 0; i < codes.Length; i++, suffix++)
					{
#>
                case <#= codes[i] #>:
                    this.<#= name #>.<#= suffix #> = pair.DoubleValue;
                    break;
<#
					} // for
				} // if
				else
				{
					var codeType = DxfCodePair.ExpectedType(code);
					var codeTypeValue = TypeToString(codeType);
					var assignCode = AllowMultiples(property)
						? string.Format("this.{0}.Add(", Name(property))
						: string.Format("this.{0} = ", Name(property));
					var assignSuffix = AllowMultiples(property)
						? ")"
						: "";
#>
                case <#= code #>:
                    <#= assignCode #><#= ReadConverter(property) #>(pair.<#= codeTypeValue #>)<#= assignSuffix #>;
                    break;
<#
				} // else
			} // if one property per code
			else
			{
#>
                case <#= code #>:
                    // TODO: code is shared by properties <#= string.Join(", ", propertyGroup.Select(p => Name(p))) #>
                    break;
<#
			} // else multiple properties per code
		} // foreach property
#>
                default:
                    return false;
            }

            return true;
        }

        internal static DxfEntity FromBuffer(DxfCodePairBufferReader buffer)
        {
            var first = buffer.Peek();
            buffer.Advance();
            DxfEntity entity;
            switch (first.StringValue)
            {
<#
foreach (var entity in entities)
{
	var typeString = TypeString(entity);
	if (!string.IsNullOrEmpty(typeString))
	{
#>
                case "<#= typeString #>":
                    entity = new <#= Name(entity) #>();
                    break;
<#
	} // if
} // foreach entity
#>
                default:
                    SwallowEntity(buffer);
                    entity = null;
                    break;
            }

            if (entity != null)
            {
                entity = entity.PopulateFromBuffer(buffer);
            }

            return entity;
        }
    }

<#
foreach (var entity in entities)
{
    var className = Name(entity);
	var baseClass = BaseClass(entity);
#>
    /// <summary>
    /// <#= className #> class
    /// </summary>
    public partial class <#= className #> : <#= baseClass #>
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.<#= EntityType(entity) #>; } }
<#
	// min and max entity supported versions
	var minVersion = MinVersion(entity);
	if (minVersion != null)
	{
#>
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.<#= minVersion #>; } }
<#
	} // if

	var maxVersion = MaxVersion(entity);
	if (maxVersion != null)
	{
#>
        protected override DxfAcadVersion MaxVersion { get { return DxfAcadVersion.<#= maxVersion #>; } }
<#
	} // if

#>

<#

	//
	// Properties
	//
	foreach (var property in GetProperties(entity))
	{
		var propertyType = Type(property);
		var getset = ProtectedSet(property) ? "{ get; protected set; }" : "{ get; set; }";
		if (AllowMultiples(property))
		{
			propertyType = string.Format("List<{0}>", propertyType);
		}
#>
        <#= Accessibility(property) #> <#= propertyType #> <#= Name(property) #> <#= getset #>
<#
	} // foreach property

	foreach (var property in GetProperties(entity))
	{
		var flags = property.Elements(XName.Get("Flag", xmlns));
		if (flags.Any())
		{
#>

        // <#= Name(property) #> flags
<#
			foreach (var flag in flags)
			{
#>

        public bool <#= Name(flag) #>
        {
            get { return DxfHelpers.GetFlag(<#= Name(property) #>, <#= Mask(flag) #>); }
            set
            {
                var flags = <#= Name(property) #>;
                DxfHelpers.SetFlag(value, ref flags, <#= Mask(flag) #>);
                <#= Name(property) #> = flags;
            }
        }
<#
			} // foreach flag
		} // if
	} // foreach property

	var defaultConstructorType = DefaultConstructor(entity);
	if (defaultConstructorType != null)
	{
	    //
	    // Default constructor
	    //
#>

        <#= defaultConstructorType #> <#= className #>()
            : base()
        {
        }

<#
	} // if (defaultConstructorType != null)

	var constructors = entity.Elements(XName.Get("Constructor", xmlns));
	if (constructors.Any())
	{
#>
        //
        // Parameterized constructors
        //
<#
		foreach (var constructor in constructors)
		{
			var parameters = constructor.Elements(XName.Get("ConstructorParameter", xmlns));
			var argList = new List<string>();
			foreach (var parameter in parameters)
			{
				var paramName = CamlCase(Property(parameter));
				var paramType = Type(parameter);
				argList.Add(paramType + " " + paramName);
			}

			var sig = string.Join(", ", argList);
#>
        public <#= className #>(<#= sig #>)
            : this()
        {
<#
			foreach (var parameter in parameters)
			{
#>
            this.<#= Property(parameter) #> = <#= CamlCase(Property(parameter)) #>;
<#
			} // foreach parameter
#>
        }

<#
		} // foreach constructor
	} // if

	//
	// Copy constructor
	//
	var copyConstructorAccessibility = CopyConstructor(entity);
	if (copyConstructorAccessibility != null)
	{
		if (copyConstructorAccessibility == "inherited")
		{
#>
        internal <#= className #>(<#= BaseClass(entity) #> other)
            : base(other)
        {
        }
<#
		}
		else
		{
#>
        <#= copyConstructorAccessibility #> <#= className #>(<#= className #> other)
            : base(other)
        {
<#
		foreach (var property in GetProperties(entity))
		{
#>
            this.<#= Name(property) #> = other.<#= Name(property) #>;
<#
		} // foreach property
#>
        }
<#
		} // else
#>

<#
	} // copyConstructorAccessibility != null
#>
        protected override void Initialize()
        {
            base.Initialize();
<#
		foreach (var property in GetProperties(entity))
		{
			var defaultValue = AllowMultiples(property)
				? string.Format("new List<{0}>()", Type(property))
				: DefaultValue(property);
#>
            this.<#= Name(property) #> = <#= defaultValue #>;
<#
		} // foreach property
#>
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
<#
			foreach (var line in GetWriteCommands(entity))
			{
				if (string.IsNullOrWhiteSpace(line))
				{
#>

<#
				}
				else
				{
#>
            <#= line #>
<#
				}
			} // foreach
#>
        }
<#
	if (GetProperties(entity).Any())
	{
#>

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
<#
		foreach (var propertyGroup in GetProperties(entity).Where(p => !ProtectedSet(p)).GroupBy(p => Code(p)).OrderBy(p => p.Key))
		{
			var code = propertyGroup.Key;
			if (propertyGroup.Count() == 1)
			{
				var property = propertyGroup.Single();
				var name = Name(property);
				var codes = GetCodeOverrides(property);
				if (codes != null)
				{
					var suffix = 'X';
					for (int i = 0; i < codes.Length; i++, suffix++)
					{
#>
                case <#= codes[i] #>:
                    this.<#= name #>.<#= suffix #> = pair.DoubleValue;
                    break;
<#
					} // for
				} // if
				else
				{
					var codeType = DxfCodePair.ExpectedType(code);
					var codeTypeValue = TypeToString(codeType);
					var assignCode = AllowMultiples(property)
						? string.Format("this.{0}.Add(", Name(property))
						: string.Format("this.{0} = ", Name(property));
					var assignSuffix = AllowMultiples(property)
						? ")"
						: "";
#>
                case <#= code #>:
                    <#= assignCode #><#= ReadConverter(property) #>(pair.<#= codeTypeValue #>)<#= assignSuffix #>;
                    break;
<#
				} // else
			} // if one property per code
			else
			{
#>
                case <#= code #>:
                    // TODO: code is shared by properties <#= string.Join(", ", propertyGroup.Select(p => Name(p))) #>
                    break;
<#
			} // else multiple properties per code
		} // foreach property
#>
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
<#
	} // if
#>
    }

<#
} // foreach entity
#>
    public partial class DxfDimensionBase
    {
        protected override DxfEntity PostParse()
        {
            DxfDimensionBase newDimension = null;
            switch (DimensionType)
            {
<#
foreach (var entity in entities.OrderBy(e => EntityType(e)).Where(e => BaseClass(e) == "DxfDimensionBase"))
{
#>
                case DxfDimensionType.<#= Tag(entity) #>:
                    newDimension = new <#= Name(entity) #>(this);
                    break;
<#
}
#>
            }

            if (newDimension != null)
            {
                foreach (var pair in ExcessCodePairs)
                {
                    newDimension.TrySetPair(pair);
                }
            }

            return newDimension;
        }
    }

}
<#@ include file="$(ProjectDir)\DxfCommon.t4" #>

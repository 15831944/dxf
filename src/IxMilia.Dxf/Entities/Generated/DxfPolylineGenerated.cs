// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfPolyline class
    /// </summary>
    public partial class DxfPolyline : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Polyline; } }
        public bool ContainsVertices { get; set; }
        public DxfPoint Location { get; set; }
        public double Thickness { get; set; }
        public int Flags { get; set; }
        public double DefaultStartingWidth { get; set; }
        public double DefaultEndingWidth { get; set; }
        public int PolygonMeshMVertexCount { get; set; }
        public int PolygonMeshNVertexCount { get; set; }
        public int SmoothSurfaceMDensity { get; set; }
        public int SmoothSurfaceNDensity { get; set; }
        public DxfPolylineCurvedAndSmoothSurfaceType SurfaceType { get; set; }
        public DxfVector Normal { get; set; }

        // Flags flags

        public bool IsClosed
        {
            get { return DxfHelpers.GetFlag(Flags, 1); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                Flags = flags;
            }
        }

        public bool CurveFitVerticiesAdded
        {
            get { return DxfHelpers.GetFlag(Flags, 2); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                Flags = flags;
            }
        }

        public bool SplineFitVerticiesAdded
        {
            get { return DxfHelpers.GetFlag(Flags, 4); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                Flags = flags;
            }
        }

        public bool Is3DPolyline
        {
            get { return DxfHelpers.GetFlag(Flags, 8); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                Flags = flags;
            }
        }

        public bool Is3DPolygonMesh
        {
            get { return DxfHelpers.GetFlag(Flags, 16); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 16);
                Flags = flags;
            }
        }

        public bool IsPolygonMeshClosedInNDirection
        {
            get { return DxfHelpers.GetFlag(Flags, 32); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 32);
                Flags = flags;
            }
        }

        public bool IsPolyfaceMesh
        {
            get { return DxfHelpers.GetFlag(Flags, 64); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 64);
                Flags = flags;
            }
        }

        public bool IsLineTypePatternGeneratedContinuously
        {
            get { return DxfHelpers.GetFlag(Flags, 128); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 128);
                Flags = flags;
            }
        }

        public DxfXData XData { get { return ((IDxfHasXDataHidden)this).XDataHidden; } set { ((IDxfHasXDataHidden)this).XDataHidden = value; } }

        public DxfPolyline()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.ContainsVertices = true;
            this.Location = DxfPoint.Origin;
            this.Thickness = 0.0;
            this.Flags = 0;
            this.DefaultStartingWidth = 0.0;
            this.DefaultEndingWidth = 0.0;
            this.PolygonMeshMVertexCount = 0;
            this.PolygonMeshNVertexCount = 0;
            this.SmoothSurfaceMDensity = 0;
            this.SmoothSurfaceNDensity = 0;
            this.SurfaceType = DxfPolylineCurvedAndSmoothSurfaceType.None;
            this.Normal = DxfVector.ZAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(100, "AcDb2dPolyline"));
            if (version <= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(66, BoolShort(this.ContainsVertices)));
            }

            if (version >= DxfAcadVersion.R12)
            {
                pairs.Add(new DxfCodePair(10, Location?.X ?? default(double)));
                pairs.Add(new DxfCodePair(20, Location?.Y ?? default(double)));
                pairs.Add(new DxfCodePair(30, Location?.Z ?? default(double)));
            }

            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (this.Thickness)));
            }

            if (this.Flags != 0)
            {
                pairs.Add(new DxfCodePair(70, (short)(this.Flags)));
            }

            if (this.DefaultStartingWidth != 0.0)
            {
                pairs.Add(new DxfCodePair(40, (this.DefaultStartingWidth)));
            }

            if (this.DefaultEndingWidth != 0.0)
            {
                pairs.Add(new DxfCodePair(41, (this.DefaultEndingWidth)));
            }

            if (this.PolygonMeshMVertexCount != 0)
            {
                pairs.Add(new DxfCodePair(71, (short)(this.PolygonMeshMVertexCount)));
            }

            if (this.PolygonMeshNVertexCount != 0)
            {
                pairs.Add(new DxfCodePair(72, (short)(this.PolygonMeshNVertexCount)));
            }

            if (this.SmoothSurfaceMDensity != 0)
            {
                pairs.Add(new DxfCodePair(73, (short)(this.SmoothSurfaceMDensity)));
            }

            if (this.SmoothSurfaceNDensity != 0)
            {
                pairs.Add(new DxfCodePair(74, (short)(this.SmoothSurfaceNDensity)));
            }

            if (this.SurfaceType != DxfPolylineCurvedAndSmoothSurfaceType.None)
            {
                pairs.Add(new DxfCodePair(75, (short)(this.SurfaceType)));
            }

            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal?.X ?? default(double)));
                pairs.Add(new DxfCodePair(220, Normal?.Y ?? default(double)));
                pairs.Add(new DxfCodePair(230, Normal?.Z ?? default(double)));
            }

            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 40:
                    this.DefaultStartingWidth = (pair.DoubleValue);
                    break;
                case 41:
                    this.DefaultEndingWidth = (pair.DoubleValue);
                    break;
                case 66:
                    this.ContainsVertices = BoolShort(pair.ShortValue);
                    break;
                case 70:
                    this.Flags = (int)(pair.ShortValue);
                    break;
                case 71:
                    this.PolygonMeshMVertexCount = (int)(pair.ShortValue);
                    break;
                case 72:
                    this.PolygonMeshNVertexCount = (int)(pair.ShortValue);
                    break;
                case 73:
                    this.SmoothSurfaceMDensity = (int)(pair.ShortValue);
                    break;
                case 74:
                    this.SmoothSurfaceNDensity = (int)(pair.ShortValue);
                    break;
                case 75:
                    this.SurfaceType = (DxfPolylineCurvedAndSmoothSurfaceType)(pair.ShortValue);
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }
}

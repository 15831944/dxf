// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfOrdinateDimension class
    /// </summary>
    public partial class DxfOrdinateDimension : DxfDimensionBase
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Dimension; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R11; } }
        public DxfPoint DefinitionPoint2 { get; set; }
        public DxfPoint DefinitionPoint3 { get; set; }

        public DxfOrdinateDimension()
            : base()
        {
        }

        internal DxfOrdinateDimension(DxfDimensionBase other)
            : base(other)
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DimensionType = DxfDimensionType.Ordinate;
            this.DefinitionPoint2 = DxfPoint.Origin;
            this.DefinitionPoint3 = DxfPoint.Origin;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(100, "AcDbOrdinateDimension"));
            pairs.Add(new DxfCodePair(13, DefinitionPoint2?.X ?? default(double)));
            pairs.Add(new DxfCodePair(23, DefinitionPoint2?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(33, DefinitionPoint2?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(14, DefinitionPoint3?.X ?? default(double)));
            pairs.Add(new DxfCodePair(24, DefinitionPoint3?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(34, DefinitionPoint3?.Z ?? default(double)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 13:
                    this.DefinitionPoint2.X = pair.DoubleValue;
                    break;
                case 23:
                    this.DefinitionPoint2.Y = pair.DoubleValue;
                    break;
                case 33:
                    this.DefinitionPoint2.Z = pair.DoubleValue;
                    break;
                case 14:
                    this.DefinitionPoint3.X = pair.DoubleValue;
                    break;
                case 24:
                    this.DefinitionPoint3.Y = pair.DoubleValue;
                    break;
                case 34:
                    this.DefinitionPoint3.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }
}

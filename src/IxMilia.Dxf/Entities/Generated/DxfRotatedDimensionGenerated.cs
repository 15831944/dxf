// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfRotatedDimension class
    /// </summary>
    public partial class DxfRotatedDimension : DxfDimensionBase
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Dimension; } }
        public DxfPoint InsertionPoint { get; set; }
        public DxfPoint DefinitionPoint2 { get; set; }
        public DxfPoint DefinitionPoint3 { get; set; }
        public double RotationAngle { get; set; }
        public double ExtensionLineAngle { get; set; }

        public DxfRotatedDimension()
            : base()
        {
        }

        internal DxfRotatedDimension(DxfDimensionBase other)
            : base(other)
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DimensionType = DxfDimensionType.RotatedHorizontalOrVertical;
            this.InsertionPoint = DxfPoint.Origin;
            this.DefinitionPoint2 = DxfPoint.Origin;
            this.DefinitionPoint3 = DxfPoint.Origin;
            this.RotationAngle = 0.0;
            this.ExtensionLineAngle = 0.0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbAlignedDimension"));
            }
            pairs.Add(new DxfCodePair(12, InsertionPoint?.X ?? default(double)));
            pairs.Add(new DxfCodePair(22, InsertionPoint?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(32, InsertionPoint?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(13, DefinitionPoint2?.X ?? default(double)));
            pairs.Add(new DxfCodePair(23, DefinitionPoint2?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(33, DefinitionPoint2?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(14, DefinitionPoint3?.X ?? default(double)));
            pairs.Add(new DxfCodePair(24, DefinitionPoint3?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(34, DefinitionPoint3?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(50, (this.RotationAngle)));
            pairs.Add(new DxfCodePair(52, (this.ExtensionLineAngle)));
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbRotatedDimension"));
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 12:
                    this.InsertionPoint.X = pair.DoubleValue;
                    break;
                case 22:
                    this.InsertionPoint.Y = pair.DoubleValue;
                    break;
                case 32:
                    this.InsertionPoint.Z = pair.DoubleValue;
                    break;
                case 13:
                    this.DefinitionPoint2.X = pair.DoubleValue;
                    break;
                case 23:
                    this.DefinitionPoint2.Y = pair.DoubleValue;
                    break;
                case 33:
                    this.DefinitionPoint2.Z = pair.DoubleValue;
                    break;
                case 14:
                    this.DefinitionPoint3.X = pair.DoubleValue;
                    break;
                case 24:
                    this.DefinitionPoint3.Y = pair.DoubleValue;
                    break;
                case 34:
                    this.DefinitionPoint3.Z = pair.DoubleValue;
                    break;
                case 50:
                    this.RotationAngle = (pair.DoubleValue);
                    break;
                case 52:
                    this.ExtensionLineAngle = (pair.DoubleValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }
}

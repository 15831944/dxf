// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfVertex class
    /// </summary>
    public partial class DxfVertex : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Vertex; } }
        public DxfPoint Location { get; set; }
        public double StartingWidth { get; set; }
        public double EndingWidth { get; set; }
        public double Bulge { get; set; }
        public int Flags { get; set; }
        public double CurveFitTangentDirection { get; set; }
        public int PolyfaceMeshVertexIndex1 { get; set; }
        public int PolyfaceMeshVertexIndex2 { get; set; }
        public int PolyfaceMeshVertexIndex3 { get; set; }
        public int PolyfaceMeshVertexIndex4 { get; set; }
        public int Identifier { get; set; }

        // Flags flags

        public bool IsExtraCreatedByCurveFit
        {
            get { return DxfHelpers.GetFlag(Flags, 1); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                Flags = flags;
            }
        }

        public bool IsCurveFitTangentDefined
        {
            get { return DxfHelpers.GetFlag(Flags, 2); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                Flags = flags;
            }
        }

        public bool IsSplineVertexCreatedBySplineFitting
        {
            get { return DxfHelpers.GetFlag(Flags, 8); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                Flags = flags;
            }
        }

        public bool IsSplineFrameControlPoint
        {
            get { return DxfHelpers.GetFlag(Flags, 16); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 16);
                Flags = flags;
            }
        }

        public bool Is3DPolylineVertex
        {
            get { return DxfHelpers.GetFlag(Flags, 32); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 32);
                Flags = flags;
            }
        }

        public bool Is3DPolygonMesh
        {
            get { return DxfHelpers.GetFlag(Flags, 64); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 64);
                Flags = flags;
            }
        }

        public bool IsPolyfaceMeshVertex
        {
            get { return DxfHelpers.GetFlag(Flags, 128); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 128);
                Flags = flags;
            }
        }

        public DxfVertex()
            : base()
        {
        }

        public DxfVertex(DxfPoint location)
            : this()
        {
            this.Location = location;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Location = DxfPoint.Origin;
            this.StartingWidth = 0.0;
            this.EndingWidth = 0.0;
            this.Bulge = 0.0;
            this.Flags = 0;
            this.CurveFitTangentDirection = 0.0;
            this.PolyfaceMeshVertexIndex1 = 0;
            this.PolyfaceMeshVertexIndex2 = 0;
            this.PolyfaceMeshVertexIndex3 = 0;
            this.PolyfaceMeshVertexIndex4 = 0;
            this.Identifier = 0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(100, "AcDbVertex"));
            pairs.Add(new DxfCodePair(10, Location?.X ?? default(double)));
            pairs.Add(new DxfCodePair(20, Location?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(30, Location?.Z ?? default(double)));
            if (this.StartingWidth != 0.0)
            {
                pairs.Add(new DxfCodePair(40, (this.StartingWidth)));
            }

            if (this.EndingWidth != 0.0)
            {
                pairs.Add(new DxfCodePair(41, (this.EndingWidth)));
            }

            if (this.Bulge != 0.0)
            {
                pairs.Add(new DxfCodePair(42, (this.Bulge)));
            }

            pairs.Add(new DxfCodePair(70, (short)(this.Flags)));
            pairs.Add(new DxfCodePair(50, (this.CurveFitTangentDirection)));
            if (version >= DxfAcadVersion.R13 && this.PolyfaceMeshVertexIndex1 != 0)
            {
                pairs.Add(new DxfCodePair(71, (short)(this.PolyfaceMeshVertexIndex1)));
            }

            if (version >= DxfAcadVersion.R13 && this.PolyfaceMeshVertexIndex2 != 0)
            {
                pairs.Add(new DxfCodePair(72, (short)(this.PolyfaceMeshVertexIndex2)));
            }

            if (version >= DxfAcadVersion.R13 && this.PolyfaceMeshVertexIndex3 != 0)
            {
                pairs.Add(new DxfCodePair(73, (short)(this.PolyfaceMeshVertexIndex3)));
            }

            if (version >= DxfAcadVersion.R13 && this.PolyfaceMeshVertexIndex4 != 0)
            {
                pairs.Add(new DxfCodePair(74, (short)(this.PolyfaceMeshVertexIndex4)));
            }

            if (version >= DxfAcadVersion.R2010)
            {
                pairs.Add(new DxfCodePair(91, (this.Identifier)));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 40:
                    this.StartingWidth = (pair.DoubleValue);
                    break;
                case 41:
                    this.EndingWidth = (pair.DoubleValue);
                    break;
                case 42:
                    this.Bulge = (pair.DoubleValue);
                    break;
                case 50:
                    this.CurveFitTangentDirection = (pair.DoubleValue);
                    break;
                case 70:
                    this.Flags = (int)(pair.ShortValue);
                    break;
                case 71:
                    this.PolyfaceMeshVertexIndex1 = (int)(pair.ShortValue);
                    break;
                case 72:
                    this.PolyfaceMeshVertexIndex2 = (int)(pair.ShortValue);
                    break;
                case 73:
                    this.PolyfaceMeshVertexIndex3 = (int)(pair.ShortValue);
                    break;
                case 74:
                    this.PolyfaceMeshVertexIndex4 = (int)(pair.ShortValue);
                    break;
                case 91:
                    this.Identifier = (pair.IntegerValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }
}

// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// Dxf3DFace class
    /// </summary>
    public partial class Dxf3DFace : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Face; } }
        public DxfPoint FirstCorner { get; set; }
        public DxfPoint SecondCorner { get; set; }
        public DxfPoint ThirdCorner { get; set; }
        public DxfPoint FourthCorner { get; set; }
        public int EdgeFlags { get; set; }

        // EdgeFlags flags

        public bool IsFirstEdgeInvisible
        {
            get { return DxfHelpers.GetFlag(EdgeFlags, 1); }
            set
            {
                var flags = EdgeFlags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                EdgeFlags = flags;
            }
        }

        public bool IsSecondEdgeInvisible
        {
            get { return DxfHelpers.GetFlag(EdgeFlags, 2); }
            set
            {
                var flags = EdgeFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                EdgeFlags = flags;
            }
        }

        public bool IsThirdEdgeInvisible
        {
            get { return DxfHelpers.GetFlag(EdgeFlags, 4); }
            set
            {
                var flags = EdgeFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                EdgeFlags = flags;
            }
        }

        public bool IsFourthEdgeInvisible
        {
            get { return DxfHelpers.GetFlag(EdgeFlags, 8); }
            set
            {
                var flags = EdgeFlags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                EdgeFlags = flags;
            }
        }

        public Dxf3DFace()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.FirstCorner = DxfPoint.Origin;
            this.SecondCorner = DxfPoint.Origin;
            this.ThirdCorner = DxfPoint.Origin;
            this.FourthCorner = DxfPoint.Origin;
            this.EdgeFlags = 0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(100, "AcDbFace"));
            pairs.Add(new DxfCodePair(10, FirstCorner?.X ?? default(double)));
            pairs.Add(new DxfCodePair(20, FirstCorner?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(30, FirstCorner?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(11, SecondCorner?.X ?? default(double)));
            pairs.Add(new DxfCodePair(21, SecondCorner?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(31, SecondCorner?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(12, ThirdCorner?.X ?? default(double)));
            pairs.Add(new DxfCodePair(22, ThirdCorner?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(32, ThirdCorner?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(13, FourthCorner?.X ?? default(double)));
            pairs.Add(new DxfCodePair(23, FourthCorner?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(33, FourthCorner?.Z ?? default(double)));
            if (this.EdgeFlags != 0)
            {
                pairs.Add(new DxfCodePair(70, (short)(this.EdgeFlags)));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.FirstCorner.X = pair.DoubleValue;
                    break;
                case 20:
                    this.FirstCorner.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.FirstCorner.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.SecondCorner.X = pair.DoubleValue;
                    break;
                case 21:
                    this.SecondCorner.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.SecondCorner.Z = pair.DoubleValue;
                    break;
                case 12:
                    this.ThirdCorner.X = pair.DoubleValue;
                    break;
                case 22:
                    this.ThirdCorner.Y = pair.DoubleValue;
                    break;
                case 32:
                    this.ThirdCorner.Z = pair.DoubleValue;
                    break;
                case 13:
                    this.FourthCorner.X = pair.DoubleValue;
                    break;
                case 23:
                    this.FourthCorner.Y = pair.DoubleValue;
                    break;
                case 33:
                    this.FourthCorner.Z = pair.DoubleValue;
                    break;
                case 70:
                    this.EdgeFlags = (int)(pair.ShortValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }
}

// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;

namespace IxMilia.Dxf.Entities
{

    /// <summary>
    /// DxfEllipse class
    /// </summary>
    public partial class DxfEllipse : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Ellipse; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R13; } }

        public DxfPoint Center { get; set; }
        public DxfVector MajorAxis { get; set; }
        public DxfVector Normal { get; set; }
        public double MinorAxisRatio { get; set; }
        public double StartParameter { get; set; }
        public double EndParameter { get; set; }

        public DxfEllipse()
            : base()
        {
        }

        //
        // Parameterized constructors
        //
        public DxfEllipse(DxfPoint center, DxfVector majorAxis, double minorAxisRatio)
            : this()
        {
            this.Center = center;
            this.MajorAxis = majorAxis;
            this.MinorAxisRatio = minorAxisRatio;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Center = DxfPoint.Origin;
            this.MajorAxis = DxfVector.XAxis;
            this.Normal = DxfVector.ZAxis;
            this.MinorAxisRatio = 1.0;
            this.StartParameter = 0.0;
            this.EndParameter = Math.PI * 2;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(100, "AcDbEllipse"));
            pairs.Add(new DxfCodePair(10, Center?.X ?? default(double)));
            pairs.Add(new DxfCodePair(20, Center?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(30, Center?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(11, MajorAxis?.X ?? default(double)));
            pairs.Add(new DxfCodePair(21, MajorAxis?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(31, MajorAxis?.Z ?? default(double)));
            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal?.X ?? default(double)));
                pairs.Add(new DxfCodePair(220, Normal?.Y ?? default(double)));
                pairs.Add(new DxfCodePair(230, Normal?.Z ?? default(double)));
            }

            pairs.Add(new DxfCodePair(40, (this.MinorAxisRatio)));
            pairs.Add(new DxfCodePair(41, (this.StartParameter)));
            pairs.Add(new DxfCodePair(42, (this.EndParameter)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.Center.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Center.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Center.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.MajorAxis.X = pair.DoubleValue;
                    break;
                case 21:
                    this.MajorAxis.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.MajorAxis.Z = pair.DoubleValue;
                    break;
                case 40:
                    this.MinorAxisRatio = (pair.DoubleValue);
                    break;
                case 41:
                    this.StartParameter = (pair.DoubleValue);
                    break;
                case 42:
                    this.EndParameter = (pair.DoubleValue);
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

}

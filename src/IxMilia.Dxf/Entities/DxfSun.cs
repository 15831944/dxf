// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;

namespace IxMilia.Dxf.Entities
{

    /// <summary>
    /// DxfSun class
    /// </summary>
    public partial class DxfSun : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Sun; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R2007; } }

        public int Version { get; set; }
        public bool Status { get; set; }
        public DxfColor LightColor { get; set; }
        public double Intensity { get; set; }
        public bool CastsShadows { get; set; }
        public int JulianDay { get; set; }
        public int SecondsPastMidnight { get; set; }
        public bool IsDST { get; set; }
        public DxfShadowType ShadowTyoe { get; set; }
        public short ShadowMapSize { get; set; }
        public short ShadowSoftness { get; set; }

        public DxfSun()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Version = 0;
            this.Status = false;
            this.LightColor = DxfColor.FromRawValue(7);
            this.Intensity = 0.0;
            this.CastsShadows = false;
            this.JulianDay = 0;
            this.SecondsPastMidnight = 0;
            this.IsDST = false;
            this.ShadowTyoe = DxfShadowType.RayTraced;
            this.ShadowMapSize = 0;
            this.ShadowSoftness = 0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(100, "AcDbSun"));
            pairs.Add(new DxfCodePair(90, (this.Version)));
            pairs.Add(new DxfCodePair(290, (this.Status)));
            pairs.Add(new DxfCodePair(63, DxfColor.GetRawValue(this.LightColor)));
            pairs.Add(new DxfCodePair(40, (this.Intensity)));
            pairs.Add(new DxfCodePair(291, (this.CastsShadows)));
            pairs.Add(new DxfCodePair(91, (this.JulianDay)));
            pairs.Add(new DxfCodePair(92, (this.SecondsPastMidnight)));
            pairs.Add(new DxfCodePair(292, (this.IsDST)));
            pairs.Add(new DxfCodePair(70, (short)(this.ShadowTyoe)));
            pairs.Add(new DxfCodePair(71, (this.ShadowMapSize)));
            pairs.Add(new DxfCodePair(280, (this.ShadowSoftness)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 40:
                    this.Intensity = (pair.DoubleValue);
                    break;
                case 63:
                    this.LightColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case 70:
                    this.ShadowTyoe = (DxfShadowType)(pair.ShortValue);
                    break;
                case 71:
                    this.ShadowMapSize = (pair.ShortValue);
                    break;
                case 90:
                    this.Version = (pair.IntegerValue);
                    break;
                case 91:
                    this.JulianDay = (pair.IntegerValue);
                    break;
                case 92:
                    this.SecondsPastMidnight = (pair.IntegerValue);
                    break;
                case 280:
                    this.ShadowSoftness = (pair.ShortValue);
                    break;
                case 290:
                    this.Status = (pair.BoolValue);
                    break;
                case 291:
                    this.CastsShadows = (pair.BoolValue);
                    break;
                case 292:
                    this.IsDST = (pair.BoolValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

}

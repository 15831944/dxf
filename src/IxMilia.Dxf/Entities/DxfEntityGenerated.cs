// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;

namespace IxMilia.Dxf.Entities
{

    public enum DxfEntityType
    {
        Arc,
        ArcAlignedText,
        Attribute,
        AttributeDefinition,
        Body,
        Circle,
        Dimension,
        Ellipse,
        Face,
        Image,
        Insert,
        Leader,
        Line,
        LwPolyline,
        ModelerGeometry,
        Ole2Frame,
        OleFrame,
        Point,
        Polyline,
        ProxyEntity,
        Ray,
        Region,
        RText,
        Seqend,
        Shape,
        Solid,
        Spline,
        Text,
        Tolerance,
        Trace,
        Vertex,
        WipeOut,
        XLine,
    }

    /// <summary>
    /// DxfEntity class
    /// </summary>
    public partial class DxfEntity
    {
        public string Handle { get; set; }
        public string OwnerHandle { get; set; }
        public bool IsInPaperSpace { get; set; }
        public string Layer { get; set; }
        public string LinetypeName { get; set; }
        public string MaterialHandle { get; set; }
        public DxfColor Color { get; set; }
        public short LineweightEnumValue { get; set; }
        public double LinetypeScale { get; set; }
        public bool IsVisible { get; set; }
        public int ImageByteCount { get; set; }
        public List<string> PreviewImageData { get; set; }
        public int Color24Bit { get; set; }
        public string ColorName { get; set; }
        public int Transparency { get; set; }
        public string PlotStyleHandle { get; set; }
        public DxfShadowMode ShadowMode { get; set; }

        public string EntityTypeString
        {
            get
            {
                switch (EntityType)
                {
                    case DxfEntityType.Face:
                        return "3DFACE";
                    case DxfEntityType.ModelerGeometry:
                        return "3DSOLID";
                    case DxfEntityType.ProxyEntity:
                        return "ACAD_PROXY_ENTITY";
                    case DxfEntityType.Arc:
                        return "ARC";
                    case DxfEntityType.ArcAlignedText:
                        return "ARCALIGNEDTEXT";
                    case DxfEntityType.AttributeDefinition:
                        return "ATTDEF";
                    case DxfEntityType.Attribute:
                        return "ATTRIB";
                    case DxfEntityType.Body:
                        return "BODY";
                    case DxfEntityType.Circle:
                        return "CIRCLE";
                    case DxfEntityType.Dimension:
                        return "DIMENSION";
                    case DxfEntityType.Ellipse:
                        return "ELLIPSE";
                    case DxfEntityType.Image:
                        return "IMAGE";
                    case DxfEntityType.Insert:
                        return "INSERT";
                    case DxfEntityType.Leader:
                        return "LEADER";
                    case DxfEntityType.Line:
                        return "LINE";
                    case DxfEntityType.LwPolyline:
                        return "LWPOLYLINE";
                    case DxfEntityType.OleFrame:
                        return "OLEFRAME";
                    case DxfEntityType.Ole2Frame:
                        return "OLE2FRAME";
                    case DxfEntityType.Point:
                        return "POINT";
                    case DxfEntityType.Polyline:
                        return "POLYLINE";
                    case DxfEntityType.Ray:
                        return "RAY";
                    case DxfEntityType.Region:
                        return "REGION";
                    case DxfEntityType.RText:
                        return "RTEXT";
                    case DxfEntityType.Seqend:
                        return "SEQEND";
                    case DxfEntityType.Shape:
                        return "SHAPE";
                    case DxfEntityType.Solid:
                        return "SOLID";
                    case DxfEntityType.Spline:
                        return "SPLINE";
                    case DxfEntityType.Text:
                        return "TEXT";
                    case DxfEntityType.Tolerance:
                        return "TOLERANCE";
                    case DxfEntityType.Trace:
                        return "TRACE";
                    case DxfEntityType.Vertex:
                        return "VERTEX";
                    case DxfEntityType.WipeOut:
                        return "WIPEOUT";
                    case DxfEntityType.XLine:
                        return "XLINE";
                    default:
                        throw new NotImplementedException();
                }
            }
        }

        protected DxfEntity()
        {
            Initialize();
        }

        protected DxfEntity(DxfEntity other)
            : this()
        {
            this.Handle = other.Handle;
            this.OwnerHandle = other.OwnerHandle;
            this.IsInPaperSpace = other.IsInPaperSpace;
            this.Layer = other.Layer;
            this.LinetypeName = other.LinetypeName;
            this.MaterialHandle = other.MaterialHandle;
            this.Color = other.Color;
            this.LineweightEnumValue = other.LineweightEnumValue;
            this.LinetypeScale = other.LinetypeScale;
            this.IsVisible = other.IsVisible;
            this.ImageByteCount = other.ImageByteCount;
            this.PreviewImageData = other.PreviewImageData;
            this.Color24Bit = other.Color24Bit;
            this.ColorName = other.ColorName;
            this.Transparency = other.Transparency;
            this.PlotStyleHandle = other.PlotStyleHandle;
            this.ShadowMode = other.ShadowMode;
        }

        protected virtual void Initialize()
        {
            this.Handle = null;
            this.OwnerHandle = null;
            this.IsInPaperSpace = false;
            this.Layer = "0";
            this.LinetypeName = "BYLAYER";
            this.MaterialHandle = "BYLAYER";
            this.Color = DxfColor.ByLayer;
            this.LineweightEnumValue = 0;
            this.LinetypeScale = 1.0;
            this.IsVisible = true;
            this.ImageByteCount = 0;
            this.PreviewImageData = new List<string>();
            this.Color24Bit = 0;
            this.ColorName = null;
            this.Transparency = 0;
            this.PlotStyleHandle = null;
            this.ShadowMode = DxfShadowMode.CastsAndReceivesShadows;
        }

        protected virtual void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            pairs.Add(new DxfCodePair(0, EntityTypeString));
            pairs.Add(new DxfCodePair(5, (this.Handle)));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(330, (this.OwnerHandle)));
            }

            if (this.IsInPaperSpace != false)
            {
                pairs.Add(new DxfCodePair(67, BoolShort(this.IsInPaperSpace)));
            }

            pairs.Add(new DxfCodePair(8, (this.Layer)));
            if (this.LinetypeName != "BYLAYER")
            {
                pairs.Add(new DxfCodePair(6, (this.LinetypeName)));
            }

            if (version >= DxfAcadVersion.R2007 && this.MaterialHandle != "BYLAYER")
            {
                pairs.Add(new DxfCodePair(347, (this.MaterialHandle)));
            }

            if (this.Color != DxfColor.ByLayer)
            {
                pairs.Add(new DxfCodePair(62, DxfColor.GetRawValue(this.Color)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(370, (this.LineweightEnumValue)));
            }

            if (this.LinetypeScale != 1.0)
            {
                pairs.Add(new DxfCodePair(48, (this.LinetypeScale)));
            }

            if (this.IsVisible != true)
            {
                pairs.Add(new DxfCodePair(60, NotBoolShort(this.IsVisible)));
            }

            if (version >= DxfAcadVersion.R2000 && this.ImageByteCount != 0)
            {
                pairs.Add(new DxfCodePair(92, (this.ImageByteCount)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.AddRange(this.PreviewImageData.Select(p => new DxfCodePair(310, p)));
            }

            if (version >= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(420, (this.Color24Bit)));
            }

            if (version >= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(430, (this.ColorName)));
            }

            if (version >= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(440, (this.Transparency)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(390, (this.PlotStyleHandle)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(284, (short)(this.ShadowMode)));
            }

        }

        internal virtual bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 5:
                    this.Handle = (pair.StringValue);
                    break;
                case 6:
                    this.LinetypeName = (pair.StringValue);
                    break;
                case 8:
                    this.Layer = (pair.StringValue);
                    break;
                case 48:
                    this.LinetypeScale = (pair.DoubleValue);
                    break;
                case 60:
                    this.IsVisible = !BoolShort(pair.ShortValue);
                    break;
                case 62:
                    this.Color = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case 67:
                    this.IsInPaperSpace = BoolShort(pair.ShortValue);
                    break;
                case 92:
                    this.ImageByteCount = (pair.IntegerValue);
                    break;
                case 284:
                    this.ShadowMode = (DxfShadowMode)(pair.ShortValue);
                    break;
                case 310:
                    this.PreviewImageData.Add((pair.StringValue));
                    break;
                case 330:
                    this.OwnerHandle = (pair.StringValue);
                    break;
                case 347:
                    this.MaterialHandle = (pair.StringValue);
                    break;
                case 370:
                    this.LineweightEnumValue = (pair.ShortValue);
                    break;
                case 390:
                    this.PlotStyleHandle = (pair.StringValue);
                    break;
                case 420:
                    this.Color24Bit = (pair.IntegerValue);
                    break;
                case 430:
                    this.ColorName = (pair.StringValue);
                    break;
                case 440:
                    this.Transparency = (pair.IntegerValue);
                    break;
                default:
                    return false;
            }

            return true;
        }

        internal static DxfEntity FromBuffer(DxfCodePairBufferReader buffer)
        {
            var first = buffer.Peek();
            buffer.Advance();
            DxfEntity entity;
            switch (first.StringValue)
            {
                case "3DFACE":
                    entity = new Dxf3DFace();
                    break;
                case "3DSOLID":
                    entity = new Dxf3DSolid();
                    break;
                case "ACAD_PROXY_ENTITY":
                    entity = new DxfProxyEntity();
                    break;
                case "ARC":
                    entity = new DxfArc();
                    break;
                case "ARCALIGNEDTEXT":
                    entity = new DxfArcAlignedText();
                    break;
                case "ATTDEF":
                    entity = new DxfAttributeDefinition();
                    break;
                case "ATTRIB":
                    entity = new DxfAttribute();
                    break;
                case "BODY":
                    entity = new DxfBody();
                    break;
                case "CIRCLE":
                    entity = new DxfCircle();
                    break;
                case "DIMENSION":
                    entity = new DxfDimensionBase();
                    break;
                case "ELLIPSE":
                    entity = new DxfEllipse();
                    break;
                case "IMAGE":
                    entity = new DxfImage();
                    break;
                case "INSERT":
                    entity = new DxfInsert();
                    break;
                case "LEADER":
                    entity = new DxfLeader();
                    break;
                case "LINE":
                    entity = new DxfLine();
                    break;
                case "LWPOLYLINE":
                    entity = new DxfLwPolyline();
                    break;
                case "OLEFRAME":
                    entity = new DxfOleFrame();
                    break;
                case "OLE2FRAME":
                    entity = new DxfOle2Frame();
                    break;
                case "POINT":
                    entity = new DxfModelPoint();
                    break;
                case "POLYLINE":
                    entity = new DxfPolyline();
                    break;
                case "RAY":
                    entity = new DxfRay();
                    break;
                case "REGION":
                    entity = new DxfRegion();
                    break;
                case "RTEXT":
                    entity = new DxfRText();
                    break;
                case "SEQEND":
                    entity = new DxfSeqend();
                    break;
                case "SHAPE":
                    entity = new DxfShape();
                    break;
                case "SOLID":
                    entity = new DxfSolid();
                    break;
                case "SPLINE":
                    entity = new DxfSpline();
                    break;
                case "TEXT":
                    entity = new DxfText();
                    break;
                case "TOLERANCE":
                    entity = new DxfTolerance();
                    break;
                case "TRACE":
                    entity = new DxfTrace();
                    break;
                case "VERTEX":
                    entity = new DxfVertex();
                    break;
                case "WIPEOUT":
                    entity = new DxfWipeout();
                    break;
                case "XLINE":
                    entity = new DxfXLine();
                    break;
                default:
                    SwallowEntity(buffer);
                    entity = null;
                    break;
            }

            if (entity != null)
            {
                entity = entity.PopulateFromBuffer(buffer);
            }

            return entity;
        }
    }

    /// <summary>
    /// Dxf3DFace class
    /// </summary>
    public partial class Dxf3DFace : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Face; } }

        public DxfPoint FirstCorner { get; set; }
        public DxfPoint SecondCorner { get; set; }
        public DxfPoint ThirdCorner { get; set; }
        public DxfPoint FourthCorner { get; set; }
        public int EdgeFlags { get; set; }

        // EdgeFlags flags

        public bool IsFirstEdgeInvisible
        {
            get { return DxfHelpers.GetFlag(EdgeFlags, 1); }
            set
            {
                var flags = EdgeFlags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                EdgeFlags = flags;
            }
        }

        public bool IsSecondEdgeInvisible
        {
            get { return DxfHelpers.GetFlag(EdgeFlags, 2); }
            set
            {
                var flags = EdgeFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                EdgeFlags = flags;
            }
        }

        public bool IsThirdEdgeInvisible
        {
            get { return DxfHelpers.GetFlag(EdgeFlags, 4); }
            set
            {
                var flags = EdgeFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                EdgeFlags = flags;
            }
        }

        public bool IsFourthEdgeInvisible
        {
            get { return DxfHelpers.GetFlag(EdgeFlags, 8); }
            set
            {
                var flags = EdgeFlags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                EdgeFlags = flags;
            }
        }

        public Dxf3DFace()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.FirstCorner = DxfPoint.Origin;
            this.SecondCorner = DxfPoint.Origin;
            this.ThirdCorner = DxfPoint.Origin;
            this.FourthCorner = DxfPoint.Origin;
            this.EdgeFlags = 0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbFace"));
            pairs.Add(new DxfCodePair(10, FirstCorner.X));
            pairs.Add(new DxfCodePair(20, FirstCorner.Y));
            pairs.Add(new DxfCodePair(30, FirstCorner.Z));
            pairs.Add(new DxfCodePair(11, SecondCorner.X));
            pairs.Add(new DxfCodePair(21, SecondCorner.Y));
            pairs.Add(new DxfCodePair(31, SecondCorner.Z));
            pairs.Add(new DxfCodePair(12, ThirdCorner.X));
            pairs.Add(new DxfCodePair(22, ThirdCorner.Y));
            pairs.Add(new DxfCodePair(32, ThirdCorner.Z));
            pairs.Add(new DxfCodePair(13, FourthCorner.X));
            pairs.Add(new DxfCodePair(23, FourthCorner.Y));
            pairs.Add(new DxfCodePair(33, FourthCorner.Z));
            if (this.EdgeFlags != 0)
            {
                pairs.Add(new DxfCodePair(70, (short)(this.EdgeFlags)));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.FirstCorner.X = pair.DoubleValue;
                    break;
                case 20:
                    this.FirstCorner.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.FirstCorner.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.SecondCorner.X = pair.DoubleValue;
                    break;
                case 21:
                    this.SecondCorner.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.SecondCorner.Z = pair.DoubleValue;
                    break;
                case 12:
                    this.ThirdCorner.X = pair.DoubleValue;
                    break;
                case 22:
                    this.ThirdCorner.Y = pair.DoubleValue;
                    break;
                case 32:
                    this.ThirdCorner.Z = pair.DoubleValue;
                    break;
                case 13:
                    this.FourthCorner.X = pair.DoubleValue;
                    break;
                case 23:
                    this.FourthCorner.Y = pair.DoubleValue;
                    break;
                case 33:
                    this.FourthCorner.Z = pair.DoubleValue;
                    break;
                case 70:
                    this.EdgeFlags = (int)(pair.ShortValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// Dxf3DSolid class
    /// </summary>
    public partial class Dxf3DSolid : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.ModelerGeometry; } }

        public short FormatVersionNumber { get; set; }
        public List<string> CustomData { get; set; }
        public List<string> CustomData2 { get; set; }

        public Dxf3DSolid()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.FormatVersionNumber = 1;
            this.CustomData = new List<string>();
            this.CustomData2 = new List<string>();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbModelerGeometry"));
            pairs.Add(new DxfCodePair(70, (this.FormatVersionNumber)));
            pairs.AddRange(this.CustomData.Select(p => new DxfCodePair(1, p)));
            pairs.AddRange(this.CustomData2.Select(p => new DxfCodePair(3, p)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 1:
                    this.CustomData.Add((pair.StringValue));
                    break;
                case 3:
                    this.CustomData2.Add((pair.StringValue));
                    break;
                case 70:
                    this.FormatVersionNumber = (pair.ShortValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfProxyEntity class
    /// </summary>
    public partial class DxfProxyEntity : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.ProxyEntity; } }

        public int ProxyEntityClassId { get; set; }
        public int ApplicationEntityClassId { get; set; }
        public int GraphicsDataSize { get; set; }
        public List<string> GraphicsDataString { get; set; }
        public int EntityDataSize { get; set; }
        public List<string> EntityDataString { get; set; }
        public string ObjectID1 { get; set; }
        public string ObjectID2 { get; set; }
        public string ObjectID3 { get; set; }
        public string ObjectID4 { get; set; }
        public int Terminator { get; set; }
        private uint ObjectDrawingFormat { get; set; }
        public bool OriginalDataFormatIsDxf { get; set; }

        public DxfProxyEntity()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.ProxyEntityClassId = 498;
            this.ApplicationEntityClassId = 500;
            this.GraphicsDataSize = 0;
            this.GraphicsDataString = new List<string>();
            this.EntityDataSize = 0;
            this.EntityDataString = new List<string>();
            this.ObjectID1 = null;
            this.ObjectID2 = null;
            this.ObjectID3 = null;
            this.ObjectID4 = null;
            this.Terminator = 0;
            this.ObjectDrawingFormat = 0;
            this.OriginalDataFormatIsDxf = true;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbProxyEntity"));
            pairs.Add(new DxfCodePair(90, (this.ProxyEntityClassId)));
            pairs.Add(new DxfCodePair(91, (this.ApplicationEntityClassId)));
            pairs.Add(new DxfCodePair(92, (this.GraphicsDataSize)));
            pairs.AddRange(this.GraphicsDataString.Select(p => new DxfCodePair(310, p)));
            pairs.Add(new DxfCodePair(93, (this.EntityDataSize)));
            pairs.AddRange(this.EntityDataString.Select(p => new DxfCodePair(310, p)));
            pairs.Add(new DxfCodePair(330, (this.ObjectID1)));
            pairs.Add(new DxfCodePair(340, (this.ObjectID2)));
            pairs.Add(new DxfCodePair(350, (this.ObjectID3)));
            pairs.Add(new DxfCodePair(360, (this.ObjectID4)));
            pairs.Add(new DxfCodePair(94, (this.Terminator)));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(95, (int)(this.ObjectDrawingFormat)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(70, BoolShort(this.OriginalDataFormatIsDxf)));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 70:
                    this.OriginalDataFormatIsDxf = BoolShort(pair.ShortValue);
                    break;
                case 90:
                    this.ProxyEntityClassId = (pair.IntegerValue);
                    break;
                case 91:
                    this.ApplicationEntityClassId = (pair.IntegerValue);
                    break;
                case 92:
                    this.GraphicsDataSize = (pair.IntegerValue);
                    break;
                case 93:
                    this.EntityDataSize = (pair.IntegerValue);
                    break;
                case 94:
                    this.Terminator = (pair.IntegerValue);
                    break;
                case 95:
                    this.ObjectDrawingFormat = (uint)(pair.IntegerValue);
                    break;
                case 310:
                    // TODO: code is shared by properties GraphicsDataString, EntityDataString
                    break;
                case 330:
                    this.ObjectID1 = (pair.StringValue);
                    break;
                case 340:
                    this.ObjectID2 = (pair.StringValue);
                    break;
                case 350:
                    this.ObjectID3 = (pair.StringValue);
                    break;
                case 360:
                    this.ObjectID4 = (pair.StringValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfArc class
    /// </summary>
    public partial class DxfArc : DxfCircle
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Arc; } }

        public double StartAngle { get; set; }
        public double EndAngle { get; set; }

        public DxfArc()
            : base()
        {
        }

        //
        // Parameterized constructors
        //
        public DxfArc(DxfPoint center, double radius, double startAngle, double endAngle)
            : this()
        {
            this.Center = center;
            this.Radius = radius;
            this.StartAngle = startAngle;
            this.EndAngle = endAngle;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.StartAngle = 0.0;
            this.EndAngle = 360.0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbArc"));
            pairs.Add(new DxfCodePair(50, (this.StartAngle)));
            pairs.Add(new DxfCodePair(51, (this.EndAngle)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 50:
                    this.StartAngle = (pair.DoubleValue);
                    break;
                case 51:
                    this.EndAngle = (pair.DoubleValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfArcAlignedText class
    /// </summary>
    public partial class DxfArcAlignedText : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.ArcAlignedText; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R2000; } }

        public string Text { get; set; }
        public string FontName { get; set; }
        public string BigfontName { get; set; }
        public string TextStyleName { get; set; }
        public DxfPoint CenterPoint { get; set; }
        public double ArcRadius { get; set; }
        public double WidthFactor { get; set; }
        public double TextHeight { get; set; }
        public double CharacterSpacing { get; set; }
        public double OffsetFromArc { get; set; }
        public double RightOffset { get; set; }
        public double LeftOffset { get; set; }
        public double StartAngle { get; set; }
        public double EndAngle { get; set; }
        public bool IsCharacterOrderReversed { get; set; }
        public short DirectionFlag { get; set; }
        public short AlignmentFlag { get; set; }
        public short SideFlag { get; set; }
        public bool IsBold { get; set; }
        public bool IsItalic { get; set; }
        public bool IsUnderline { get; set; }
        public short CharacterSetValue { get; set; }
        public short PitchAndFamilyValue { get; set; }
        public DxfFontType FontType { get; set; }
        public int ColorIndex { get; set; }
        public DxfVector ExtrusionDirection { get; set; }
        public short WizardFlag { get; set; }
        public string HandleId { get; set; }

        public DxfArcAlignedText()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Text = null;
            this.FontName = null;
            this.BigfontName = null;
            this.TextStyleName = null;
            this.CenterPoint = DxfPoint.Origin;
            this.ArcRadius = 0.0;
            this.WidthFactor = 1.0;
            this.TextHeight = 0.0;
            this.CharacterSpacing = 0.0;
            this.OffsetFromArc = 0.0;
            this.RightOffset = 0.0;
            this.LeftOffset = 0.0;
            this.StartAngle = 0.0;
            this.EndAngle = 0.0;
            this.IsCharacterOrderReversed = false;
            this.DirectionFlag = 0;
            this.AlignmentFlag = 0;
            this.SideFlag = 0;
            this.IsBold = false;
            this.IsItalic = false;
            this.IsUnderline = false;
            this.CharacterSetValue = 0;
            this.PitchAndFamilyValue = 0;
            this.FontType = DxfFontType.TTF;
            this.ColorIndex = 0;
            this.ExtrusionDirection = DxfVector.ZAxis;
            this.WizardFlag = 0;
            this.HandleId = null;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbArcAlignedText"));
            pairs.Add(new DxfCodePair(1, (this.Text)));
            pairs.Add(new DxfCodePair(2, (this.FontName)));
            pairs.Add(new DxfCodePair(3, (this.BigfontName)));
            pairs.Add(new DxfCodePair(7, (this.TextStyleName)));
            pairs.Add(new DxfCodePair(10, CenterPoint.X));
            pairs.Add(new DxfCodePair(20, CenterPoint.Y));
            pairs.Add(new DxfCodePair(30, CenterPoint.Z));
            pairs.Add(new DxfCodePair(40, (this.ArcRadius)));
            pairs.Add(new DxfCodePair(41, (this.WidthFactor)));
            pairs.Add(new DxfCodePair(42, (this.TextHeight)));
            pairs.Add(new DxfCodePair(43, (this.CharacterSpacing)));
            pairs.Add(new DxfCodePair(44, (this.OffsetFromArc)));
            pairs.Add(new DxfCodePair(45, (this.RightOffset)));
            pairs.Add(new DxfCodePair(46, (this.LeftOffset)));
            pairs.Add(new DxfCodePair(50, (this.StartAngle)));
            pairs.Add(new DxfCodePair(51, (this.EndAngle)));
            pairs.Add(new DxfCodePair(70, BoolShort(this.IsCharacterOrderReversed)));
            pairs.Add(new DxfCodePair(71, (this.DirectionFlag)));
            pairs.Add(new DxfCodePair(72, (this.AlignmentFlag)));
            pairs.Add(new DxfCodePair(73, (this.SideFlag)));
            pairs.Add(new DxfCodePair(74, BoolShort(this.IsBold)));
            pairs.Add(new DxfCodePair(75, BoolShort(this.IsItalic)));
            pairs.Add(new DxfCodePair(76, BoolShort(this.IsUnderline)));
            pairs.Add(new DxfCodePair(77, (this.CharacterSetValue)));
            pairs.Add(new DxfCodePair(78, (this.PitchAndFamilyValue)));
            pairs.Add(new DxfCodePair(79, (short)(this.FontType)));
            pairs.Add(new DxfCodePair(90, (this.ColorIndex)));
            if (this.ExtrusionDirection != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
                pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
                pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            }

            pairs.Add(new DxfCodePair(280, (this.WizardFlag)));
            pairs.Add(new DxfCodePair(330, (this.HandleId)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 1:
                    this.Text = (pair.StringValue);
                    break;
                case 2:
                    this.FontName = (pair.StringValue);
                    break;
                case 3:
                    this.BigfontName = (pair.StringValue);
                    break;
                case 7:
                    this.TextStyleName = (pair.StringValue);
                    break;
                case 10:
                    this.CenterPoint.X = pair.DoubleValue;
                    break;
                case 20:
                    this.CenterPoint.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.CenterPoint.Z = pair.DoubleValue;
                    break;
                case 40:
                    this.ArcRadius = (pair.DoubleValue);
                    break;
                case 41:
                    this.WidthFactor = (pair.DoubleValue);
                    break;
                case 42:
                    this.TextHeight = (pair.DoubleValue);
                    break;
                case 43:
                    this.CharacterSpacing = (pair.DoubleValue);
                    break;
                case 44:
                    this.OffsetFromArc = (pair.DoubleValue);
                    break;
                case 45:
                    this.RightOffset = (pair.DoubleValue);
                    break;
                case 46:
                    this.LeftOffset = (pair.DoubleValue);
                    break;
                case 50:
                    this.StartAngle = (pair.DoubleValue);
                    break;
                case 51:
                    this.EndAngle = (pair.DoubleValue);
                    break;
                case 70:
                    this.IsCharacterOrderReversed = BoolShort(pair.ShortValue);
                    break;
                case 71:
                    this.DirectionFlag = (pair.ShortValue);
                    break;
                case 72:
                    this.AlignmentFlag = (pair.ShortValue);
                    break;
                case 73:
                    this.SideFlag = (pair.ShortValue);
                    break;
                case 74:
                    this.IsBold = BoolShort(pair.ShortValue);
                    break;
                case 75:
                    this.IsItalic = BoolShort(pair.ShortValue);
                    break;
                case 76:
                    this.IsUnderline = BoolShort(pair.ShortValue);
                    break;
                case 77:
                    this.CharacterSetValue = (pair.ShortValue);
                    break;
                case 78:
                    this.PitchAndFamilyValue = (pair.ShortValue);
                    break;
                case 79:
                    this.FontType = (DxfFontType)(pair.ShortValue);
                    break;
                case 90:
                    this.ColorIndex = (pair.IntegerValue);
                    break;
                case 210:
                    this.ExtrusionDirection.X = pair.DoubleValue;
                    break;
                case 220:
                    this.ExtrusionDirection.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.ExtrusionDirection.Z = pair.DoubleValue;
                    break;
                case 280:
                    this.WizardFlag = (pair.ShortValue);
                    break;
                case 330:
                    this.HandleId = (pair.StringValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfAttributeDefinition class
    /// </summary>
    public partial class DxfAttributeDefinition : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.AttributeDefinition; } }

        public double Thickness { get; set; }
        public DxfPoint Location { get; set; }
        public double TextHeight { get; set; }
        public string Value { get; set; }
        public double Rotation { get; set; }
        public double RelativeXScaleFactor { get; set; }
        public double ObliqueAngle { get; set; }
        public string TextStyleName { get; set; }
        public int TextGenerationFlags { get; set; }
        public DxfHorizontalTextJustification HorizontalTextJustification { get; set; }
        public DxfPoint SecondAlignmentPoint { get; set; }
        public DxfVector Normal { get; set; }
        public string Prompt { get; set; }
        public string Tag { get; set; }
        public int Flags { get; set; }
        public short FieldLength { get; set; }
        public DxfVerticalTextJustification VerticalTextJustification { get; set; }

        // TextGenerationFlags flags

        public bool IsTextBackward
        {
            get { return DxfHelpers.GetFlag(TextGenerationFlags, 2); }
            set
            {
                var flags = TextGenerationFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                TextGenerationFlags = flags;
            }
        }

        public bool IsTextUpsideDown
        {
            get { return DxfHelpers.GetFlag(TextGenerationFlags, 4); }
            set
            {
                var flags = TextGenerationFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                TextGenerationFlags = flags;
            }
        }

        // Flags flags

        public bool IsInvisible
        {
            get { return DxfHelpers.GetFlag(Flags, 1); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                Flags = flags;
            }
        }

        public bool IsConstant
        {
            get { return DxfHelpers.GetFlag(Flags, 2); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                Flags = flags;
            }
        }

        public bool IsInputVerificationRequired
        {
            get { return DxfHelpers.GetFlag(Flags, 4); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                Flags = flags;
            }
        }

        public bool IsAttributePresent
        {
            get { return DxfHelpers.GetFlag(Flags, 8); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                Flags = flags;
            }
        }

        public DxfAttributeDefinition()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Thickness = 0.0;
            this.Location = DxfPoint.Origin;
            this.TextHeight = 1.0;
            this.Value = null;
            this.Rotation = 0;
            this.RelativeXScaleFactor = 1.0;
            this.ObliqueAngle = 0.0;
            this.TextStyleName = "STANDARD";
            this.TextGenerationFlags = 0;
            this.HorizontalTextJustification = DxfHorizontalTextJustification.Left;
            this.SecondAlignmentPoint = DxfPoint.Origin;
            this.Normal = DxfVector.ZAxis;
            this.Prompt = null;
            this.Tag = null;
            this.Flags = 0;
            this.FieldLength = 0;
            this.VerticalTextJustification = DxfVerticalTextJustification.Baseline;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbText"));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (this.Thickness)));
            }

            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            pairs.Add(new DxfCodePair(40, (this.TextHeight)));
            pairs.Add(new DxfCodePair(1, (this.Value)));
            pairs.Add(new DxfCodePair(100, "AcDbAttributeDefinition"));
            if (this.Rotation != 0)
            {
                pairs.Add(new DxfCodePair(50, (this.Rotation)));
            }

            if (this.RelativeXScaleFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(41, (this.RelativeXScaleFactor)));
            }

            if (this.ObliqueAngle != 0.0)
            {
                pairs.Add(new DxfCodePair(51, (this.ObliqueAngle)));
            }

            if (this.TextStyleName != "STANDARD")
            {
                pairs.Add(new DxfCodePair(7, (this.TextStyleName)));
            }

            if (this.TextGenerationFlags != 0)
            {
                pairs.Add(new DxfCodePair(71, (short)(this.TextGenerationFlags)));
            }

            if (this.HorizontalTextJustification != DxfHorizontalTextJustification.Left)
            {
                pairs.Add(new DxfCodePair(72, (short)(this.HorizontalTextJustification)));
            }

            pairs.Add(new DxfCodePair(11, SecondAlignmentPoint.X));
            pairs.Add(new DxfCodePair(21, SecondAlignmentPoint.Y));
            pairs.Add(new DxfCodePair(31, SecondAlignmentPoint.Z));
            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal.X));
                pairs.Add(new DxfCodePair(220, Normal.Y));
                pairs.Add(new DxfCodePair(230, Normal.Z));
            }

            pairs.Add(new DxfCodePair(100, "AcDbAttributeDefinition"));
            pairs.Add(new DxfCodePair(3, (this.Prompt)));
            pairs.Add(new DxfCodePair(2, (this.Tag)));
            pairs.Add(new DxfCodePair(70, (short)(this.Flags)));
            if (this.FieldLength != 0)
            {
                pairs.Add(new DxfCodePair(73, (this.FieldLength)));
            }

            if (this.VerticalTextJustification != DxfVerticalTextJustification.Baseline)
            {
                pairs.Add(new DxfCodePair(74, (short)(this.VerticalTextJustification)));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 1:
                    this.Value = (pair.StringValue);
                    break;
                case 2:
                    this.Tag = (pair.StringValue);
                    break;
                case 3:
                    this.Prompt = (pair.StringValue);
                    break;
                case 7:
                    this.TextStyleName = (pair.StringValue);
                    break;
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.SecondAlignmentPoint.X = pair.DoubleValue;
                    break;
                case 21:
                    this.SecondAlignmentPoint.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.SecondAlignmentPoint.Z = pair.DoubleValue;
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 40:
                    this.TextHeight = (pair.DoubleValue);
                    break;
                case 41:
                    this.RelativeXScaleFactor = (pair.DoubleValue);
                    break;
                case 50:
                    this.Rotation = (pair.DoubleValue);
                    break;
                case 51:
                    this.ObliqueAngle = (pair.DoubleValue);
                    break;
                case 70:
                    this.Flags = (int)(pair.ShortValue);
                    break;
                case 71:
                    this.TextGenerationFlags = (int)(pair.ShortValue);
                    break;
                case 72:
                    this.HorizontalTextJustification = (DxfHorizontalTextJustification)(pair.ShortValue);
                    break;
                case 73:
                    this.FieldLength = (pair.ShortValue);
                    break;
                case 74:
                    this.VerticalTextJustification = (DxfVerticalTextJustification)(pair.ShortValue);
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfAttribute class
    /// </summary>
    public partial class DxfAttribute : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Attribute; } }

        public double Thickness { get; set; }
        public DxfPoint Location { get; set; }
        public double TextHeight { get; set; }
        public string Value { get; set; }
        public string Tag { get; set; }
        public int Flags { get; set; }
        public short FieldLength { get; set; }
        public double Rotation { get; set; }
        public double RelativeXScaleFactor { get; set; }
        public double ObliqueAngle { get; set; }
        public string TextStyleName { get; set; }
        public int TextGenerationFlags { get; set; }
        public DxfHorizontalTextJustification HorizontalTextJustification { get; set; }
        public DxfVerticalTextJustification VerticalTextJustification { get; set; }
        public DxfPoint SecondAlignmentPoint { get; set; }
        public DxfVector Normal { get; set; }

        // Flags flags

        public bool IsInvisible
        {
            get { return DxfHelpers.GetFlag(Flags, 1); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                Flags = flags;
            }
        }

        public bool IsConstant
        {
            get { return DxfHelpers.GetFlag(Flags, 2); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                Flags = flags;
            }
        }

        public bool IsInputVerificationRequired
        {
            get { return DxfHelpers.GetFlag(Flags, 4); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                Flags = flags;
            }
        }

        public bool IsAttributePresent
        {
            get { return DxfHelpers.GetFlag(Flags, 8); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                Flags = flags;
            }
        }

        // TextGenerationFlags flags

        public bool IsTextBackward
        {
            get { return DxfHelpers.GetFlag(TextGenerationFlags, 2); }
            set
            {
                var flags = TextGenerationFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                TextGenerationFlags = flags;
            }
        }

        public bool IsTextUpsideDown
        {
            get { return DxfHelpers.GetFlag(TextGenerationFlags, 4); }
            set
            {
                var flags = TextGenerationFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                TextGenerationFlags = flags;
            }
        }

        public DxfAttribute()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Thickness = 0.0;
            this.Location = DxfPoint.Origin;
            this.TextHeight = 1.0;
            this.Value = null;
            this.Tag = null;
            this.Flags = 0;
            this.FieldLength = 0;
            this.Rotation = 0;
            this.RelativeXScaleFactor = 1.0;
            this.ObliqueAngle = 0.0;
            this.TextStyleName = "STANDARD";
            this.TextGenerationFlags = 0;
            this.HorizontalTextJustification = DxfHorizontalTextJustification.Left;
            this.VerticalTextJustification = DxfVerticalTextJustification.Baseline;
            this.SecondAlignmentPoint = DxfPoint.Origin;
            this.Normal = DxfVector.ZAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbText"));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (this.Thickness)));
            }

            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            pairs.Add(new DxfCodePair(40, (this.TextHeight)));
            pairs.Add(new DxfCodePair(1, (this.Value)));
            pairs.Add(new DxfCodePair(100, "AcDbAttribute"));
            pairs.Add(new DxfCodePair(2, (this.Tag)));
            pairs.Add(new DxfCodePair(70, (short)(this.Flags)));
            if (this.FieldLength != 0)
            {
                pairs.Add(new DxfCodePair(73, (this.FieldLength)));
            }

            if (this.Rotation != 0)
            {
                pairs.Add(new DxfCodePair(50, (this.Rotation)));
            }

            if (this.RelativeXScaleFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(41, (this.RelativeXScaleFactor)));
            }

            if (this.ObliqueAngle != 0.0)
            {
                pairs.Add(new DxfCodePair(51, (this.ObliqueAngle)));
            }

            if (this.TextStyleName != "STANDARD")
            {
                pairs.Add(new DxfCodePair(7, (this.TextStyleName)));
            }

            if (this.TextGenerationFlags != 0)
            {
                pairs.Add(new DxfCodePair(71, (short)(this.TextGenerationFlags)));
            }

            if (this.HorizontalTextJustification != DxfHorizontalTextJustification.Left)
            {
                pairs.Add(new DxfCodePair(72, (short)(this.HorizontalTextJustification)));
            }

            if (this.VerticalTextJustification != DxfVerticalTextJustification.Baseline)
            {
                pairs.Add(new DxfCodePair(74, (short)(this.VerticalTextJustification)));
            }

            pairs.Add(new DxfCodePair(11, SecondAlignmentPoint.X));
            pairs.Add(new DxfCodePair(21, SecondAlignmentPoint.Y));
            pairs.Add(new DxfCodePair(31, SecondAlignmentPoint.Z));
            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal.X));
                pairs.Add(new DxfCodePair(220, Normal.Y));
                pairs.Add(new DxfCodePair(230, Normal.Z));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 1:
                    this.Value = (pair.StringValue);
                    break;
                case 2:
                    this.Tag = (pair.StringValue);
                    break;
                case 7:
                    this.TextStyleName = (pair.StringValue);
                    break;
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.SecondAlignmentPoint.X = pair.DoubleValue;
                    break;
                case 21:
                    this.SecondAlignmentPoint.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.SecondAlignmentPoint.Z = pair.DoubleValue;
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 40:
                    this.TextHeight = (pair.DoubleValue);
                    break;
                case 41:
                    this.RelativeXScaleFactor = (pair.DoubleValue);
                    break;
                case 50:
                    this.Rotation = (pair.DoubleValue);
                    break;
                case 51:
                    this.ObliqueAngle = (pair.DoubleValue);
                    break;
                case 70:
                    this.Flags = (int)(pair.ShortValue);
                    break;
                case 71:
                    this.TextGenerationFlags = (int)(pair.ShortValue);
                    break;
                case 72:
                    this.HorizontalTextJustification = (DxfHorizontalTextJustification)(pair.ShortValue);
                    break;
                case 73:
                    this.FieldLength = (pair.ShortValue);
                    break;
                case 74:
                    this.VerticalTextJustification = (DxfVerticalTextJustification)(pair.ShortValue);
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfBody class
    /// </summary>
    public partial class DxfBody : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Body; } }

        public short FormatVersionNumber { get; set; }
        public List<string> CustomData { get; set; }
        public List<string> CustomData2 { get; set; }

        public DxfBody()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.FormatVersionNumber = 1;
            this.CustomData = new List<string>();
            this.CustomData2 = new List<string>();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbModelerGeometry"));
            pairs.Add(new DxfCodePair(70, (this.FormatVersionNumber)));
            pairs.AddRange(this.CustomData.Select(p => new DxfCodePair(1, p)));
            pairs.AddRange(this.CustomData2.Select(p => new DxfCodePair(3, p)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 1:
                    this.CustomData.Add((pair.StringValue));
                    break;
                case 3:
                    this.CustomData2.Add((pair.StringValue));
                    break;
                case 70:
                    this.FormatVersionNumber = (pair.ShortValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfCircle class
    /// </summary>
    public partial class DxfCircle : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Circle; } }

        public double Thickness { get; set; }
        public DxfPoint Center { get; set; }
        public double Radius { get; set; }
        public DxfVector Normal { get; set; }

        public DxfCircle()
            : base()
        {
        }

        //
        // Parameterized constructors
        //
        public DxfCircle(DxfPoint center, double radius)
            : this()
        {
            this.Center = center;
            this.Radius = radius;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Thickness = 0.0;
            this.Center = DxfPoint.Origin;
            this.Radius = 0.0;
            this.Normal = DxfVector.ZAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbCircle"));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (this.Thickness)));
            }

            pairs.Add(new DxfCodePair(10, Center.X));
            pairs.Add(new DxfCodePair(20, Center.Y));
            pairs.Add(new DxfCodePair(30, Center.Z));
            pairs.Add(new DxfCodePair(40, (this.Radius)));
            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal.X));
                pairs.Add(new DxfCodePair(220, Normal.Y));
                pairs.Add(new DxfCodePair(230, Normal.Z));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.Center.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Center.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Center.Z = pair.DoubleValue;
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 40:
                    this.Radius = (pair.DoubleValue);
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfDimensionBase class
    /// </summary>
    public partial class DxfDimensionBase : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Dimension; } }

        public DxfDimensionVersion DimensionVersion { get; set; }
        public string BlockName { get; set; }
        public DxfPoint DefinitionPoint1 { get; set; }
        public DxfPoint TextMidPoint { get; set; }
        public DxfDimensionType DimensionType { get; set; }
        public DxfAttachmentPoint AttachmentPoint { get; set; }
        public DxfTextLineSpacingStyle TextLineSpacingStyle { get; set; }
        public double TextLineSpacingFactor { get; set; }
        public double ActualMeasurement { get; protected set; }
        public string Text { get; set; }
        public double TextRotationAngle { get; set; }
        public double HorizontalDirectionAngle { get; set; }
        public DxfVector Normal { get; set; }
        public string DimensionStyleName { get; set; }

        internal DxfDimensionBase()
            : base()
        {
        }

        protected DxfDimensionBase(DxfDimensionBase other)
            : base(other)
        {
            this.DimensionVersion = other.DimensionVersion;
            this.BlockName = other.BlockName;
            this.DefinitionPoint1 = other.DefinitionPoint1;
            this.TextMidPoint = other.TextMidPoint;
            this.DimensionType = other.DimensionType;
            this.AttachmentPoint = other.AttachmentPoint;
            this.TextLineSpacingStyle = other.TextLineSpacingStyle;
            this.TextLineSpacingFactor = other.TextLineSpacingFactor;
            this.ActualMeasurement = other.ActualMeasurement;
            this.Text = other.Text;
            this.TextRotationAngle = other.TextRotationAngle;
            this.HorizontalDirectionAngle = other.HorizontalDirectionAngle;
            this.Normal = other.Normal;
            this.DimensionStyleName = other.DimensionStyleName;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DimensionVersion = DxfDimensionVersion.R2010;
            this.BlockName = null;
            this.DefinitionPoint1 = DxfPoint.Origin;
            this.TextMidPoint = DxfPoint.Origin;
            this.DimensionType = DxfDimensionType.RotatedHorizontalOrVertical;
            this.AttachmentPoint = DxfAttachmentPoint.TopLeft;
            this.TextLineSpacingStyle = DxfTextLineSpacingStyle.AtLeast;
            this.TextLineSpacingFactor = 1.0;
            this.ActualMeasurement = 0.0;
            this.Text = "<>";
            this.TextRotationAngle = 0.0;
            this.HorizontalDirectionAngle = 0.0;
            this.Normal = DxfVector.ZAxis;
            this.DimensionStyleName = null;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbDimension"));
            if (version >= DxfAcadVersion.R2010)
            {
                pairs.Add(new DxfCodePair(280, (short)(this.DimensionVersion)));
            }

            pairs.Add(new DxfCodePair(2, (this.BlockName)));
            pairs.Add(new DxfCodePair(10, DefinitionPoint1.X));
            pairs.Add(new DxfCodePair(20, DefinitionPoint1.Y));
            pairs.Add(new DxfCodePair(30, DefinitionPoint1.Z));
            pairs.Add(new DxfCodePair(11, TextMidPoint.X));
            pairs.Add(new DxfCodePair(21, TextMidPoint.Y));
            pairs.Add(new DxfCodePair(31, TextMidPoint.Z));
            pairs.Add(new DxfCodePair(70, (short)(this.DimensionType)));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(71, (short)(this.AttachmentPoint)));
            }

            if (version >= DxfAcadVersion.R2000 && this.TextLineSpacingStyle != DxfTextLineSpacingStyle.AtLeast)
            {
                pairs.Add(new DxfCodePair(72, (short)(this.TextLineSpacingStyle)));
            }

            if (version >= DxfAcadVersion.R2000 && this.TextLineSpacingFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(41, (this.TextLineSpacingFactor)));
            }

            if (version >= DxfAcadVersion.R2000 && this.ActualMeasurement != 0.0)
            {
                pairs.Add(new DxfCodePair(42, (this.ActualMeasurement)));
            }

            pairs.Add(new DxfCodePair(1, (this.Text)));
            if (this.TextRotationAngle != 0.0)
            {
                pairs.Add(new DxfCodePair(53, (this.TextRotationAngle)));
            }

            if (this.HorizontalDirectionAngle != 0.0)
            {
                pairs.Add(new DxfCodePair(51, (this.HorizontalDirectionAngle)));
            }

            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal.X));
                pairs.Add(new DxfCodePair(220, Normal.Y));
                pairs.Add(new DxfCodePair(230, Normal.Z));
            }

            pairs.Add(new DxfCodePair(3, (this.DimensionStyleName)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 1:
                    this.Text = (pair.StringValue);
                    break;
                case 2:
                    this.BlockName = (pair.StringValue);
                    break;
                case 3:
                    this.DimensionStyleName = (pair.StringValue);
                    break;
                case 10:
                    this.DefinitionPoint1.X = pair.DoubleValue;
                    break;
                case 20:
                    this.DefinitionPoint1.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.DefinitionPoint1.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.TextMidPoint.X = pair.DoubleValue;
                    break;
                case 21:
                    this.TextMidPoint.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.TextMidPoint.Z = pair.DoubleValue;
                    break;
                case 41:
                    this.TextLineSpacingFactor = (pair.DoubleValue);
                    break;
                case 51:
                    this.HorizontalDirectionAngle = (pair.DoubleValue);
                    break;
                case 53:
                    this.TextRotationAngle = (pair.DoubleValue);
                    break;
                case 70:
                    this.DimensionType = (DxfDimensionType)(pair.ShortValue);
                    break;
                case 71:
                    this.AttachmentPoint = (DxfAttachmentPoint)(pair.ShortValue);
                    break;
                case 72:
                    this.TextLineSpacingStyle = (DxfTextLineSpacingStyle)(pair.ShortValue);
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                case 280:
                    this.DimensionVersion = (DxfDimensionVersion)(pair.ShortValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfRotatedDimension class
    /// </summary>
    public partial class DxfRotatedDimension : DxfDimensionBase
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Dimension; } }

        public DxfPoint InsertionPoint { get; set; }
        public DxfPoint DefinitionPoint2 { get; set; }
        public DxfPoint DefinitionPoint3 { get; set; }
        public double RotationAngle { get; set; }
        public double ExtensionLineAngle { get; set; }

        public DxfRotatedDimension()
            : base()
        {
        }

        internal DxfRotatedDimension(DxfDimensionBase other)
            : base(other)
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.InsertionPoint = DxfPoint.Origin;
            this.DefinitionPoint2 = DxfPoint.Origin;
            this.DefinitionPoint3 = DxfPoint.Origin;
            this.RotationAngle = 0.0;
            this.ExtensionLineAngle = 0.0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbAlignedDimension"));
            pairs.Add(new DxfCodePair(12, InsertionPoint.X));
            pairs.Add(new DxfCodePair(22, InsertionPoint.Y));
            pairs.Add(new DxfCodePair(32, InsertionPoint.Z));
            pairs.Add(new DxfCodePair(13, DefinitionPoint2.X));
            pairs.Add(new DxfCodePair(23, DefinitionPoint2.Y));
            pairs.Add(new DxfCodePair(33, DefinitionPoint2.Z));
            pairs.Add(new DxfCodePair(14, DefinitionPoint3.X));
            pairs.Add(new DxfCodePair(24, DefinitionPoint3.Y));
            pairs.Add(new DxfCodePair(34, DefinitionPoint3.Z));
            pairs.Add(new DxfCodePair(50, (this.RotationAngle)));
            pairs.Add(new DxfCodePair(52, (this.ExtensionLineAngle)));
            pairs.Add(new DxfCodePair(100, "AcDbRotatedDimension"));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 12:
                    this.InsertionPoint.X = pair.DoubleValue;
                    break;
                case 22:
                    this.InsertionPoint.Y = pair.DoubleValue;
                    break;
                case 32:
                    this.InsertionPoint.Z = pair.DoubleValue;
                    break;
                case 13:
                    this.DefinitionPoint2.X = pair.DoubleValue;
                    break;
                case 23:
                    this.DefinitionPoint2.Y = pair.DoubleValue;
                    break;
                case 33:
                    this.DefinitionPoint2.Z = pair.DoubleValue;
                    break;
                case 14:
                    this.DefinitionPoint3.X = pair.DoubleValue;
                    break;
                case 24:
                    this.DefinitionPoint3.Y = pair.DoubleValue;
                    break;
                case 34:
                    this.DefinitionPoint3.Z = pair.DoubleValue;
                    break;
                case 50:
                    this.RotationAngle = (pair.DoubleValue);
                    break;
                case 52:
                    this.ExtensionLineAngle = (pair.DoubleValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfAlignedDimension class
    /// </summary>
    public partial class DxfAlignedDimension : DxfDimensionBase
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Dimension; } }

        public DxfPoint InsertionPoint { get; set; }
        public DxfPoint DefinitionPoint2 { get; set; }
        public DxfPoint DefinitionPoint3 { get; set; }

        public DxfAlignedDimension()
            : base()
        {
        }

        internal DxfAlignedDimension(DxfDimensionBase other)
            : base(other)
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.InsertionPoint = DxfPoint.Origin;
            this.DefinitionPoint2 = DxfPoint.Origin;
            this.DefinitionPoint3 = DxfPoint.Origin;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbAlignedDimension"));
            pairs.Add(new DxfCodePair(12, InsertionPoint.X));
            pairs.Add(new DxfCodePair(22, InsertionPoint.Y));
            pairs.Add(new DxfCodePair(32, InsertionPoint.Z));
            pairs.Add(new DxfCodePair(13, DefinitionPoint2.X));
            pairs.Add(new DxfCodePair(23, DefinitionPoint2.Y));
            pairs.Add(new DxfCodePair(33, DefinitionPoint2.Z));
            pairs.Add(new DxfCodePair(14, DefinitionPoint3.X));
            pairs.Add(new DxfCodePair(24, DefinitionPoint3.Y));
            pairs.Add(new DxfCodePair(34, DefinitionPoint3.Z));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 12:
                    this.InsertionPoint.X = pair.DoubleValue;
                    break;
                case 22:
                    this.InsertionPoint.Y = pair.DoubleValue;
                    break;
                case 32:
                    this.InsertionPoint.Z = pair.DoubleValue;
                    break;
                case 13:
                    this.DefinitionPoint2.X = pair.DoubleValue;
                    break;
                case 23:
                    this.DefinitionPoint2.Y = pair.DoubleValue;
                    break;
                case 33:
                    this.DefinitionPoint2.Z = pair.DoubleValue;
                    break;
                case 14:
                    this.DefinitionPoint3.X = pair.DoubleValue;
                    break;
                case 24:
                    this.DefinitionPoint3.Y = pair.DoubleValue;
                    break;
                case 34:
                    this.DefinitionPoint3.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfAngularDimension class
    /// </summary>
    public partial class DxfAngularDimension : DxfDimensionBase
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Dimension; } }

        public DxfPoint DefinitionPoint2 { get; set; }
        public DxfPoint DefinitionPoint3 { get; set; }
        public DxfPoint DefinitionPoint4 { get; set; }
        public DxfPoint DefinitionPoint5 { get; set; }

        public DxfAngularDimension()
            : base()
        {
        }

        internal DxfAngularDimension(DxfDimensionBase other)
            : base(other)
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DefinitionPoint2 = DxfPoint.Origin;
            this.DefinitionPoint3 = DxfPoint.Origin;
            this.DefinitionPoint4 = DxfPoint.Origin;
            this.DefinitionPoint5 = DxfPoint.Origin;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDb3PointAngularDimension"));
            pairs.Add(new DxfCodePair(13, DefinitionPoint2.X));
            pairs.Add(new DxfCodePair(23, DefinitionPoint2.Y));
            pairs.Add(new DxfCodePair(33, DefinitionPoint2.Z));
            pairs.Add(new DxfCodePair(14, DefinitionPoint3.X));
            pairs.Add(new DxfCodePair(24, DefinitionPoint3.Y));
            pairs.Add(new DxfCodePair(34, DefinitionPoint3.Z));
            pairs.Add(new DxfCodePair(15, DefinitionPoint4.X));
            pairs.Add(new DxfCodePair(25, DefinitionPoint4.Y));
            pairs.Add(new DxfCodePair(35, DefinitionPoint4.Z));
            pairs.Add(new DxfCodePair(16, DefinitionPoint5.X));
            pairs.Add(new DxfCodePair(26, DefinitionPoint5.Y));
            pairs.Add(new DxfCodePair(36, DefinitionPoint5.Z));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 13:
                    this.DefinitionPoint2.X = pair.DoubleValue;
                    break;
                case 23:
                    this.DefinitionPoint2.Y = pair.DoubleValue;
                    break;
                case 33:
                    this.DefinitionPoint2.Z = pair.DoubleValue;
                    break;
                case 14:
                    this.DefinitionPoint3.X = pair.DoubleValue;
                    break;
                case 24:
                    this.DefinitionPoint3.Y = pair.DoubleValue;
                    break;
                case 34:
                    this.DefinitionPoint3.Z = pair.DoubleValue;
                    break;
                case 15:
                    this.DefinitionPoint4.X = pair.DoubleValue;
                    break;
                case 25:
                    this.DefinitionPoint4.Y = pair.DoubleValue;
                    break;
                case 35:
                    this.DefinitionPoint4.Z = pair.DoubleValue;
                    break;
                case 16:
                    this.DefinitionPoint5.X = pair.DoubleValue;
                    break;
                case 26:
                    this.DefinitionPoint5.Y = pair.DoubleValue;
                    break;
                case 36:
                    this.DefinitionPoint5.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfDiameterDimension class
    /// </summary>
    public partial class DxfDiameterDimension : DxfDimensionBase
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Dimension; } }

        public DxfPoint DefinitionPoint2 { get; set; }
        public double LeaderLength { get; set; }

        public DxfDiameterDimension()
            : base()
        {
        }

        internal DxfDiameterDimension(DxfDimensionBase other)
            : base(other)
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DefinitionPoint2 = DxfPoint.Origin;
            this.LeaderLength = 0.0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbRadialDiametricDimension"));
            pairs.Add(new DxfCodePair(15, DefinitionPoint2.X));
            pairs.Add(new DxfCodePair(25, DefinitionPoint2.Y));
            pairs.Add(new DxfCodePair(35, DefinitionPoint2.Z));
            pairs.Add(new DxfCodePair(40, (this.LeaderLength)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 15:
                    this.DefinitionPoint2.X = pair.DoubleValue;
                    break;
                case 25:
                    this.DefinitionPoint2.Y = pair.DoubleValue;
                    break;
                case 35:
                    this.DefinitionPoint2.Z = pair.DoubleValue;
                    break;
                case 40:
                    this.LeaderLength = (pair.DoubleValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfRadialDimension class
    /// </summary>
    public partial class DxfRadialDimension : DxfDimensionBase
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Dimension; } }

        public DxfPoint DefinitionPoint2 { get; set; }
        public double LeaderLength { get; set; }

        public DxfRadialDimension()
            : base()
        {
        }

        internal DxfRadialDimension(DxfDimensionBase other)
            : base(other)
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DefinitionPoint2 = DxfPoint.Origin;
            this.LeaderLength = 0.0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbRadialDimension"));
            pairs.Add(new DxfCodePair(15, DefinitionPoint2.X));
            pairs.Add(new DxfCodePair(25, DefinitionPoint2.Y));
            pairs.Add(new DxfCodePair(35, DefinitionPoint2.Z));
            pairs.Add(new DxfCodePair(40, (this.LeaderLength)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 15:
                    this.DefinitionPoint2.X = pair.DoubleValue;
                    break;
                case 25:
                    this.DefinitionPoint2.Y = pair.DoubleValue;
                    break;
                case 35:
                    this.DefinitionPoint2.Z = pair.DoubleValue;
                    break;
                case 40:
                    this.LeaderLength = (pair.DoubleValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfAngularThreePointDimension class
    /// </summary>
    public partial class DxfAngularThreePointDimension : DxfDimensionBase
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Dimension; } }

        public DxfPoint DefinitionPoint2 { get; set; }
        public DxfPoint DefinitionPoint3 { get; set; }
        public DxfPoint DefinitionPoint4 { get; set; }
        public DxfPoint DefinitionPoint5 { get; set; }

        public DxfAngularThreePointDimension()
            : base()
        {
        }

        internal DxfAngularThreePointDimension(DxfDimensionBase other)
            : base(other)
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DefinitionPoint2 = DxfPoint.Origin;
            this.DefinitionPoint3 = DxfPoint.Origin;
            this.DefinitionPoint4 = DxfPoint.Origin;
            this.DefinitionPoint5 = DxfPoint.Origin;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbRadialDimension"));
            pairs.Add(new DxfCodePair(13, DefinitionPoint2.X));
            pairs.Add(new DxfCodePair(23, DefinitionPoint2.Y));
            pairs.Add(new DxfCodePair(33, DefinitionPoint2.Z));
            pairs.Add(new DxfCodePair(14, DefinitionPoint3.X));
            pairs.Add(new DxfCodePair(24, DefinitionPoint3.Y));
            pairs.Add(new DxfCodePair(34, DefinitionPoint3.Z));
            pairs.Add(new DxfCodePair(15, DefinitionPoint4.X));
            pairs.Add(new DxfCodePair(25, DefinitionPoint4.Y));
            pairs.Add(new DxfCodePair(35, DefinitionPoint4.Z));
            pairs.Add(new DxfCodePair(16, DefinitionPoint5.X));
            pairs.Add(new DxfCodePair(26, DefinitionPoint5.Y));
            pairs.Add(new DxfCodePair(36, DefinitionPoint5.Z));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 13:
                    this.DefinitionPoint2.X = pair.DoubleValue;
                    break;
                case 23:
                    this.DefinitionPoint2.Y = pair.DoubleValue;
                    break;
                case 33:
                    this.DefinitionPoint2.Z = pair.DoubleValue;
                    break;
                case 14:
                    this.DefinitionPoint3.X = pair.DoubleValue;
                    break;
                case 24:
                    this.DefinitionPoint3.Y = pair.DoubleValue;
                    break;
                case 34:
                    this.DefinitionPoint3.Z = pair.DoubleValue;
                    break;
                case 15:
                    this.DefinitionPoint4.X = pair.DoubleValue;
                    break;
                case 25:
                    this.DefinitionPoint4.Y = pair.DoubleValue;
                    break;
                case 35:
                    this.DefinitionPoint4.Z = pair.DoubleValue;
                    break;
                case 16:
                    this.DefinitionPoint5.X = pair.DoubleValue;
                    break;
                case 26:
                    this.DefinitionPoint5.Y = pair.DoubleValue;
                    break;
                case 36:
                    this.DefinitionPoint5.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfOrdinateDimension class
    /// </summary>
    public partial class DxfOrdinateDimension : DxfDimensionBase
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Dimension; } }

        public DxfPoint DefinitionPoint2 { get; set; }
        public DxfPoint DefinitionPoint3 { get; set; }

        public DxfOrdinateDimension()
            : base()
        {
        }

        internal DxfOrdinateDimension(DxfDimensionBase other)
            : base(other)
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DefinitionPoint2 = DxfPoint.Origin;
            this.DefinitionPoint3 = DxfPoint.Origin;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbOrdinateDimension"));
            pairs.Add(new DxfCodePair(13, DefinitionPoint2.X));
            pairs.Add(new DxfCodePair(23, DefinitionPoint2.Y));
            pairs.Add(new DxfCodePair(33, DefinitionPoint2.Z));
            pairs.Add(new DxfCodePair(14, DefinitionPoint3.X));
            pairs.Add(new DxfCodePair(24, DefinitionPoint3.Y));
            pairs.Add(new DxfCodePair(34, DefinitionPoint3.Z));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 13:
                    this.DefinitionPoint2.X = pair.DoubleValue;
                    break;
                case 23:
                    this.DefinitionPoint2.Y = pair.DoubleValue;
                    break;
                case 33:
                    this.DefinitionPoint2.Z = pair.DoubleValue;
                    break;
                case 14:
                    this.DefinitionPoint3.X = pair.DoubleValue;
                    break;
                case 24:
                    this.DefinitionPoint3.Y = pair.DoubleValue;
                    break;
                case 34:
                    this.DefinitionPoint3.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfEllipse class
    /// </summary>
    public partial class DxfEllipse : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Ellipse; } }

        public DxfPoint Center { get; set; }
        public DxfVector MajorAxis { get; set; }
        public DxfVector Normal { get; set; }
        public double MinorAxisRatio { get; set; }
        public double StartParameter { get; set; }
        public double EndParameter { get; set; }

        public DxfEllipse()
            : base()
        {
        }

        //
        // Parameterized constructors
        //
        public DxfEllipse(DxfPoint center, DxfVector majorAxis, double minorAxisRatio)
            : this()
        {
            this.Center = center;
            this.MajorAxis = majorAxis;
            this.MinorAxisRatio = minorAxisRatio;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Center = DxfPoint.Origin;
            this.MajorAxis = DxfVector.XAxis;
            this.Normal = DxfVector.ZAxis;
            this.MinorAxisRatio = 1.0;
            this.StartParameter = 0.0;
            this.EndParameter = Math.PI * 2;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbEllipse"));
            pairs.Add(new DxfCodePair(10, Center.X));
            pairs.Add(new DxfCodePair(20, Center.Y));
            pairs.Add(new DxfCodePair(30, Center.Z));
            pairs.Add(new DxfCodePair(11, MajorAxis.X));
            pairs.Add(new DxfCodePair(21, MajorAxis.Y));
            pairs.Add(new DxfCodePair(31, MajorAxis.Z));
            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal.X));
                pairs.Add(new DxfCodePair(220, Normal.Y));
                pairs.Add(new DxfCodePair(230, Normal.Z));
            }

            pairs.Add(new DxfCodePair(40, (this.MinorAxisRatio)));
            pairs.Add(new DxfCodePair(41, (this.StartParameter)));
            pairs.Add(new DxfCodePair(42, (this.EndParameter)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.Center.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Center.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Center.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.MajorAxis.X = pair.DoubleValue;
                    break;
                case 21:
                    this.MajorAxis.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.MajorAxis.Z = pair.DoubleValue;
                    break;
                case 40:
                    this.MinorAxisRatio = (pair.DoubleValue);
                    break;
                case 41:
                    this.StartParameter = (pair.DoubleValue);
                    break;
                case 42:
                    this.EndParameter = (pair.DoubleValue);
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfImage class
    /// </summary>
    public partial class DxfImage : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Image; } }

        public int ClassVersion { get; set; }
        public DxfPoint Location { get; set; }
        public DxfVector UVector { get; set; }
        public DxfVector VVector { get; set; }
        public DxfVector ImageSize { get; set; }
        public string ImageDefReference { get; set; }
        public int DisplayOptionsFlags { get; set; }
        public bool UseClipping { get; set; }
        public short Brightness { get; set; }
        public short Contrast { get; set; }
        public short Fade { get; set; }
        public string ImageDefReactorReference { get; set; }
        public DxfImageClippingBoundaryType ClippingType { get; set; }
        public int ClippingVertexCount { get; set; }
        private List<double> ClippingVerticesX { get; set; }
        private List<double> ClippingVerticesY { get; set; }

        // DisplayOptionsFlags flags

        public bool ShowImage
        {
            get { return DxfHelpers.GetFlag(DisplayOptionsFlags, 1); }
            set
            {
                var flags = DisplayOptionsFlags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                DisplayOptionsFlags = flags;
            }
        }

        public bool ShowImageWhenNotAligned
        {
            get { return DxfHelpers.GetFlag(DisplayOptionsFlags, 2); }
            set
            {
                var flags = DisplayOptionsFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                DisplayOptionsFlags = flags;
            }
        }

        public bool UseClippingBoundary
        {
            get { return DxfHelpers.GetFlag(DisplayOptionsFlags, 4); }
            set
            {
                var flags = DisplayOptionsFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                DisplayOptionsFlags = flags;
            }
        }

        public bool UseTransparency
        {
            get { return DxfHelpers.GetFlag(DisplayOptionsFlags, 8); }
            set
            {
                var flags = DisplayOptionsFlags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                DisplayOptionsFlags = flags;
            }
        }

        public DxfImage()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.ClassVersion = 0;
            this.Location = DxfPoint.Origin;
            this.UVector = DxfVector.XAxis;
            this.VVector = DxfVector.YAxis;
            this.ImageSize = DxfVector.Zero;
            this.ImageDefReference = null;
            this.DisplayOptionsFlags = 0;
            this.UseClipping = true;
            this.Brightness = 50;
            this.Contrast = 50;
            this.Fade = 0;
            this.ImageDefReactorReference = null;
            this.ClippingType = DxfImageClippingBoundaryType.Rectangular;
            this.ClippingVertexCount = 0;
            this.ClippingVerticesX = new List<double>();
            this.ClippingVerticesY = new List<double>();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbRasterImage"));
            pairs.Add(new DxfCodePair(90, (this.ClassVersion)));
            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            pairs.Add(new DxfCodePair(11, UVector.X));
            pairs.Add(new DxfCodePair(21, UVector.Y));
            pairs.Add(new DxfCodePair(31, UVector.Z));
            pairs.Add(new DxfCodePair(12, VVector.X));
            pairs.Add(new DxfCodePair(22, VVector.Y));
            pairs.Add(new DxfCodePair(32, VVector.Z));
            pairs.Add(new DxfCodePair(13, ImageSize.X));
            pairs.Add(new DxfCodePair(23, ImageSize.Y));
            pairs.Add(new DxfCodePair(340, (this.ImageDefReference)));
            pairs.Add(new DxfCodePair(70, (short)(this.DisplayOptionsFlags)));
            pairs.Add(new DxfCodePair(280, BoolShort(this.UseClipping)));
            pairs.Add(new DxfCodePair(281, (this.Brightness)));
            pairs.Add(new DxfCodePair(282, (this.Contrast)));
            pairs.Add(new DxfCodePair(283, (this.Fade)));
            pairs.Add(new DxfCodePair(360, (this.ImageDefReactorReference)));
            pairs.Add(new DxfCodePair(71, (short)(this.ClippingType)));
            pairs.Add(new DxfCodePair(91, ClippingVertices.Count));
            foreach (var item in ClippingVertices)
            {
                pairs.Add(new DxfCodePair(14, item.X));
                pairs.Add(new DxfCodePair(24, item.Y));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.UVector.X = pair.DoubleValue;
                    break;
                case 21:
                    this.UVector.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.UVector.Z = pair.DoubleValue;
                    break;
                case 12:
                    this.VVector.X = pair.DoubleValue;
                    break;
                case 22:
                    this.VVector.Y = pair.DoubleValue;
                    break;
                case 32:
                    this.VVector.Z = pair.DoubleValue;
                    break;
                case 13:
                    this.ImageSize.X = pair.DoubleValue;
                    break;
                case 23:
                    this.ImageSize.Y = pair.DoubleValue;
                    break;
                case 14:
                    this.ClippingVerticesX.Add((pair.DoubleValue));
                    break;
                case 24:
                    this.ClippingVerticesY.Add((pair.DoubleValue));
                    break;
                case 70:
                    this.DisplayOptionsFlags = (int)(pair.ShortValue);
                    break;
                case 71:
                    this.ClippingType = (DxfImageClippingBoundaryType)(pair.ShortValue);
                    break;
                case 90:
                    this.ClassVersion = (pair.IntegerValue);
                    break;
                case 91:
                    this.ClippingVertexCount = (pair.IntegerValue);
                    break;
                case 280:
                    this.UseClipping = BoolShort(pair.ShortValue);
                    break;
                case 281:
                    this.Brightness = (pair.ShortValue);
                    break;
                case 282:
                    this.Contrast = (pair.ShortValue);
                    break;
                case 283:
                    this.Fade = (pair.ShortValue);
                    break;
                case 340:
                    this.ImageDefReference = (pair.StringValue);
                    break;
                case 360:
                    this.ImageDefReactorReference = (pair.StringValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfInsert class
    /// </summary>
    public partial class DxfInsert : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Insert; } }

        public bool HasAttributes { get; set; }
        public string Name { get; set; }
        public DxfPoint Location { get; set; }
        public double XScaleFactor { get; set; }
        public double YScaleFactor { get; set; }
        public double ZScaleFactor { get; set; }
        public double Rotation { get; set; }
        public short ColumnCount { get; set; }
        public short RowCount { get; set; }
        public double ColumnSpacing { get; set; }
        public double RowSpacing { get; set; }
        public DxfVector ExtrusionDirection { get; set; }

        public DxfInsert()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.HasAttributes = false;
            this.Name = null;
            this.Location = DxfPoint.Origin;
            this.XScaleFactor = 1.0;
            this.YScaleFactor = 1.0;
            this.ZScaleFactor = 1.0;
            this.Rotation = 0.0;
            this.ColumnCount = 1;
            this.RowCount = 1;
            this.ColumnSpacing = 0.0;
            this.RowSpacing = 0.0;
            this.ExtrusionDirection = DxfVector.ZAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbBlockReference"));
            if (this.HasAttributes != false)
            {
                pairs.Add(new DxfCodePair(66, BoolShort(this.HasAttributes)));
            }

            pairs.Add(new DxfCodePair(2, (this.Name)));
            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            if (this.XScaleFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(41, (this.XScaleFactor)));
            }

            if (this.YScaleFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(42, (this.YScaleFactor)));
            }

            if (this.ZScaleFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(43, (this.ZScaleFactor)));
            }

            if (this.Rotation != 0.0)
            {
                pairs.Add(new DxfCodePair(50, (this.Rotation)));
            }

            if (this.ColumnCount != 1)
            {
                pairs.Add(new DxfCodePair(70, (this.ColumnCount)));
            }

            if (this.RowCount != 1)
            {
                pairs.Add(new DxfCodePair(71, (this.RowCount)));
            }

            if (this.ColumnSpacing != 0.0)
            {
                pairs.Add(new DxfCodePair(44, (this.ColumnSpacing)));
            }

            if (this.RowSpacing != 0.0)
            {
                pairs.Add(new DxfCodePair(45, (this.RowSpacing)));
            }

            pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
            pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
            pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 2:
                    this.Name = (pair.StringValue);
                    break;
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 41:
                    this.XScaleFactor = (pair.DoubleValue);
                    break;
                case 42:
                    this.YScaleFactor = (pair.DoubleValue);
                    break;
                case 43:
                    this.ZScaleFactor = (pair.DoubleValue);
                    break;
                case 44:
                    this.ColumnSpacing = (pair.DoubleValue);
                    break;
                case 45:
                    this.RowSpacing = (pair.DoubleValue);
                    break;
                case 50:
                    this.Rotation = (pair.DoubleValue);
                    break;
                case 66:
                    this.HasAttributes = BoolShort(pair.ShortValue);
                    break;
                case 70:
                    this.ColumnCount = (pair.ShortValue);
                    break;
                case 71:
                    this.RowCount = (pair.ShortValue);
                    break;
                case 210:
                    this.ExtrusionDirection.X = pair.DoubleValue;
                    break;
                case 220:
                    this.ExtrusionDirection.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.ExtrusionDirection.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfLeader class
    /// </summary>
    public partial class DxfLeader : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Leader; } }

        public string DimensionStyleName { get; set; }
        public bool UseArrowheads { get; set; }
        public DxfLeaderPathType PathType { get; set; }
        public DxfLeaderCreationAnnotationType AnnotationType { get; set; }
        public DxfLeaderHooklineDirection HooklineDirection { get; set; }
        public bool UseHookline { get; set; }
        public double TextAnnotationHeight { get; set; }
        public double TextAnnotationWidth { get; set; }
        public int VertexCount { get; set; }
        private List<double> VerticesX { get; set; }
        private List<double> VerticesY { get; set; }
        private List<double> VerticesZ { get; set; }
        public DxfColor OverrideColor { get; set; }
        public string AssociatedAnnotationReference { get; set; }
        public DxfVector Normal { get; set; }
        public DxfVector Right { get; set; }
        public DxfVector BlockOffset { get; set; }
        public DxfVector AnnotationOffset { get; set; }

        public DxfLeader()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DimensionStyleName = null;
            this.UseArrowheads = true;
            this.PathType = DxfLeaderPathType.StraightLineSegments;
            this.AnnotationType = DxfLeaderCreationAnnotationType.NoAnnotation;
            this.HooklineDirection = DxfLeaderHooklineDirection.OppositeFromHorizontalVector;
            this.UseHookline = true;
            this.TextAnnotationHeight = 1.0;
            this.TextAnnotationWidth = 1.0;
            this.VertexCount = 0;
            this.VerticesX = new List<double>();
            this.VerticesY = new List<double>();
            this.VerticesZ = new List<double>();
            this.OverrideColor = DxfColor.ByBlock;
            this.AssociatedAnnotationReference = null;
            this.Normal = DxfVector.ZAxis;
            this.Right = DxfVector.XAxis;
            this.BlockOffset = DxfVector.Zero;
            this.AnnotationOffset = DxfVector.XAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbLeader"));
            pairs.Add(new DxfCodePair(3, (this.DimensionStyleName)));
            pairs.Add(new DxfCodePair(71, BoolShort(this.UseArrowheads)));
            pairs.Add(new DxfCodePair(72, (short)(this.PathType)));
            pairs.Add(new DxfCodePair(73, (short)(this.AnnotationType)));
            pairs.Add(new DxfCodePair(74, (short)(this.HooklineDirection)));
            pairs.Add(new DxfCodePair(75, BoolShort(this.UseHookline)));
            pairs.Add(new DxfCodePair(40, (this.TextAnnotationHeight)));
            pairs.Add(new DxfCodePair(41, (this.TextAnnotationWidth)));
            pairs.Add(new DxfCodePair(76, (short)Vertices.Count));
            foreach (var item in Vertices)
            {
                pairs.Add(new DxfCodePair(10, item.X));
                pairs.Add(new DxfCodePair(20, item.Y));
                pairs.Add(new DxfCodePair(30, item.Z));
            }

            if (this.OverrideColor != DxfColor.ByBlock)
            {
                pairs.Add(new DxfCodePair(77, DxfColor.GetRawValue(this.OverrideColor)));
            }

            pairs.Add(new DxfCodePair(340, (this.AssociatedAnnotationReference)));
            pairs.Add(new DxfCodePair(210, Normal.X));
            pairs.Add(new DxfCodePair(220, Normal.Y));
            pairs.Add(new DxfCodePair(230, Normal.Z));
            pairs.Add(new DxfCodePair(211, Right.X));
            pairs.Add(new DxfCodePair(221, Right.Y));
            pairs.Add(new DxfCodePair(231, Right.Z));
            pairs.Add(new DxfCodePair(212, BlockOffset.X));
            pairs.Add(new DxfCodePair(222, BlockOffset.Y));
            pairs.Add(new DxfCodePair(232, BlockOffset.Z));
            pairs.Add(new DxfCodePair(213, AnnotationOffset.X));
            pairs.Add(new DxfCodePair(223, AnnotationOffset.Y));
            pairs.Add(new DxfCodePair(233, AnnotationOffset.Z));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 3:
                    this.DimensionStyleName = (pair.StringValue);
                    break;
                case 10:
                    this.VerticesX.Add((pair.DoubleValue));
                    break;
                case 20:
                    this.VerticesY.Add((pair.DoubleValue));
                    break;
                case 30:
                    this.VerticesZ.Add((pair.DoubleValue));
                    break;
                case 40:
                    this.TextAnnotationHeight = (pair.DoubleValue);
                    break;
                case 41:
                    this.TextAnnotationWidth = (pair.DoubleValue);
                    break;
                case 71:
                    this.UseArrowheads = BoolShort(pair.ShortValue);
                    break;
                case 72:
                    this.PathType = (DxfLeaderPathType)(pair.ShortValue);
                    break;
                case 73:
                    this.AnnotationType = (DxfLeaderCreationAnnotationType)(pair.ShortValue);
                    break;
                case 74:
                    this.HooklineDirection = (DxfLeaderHooklineDirection)(pair.ShortValue);
                    break;
                case 75:
                    this.UseHookline = BoolShort(pair.ShortValue);
                    break;
                case 76:
                    this.VertexCount = (int)(pair.ShortValue);
                    break;
                case 77:
                    this.OverrideColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                case 211:
                    this.Right.X = pair.DoubleValue;
                    break;
                case 221:
                    this.Right.Y = pair.DoubleValue;
                    break;
                case 231:
                    this.Right.Z = pair.DoubleValue;
                    break;
                case 212:
                    this.BlockOffset.X = pair.DoubleValue;
                    break;
                case 222:
                    this.BlockOffset.Y = pair.DoubleValue;
                    break;
                case 232:
                    this.BlockOffset.Z = pair.DoubleValue;
                    break;
                case 213:
                    this.AnnotationOffset.X = pair.DoubleValue;
                    break;
                case 223:
                    this.AnnotationOffset.Y = pair.DoubleValue;
                    break;
                case 233:
                    this.AnnotationOffset.Z = pair.DoubleValue;
                    break;
                case 340:
                    this.AssociatedAnnotationReference = (pair.StringValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfLine class
    /// </summary>
    public partial class DxfLine : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Line; } }

        public double Thickness { get; set; }
        public DxfPoint P1 { get; set; }
        public DxfPoint P2 { get; set; }
        public DxfVector ExtrusionDirection { get; set; }

        public DxfLine()
            : base()
        {
        }

        //
        // Parameterized constructors
        //
        public DxfLine(DxfPoint p1, DxfPoint p2)
            : this()
        {
            this.P1 = p1;
            this.P2 = p2;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Thickness = 0.0;
            this.P1 = DxfPoint.Origin;
            this.P2 = DxfPoint.Origin;
            this.ExtrusionDirection = DxfVector.ZAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbLine"));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (this.Thickness)));
            }

            pairs.Add(new DxfCodePair(10, P1.X));
            pairs.Add(new DxfCodePair(20, P1.Y));
            pairs.Add(new DxfCodePair(30, P1.Z));
            pairs.Add(new DxfCodePair(11, P2.X));
            pairs.Add(new DxfCodePair(21, P2.Y));
            pairs.Add(new DxfCodePair(31, P2.Z));
            if (this.ExtrusionDirection != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
                pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
                pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.P1.X = pair.DoubleValue;
                    break;
                case 20:
                    this.P1.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.P1.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.P2.X = pair.DoubleValue;
                    break;
                case 21:
                    this.P2.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.P2.Z = pair.DoubleValue;
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 210:
                    this.ExtrusionDirection.X = pair.DoubleValue;
                    break;
                case 220:
                    this.ExtrusionDirection.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.ExtrusionDirection.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfLwPolyline class
    /// </summary>
    public partial class DxfLwPolyline : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.LwPolyline; } }

        public int VertexCount { get; set; }
        public int Flags { get; set; }
        public double ConstantWidth { get; set; }
        public double Elevation { get; set; }
        public double Thickness { get; set; }
        private List<double> VertexCoordinateX { get; set; }
        private List<double> VertexCoordinateY { get; set; }
        private List<double> StartingWidth { get; set; }
        private List<double> EndingWidth { get; set; }
        private List<double> Bulge { get; set; }
        public DxfVector ExtrusionDirection { get; set; }

        // Flags flags

        public bool IsClosed
        {
            get { return DxfHelpers.GetFlag(Flags, 1); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                Flags = flags;
            }
        }

        public bool IsPLineGen
        {
            get { return DxfHelpers.GetFlag(Flags, 128); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 128);
                Flags = flags;
            }
        }

        public DxfLwPolyline()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.VertexCount = 0;
            this.Flags = 0;
            this.ConstantWidth = 0.0;
            this.Elevation = 0.0;
            this.Thickness = 0.0;
            this.VertexCoordinateX = new List<double>();
            this.VertexCoordinateY = new List<double>();
            this.StartingWidth = new List<double>();
            this.EndingWidth = new List<double>();
            this.Bulge = new List<double>();
            this.ExtrusionDirection = DxfVector.ZAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbPolyline"));
            pairs.Add(new DxfCodePair(90, Vertices.Count));
            pairs.Add(new DxfCodePair(70, (short)(this.Flags)));
            if (this.ConstantWidth != 0.0)
            {
                pairs.Add(new DxfCodePair(43, (this.ConstantWidth)));
            }

            if (this.Elevation != 0.0)
            {
                pairs.Add(new DxfCodePair(38, (this.Elevation)));
            }

            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (this.Thickness)));
            }

            foreach (var item in Vertices)
            {
                pairs.Add(new DxfCodePair(10, item.Location.X));
                pairs.Add(new DxfCodePair(20, item.Location.Y));
                if (item.StartingWidth != 0.0) { pairs.Add(new DxfCodePair(40, item.StartingWidth)); }
                if (item.EndingWidth != 0.0) { pairs.Add(new DxfCodePair(41, item.EndingWidth)); }
                if (item.Bulge != 0.0) { pairs.Add(new DxfCodePair(42, item.Bulge)); }
            }

            if (this.ExtrusionDirection != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
                pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
                pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.VertexCoordinateX.Add((pair.DoubleValue));
                    break;
                case 20:
                    this.VertexCoordinateY.Add((pair.DoubleValue));
                    break;
                case 38:
                    this.Elevation = (pair.DoubleValue);
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 40:
                    this.StartingWidth.Add((pair.DoubleValue));
                    break;
                case 41:
                    this.EndingWidth.Add((pair.DoubleValue));
                    break;
                case 42:
                    this.Bulge.Add((pair.DoubleValue));
                    break;
                case 43:
                    this.ConstantWidth = (pair.DoubleValue);
                    break;
                case 70:
                    this.Flags = (int)(pair.ShortValue);
                    break;
                case 90:
                    this.VertexCount = (pair.IntegerValue);
                    break;
                case 210:
                    this.ExtrusionDirection.X = pair.DoubleValue;
                    break;
                case 220:
                    this.ExtrusionDirection.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.ExtrusionDirection.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfOleFrame class
    /// </summary>
    public partial class DxfOleFrame : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.OleFrame; } }

        public int VersionNumber { get; set; }
        public int BinaryDataLength { get; set; }
        public List<string> BinaryDataStrings { get; set; }

        public DxfOleFrame()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.VersionNumber = 0;
            this.BinaryDataLength = 0;
            this.BinaryDataStrings = new List<string>();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbOleFrame"));
            pairs.Add(new DxfCodePair(70, (short)(this.VersionNumber)));
            pairs.Add(new DxfCodePair(90, (this.BinaryDataLength)));
            foreach (var item in BinaryDataStrings)
            {
                pairs.Add(new DxfCodePair(310, "item"));
            }

            pairs.Add(new DxfCodePair(1, "OLE"));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 70:
                    this.VersionNumber = (int)(pair.ShortValue);
                    break;
                case 90:
                    this.BinaryDataLength = (pair.IntegerValue);
                    break;
                case 310:
                    this.BinaryDataStrings.Add((pair.StringValue));
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfOle2Frame class
    /// </summary>
    public partial class DxfOle2Frame : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Ole2Frame; } }

        public int VersionNumber { get; set; }
        public string Description { get; set; }
        public DxfPoint UpperLeftCorner { get; set; }
        public DxfPoint LowerRightCorner { get; set; }
        public DxfOleObjectType ObjectType { get; set; }
        public DxfTileModeDescriptor TileMode { get; set; }
        public int BinaryDataLength { get; set; }
        public List<string> BinaryDataStrings { get; set; }

        public DxfOle2Frame()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.VersionNumber = 0;
            this.Description = null;
            this.UpperLeftCorner = DxfPoint.Origin;
            this.LowerRightCorner = DxfPoint.Origin;
            this.ObjectType = DxfOleObjectType.Static;
            this.TileMode = DxfTileModeDescriptor.InTiledViewport;
            this.BinaryDataLength = 0;
            this.BinaryDataStrings = new List<string>();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbOle2Frame"));
            pairs.Add(new DxfCodePair(70, (short)(this.VersionNumber)));
            pairs.Add(new DxfCodePair(3, (this.Description)));
            pairs.Add(new DxfCodePair(10, UpperLeftCorner.X));
            pairs.Add(new DxfCodePair(20, UpperLeftCorner.Y));
            pairs.Add(new DxfCodePair(30, UpperLeftCorner.Z));
            pairs.Add(new DxfCodePair(11, LowerRightCorner.X));
            pairs.Add(new DxfCodePair(21, LowerRightCorner.Y));
            pairs.Add(new DxfCodePair(31, LowerRightCorner.Z));
            pairs.Add(new DxfCodePair(71, (short)(this.ObjectType)));
            pairs.Add(new DxfCodePair(72, (short)(this.TileMode)));
            pairs.Add(new DxfCodePair(90, (this.BinaryDataLength)));
            foreach (var item in BinaryDataStrings)
            {
                pairs.Add(new DxfCodePair(310, "item"));
            }

            pairs.Add(new DxfCodePair(1, "OLE"));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 3:
                    this.Description = (pair.StringValue);
                    break;
                case 10:
                    this.UpperLeftCorner.X = pair.DoubleValue;
                    break;
                case 20:
                    this.UpperLeftCorner.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.UpperLeftCorner.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.LowerRightCorner.X = pair.DoubleValue;
                    break;
                case 21:
                    this.LowerRightCorner.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.LowerRightCorner.Z = pair.DoubleValue;
                    break;
                case 70:
                    this.VersionNumber = (int)(pair.ShortValue);
                    break;
                case 71:
                    this.ObjectType = (DxfOleObjectType)(pair.ShortValue);
                    break;
                case 72:
                    this.TileMode = (DxfTileModeDescriptor)(pair.ShortValue);
                    break;
                case 90:
                    this.BinaryDataLength = (pair.IntegerValue);
                    break;
                case 310:
                    this.BinaryDataStrings.Add((pair.StringValue));
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfModelPoint class
    /// </summary>
    public partial class DxfModelPoint : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Point; } }

        public DxfPoint Location { get; set; }
        public double Thickness { get; set; }
        public DxfVector ExtrusionDirection { get; set; }
        public double Angle { get; set; }

        public DxfModelPoint()
            : base()
        {
        }

        //
        // Parameterized constructors
        //
        public DxfModelPoint(DxfPoint location)
            : this()
        {
            this.Location = location;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Location = DxfPoint.Origin;
            this.Thickness = 0.0;
            this.ExtrusionDirection = DxfVector.ZAxis;
            this.Angle = 0.0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbPoint"));
            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (this.Thickness)));
            }

            if (this.ExtrusionDirection != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
                pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
                pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            }

            if (this.Angle != 0.0)
            {
                pairs.Add(new DxfCodePair(50, (this.Angle)));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 50:
                    this.Angle = (pair.DoubleValue);
                    break;
                case 210:
                    this.ExtrusionDirection.X = pair.DoubleValue;
                    break;
                case 220:
                    this.ExtrusionDirection.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.ExtrusionDirection.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfPolyline class
    /// </summary>
    public partial class DxfPolyline : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Polyline; } }

        public DxfPoint Location { get; set; }
        public double Thickness { get; set; }
        public int Flags { get; set; }
        public double DefaultStartingWidth { get; set; }
        public double DefaultEndingWidth { get; set; }
        public int PolygonMeshMVertexCount { get; set; }
        public int PolygonMeshNVertexCount { get; set; }
        public int SmoothSurfaceMDensity { get; set; }
        public int SmoothSurfaceNDensity { get; set; }
        public DxfPolylineCurvedAndSmoothSurfaceType SurfaceType { get; set; }
        public DxfVector Normal { get; set; }

        // Flags flags

        public bool IsClosed
        {
            get { return DxfHelpers.GetFlag(Flags, 1); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                Flags = flags;
            }
        }

        public bool CurveFitVerticiesAdded
        {
            get { return DxfHelpers.GetFlag(Flags, 2); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                Flags = flags;
            }
        }

        public bool SplineFitVerticiesAdded
        {
            get { return DxfHelpers.GetFlag(Flags, 4); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                Flags = flags;
            }
        }

        public bool Is3DPolyline
        {
            get { return DxfHelpers.GetFlag(Flags, 8); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                Flags = flags;
            }
        }

        public bool Is3DPolygonMesh
        {
            get { return DxfHelpers.GetFlag(Flags, 16); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 16);
                Flags = flags;
            }
        }

        public bool IsPolygonMeshClosedInNDirection
        {
            get { return DxfHelpers.GetFlag(Flags, 32); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 32);
                Flags = flags;
            }
        }

        public bool IsPolyfaceMesh
        {
            get { return DxfHelpers.GetFlag(Flags, 64); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 64);
                Flags = flags;
            }
        }

        public bool IsLinetypePatternGeneratedContinuously
        {
            get { return DxfHelpers.GetFlag(Flags, 128); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 128);
                Flags = flags;
            }
        }

        public DxfPolyline()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Location = DxfPoint.Origin;
            this.Thickness = 0.0;
            this.Flags = 0;
            this.DefaultStartingWidth = 0.0;
            this.DefaultEndingWidth = 0.0;
            this.PolygonMeshMVertexCount = 0;
            this.PolygonMeshNVertexCount = 0;
            this.SmoothSurfaceMDensity = 0;
            this.SmoothSurfaceNDensity = 0;
            this.SurfaceType = DxfPolylineCurvedAndSmoothSurfaceType.None;
            this.Normal = DxfVector.ZAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDb2dPolyline"));
            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (this.Thickness)));
            }

            if (this.Flags != 0)
            {
                pairs.Add(new DxfCodePair(70, (short)(this.Flags)));
            }

            if (this.DefaultStartingWidth != 0.0)
            {
                pairs.Add(new DxfCodePair(40, (this.DefaultStartingWidth)));
            }

            if (this.DefaultEndingWidth != 0.0)
            {
                pairs.Add(new DxfCodePair(41, (this.DefaultEndingWidth)));
            }

            if (this.PolygonMeshMVertexCount != 0)
            {
                pairs.Add(new DxfCodePair(71, (short)(this.PolygonMeshMVertexCount)));
            }

            if (this.PolygonMeshNVertexCount != 0)
            {
                pairs.Add(new DxfCodePair(72, (short)(this.PolygonMeshNVertexCount)));
            }

            if (this.SmoothSurfaceMDensity != 0)
            {
                pairs.Add(new DxfCodePair(73, (short)(this.SmoothSurfaceMDensity)));
            }

            if (this.SmoothSurfaceNDensity != 0)
            {
                pairs.Add(new DxfCodePair(74, (short)(this.SmoothSurfaceNDensity)));
            }

            if (this.SurfaceType != DxfPolylineCurvedAndSmoothSurfaceType.None)
            {
                pairs.Add(new DxfCodePair(75, (short)(this.SurfaceType)));
            }

            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal.X));
                pairs.Add(new DxfCodePair(220, Normal.Y));
                pairs.Add(new DxfCodePair(230, Normal.Z));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 40:
                    this.DefaultStartingWidth = (pair.DoubleValue);
                    break;
                case 41:
                    this.DefaultEndingWidth = (pair.DoubleValue);
                    break;
                case 70:
                    this.Flags = (int)(pair.ShortValue);
                    break;
                case 71:
                    this.PolygonMeshMVertexCount = (int)(pair.ShortValue);
                    break;
                case 72:
                    this.PolygonMeshNVertexCount = (int)(pair.ShortValue);
                    break;
                case 73:
                    this.SmoothSurfaceMDensity = (int)(pair.ShortValue);
                    break;
                case 74:
                    this.SmoothSurfaceNDensity = (int)(pair.ShortValue);
                    break;
                case 75:
                    this.SurfaceType = (DxfPolylineCurvedAndSmoothSurfaceType)(pair.ShortValue);
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfRay class
    /// </summary>
    public partial class DxfRay : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Ray; } }

        public DxfPoint StartPoint { get; set; }
        public DxfVector UnitDirectionVector { get; set; }

        public DxfRay()
            : base()
        {
        }

        //
        // Parameterized constructors
        //
        public DxfRay(DxfPoint startPoint, DxfVector unitDirectionVector)
            : this()
        {
            this.StartPoint = startPoint;
            this.UnitDirectionVector = unitDirectionVector;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.StartPoint = DxfPoint.Origin;
            this.UnitDirectionVector = DxfVector.XAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbRay"));
            pairs.Add(new DxfCodePair(10, StartPoint.X));
            pairs.Add(new DxfCodePair(20, StartPoint.Y));
            pairs.Add(new DxfCodePair(30, StartPoint.Z));
            pairs.Add(new DxfCodePair(11, UnitDirectionVector.X));
            pairs.Add(new DxfCodePair(21, UnitDirectionVector.Y));
            pairs.Add(new DxfCodePair(31, UnitDirectionVector.Z));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.StartPoint.X = pair.DoubleValue;
                    break;
                case 20:
                    this.StartPoint.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.StartPoint.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.UnitDirectionVector.X = pair.DoubleValue;
                    break;
                case 21:
                    this.UnitDirectionVector.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.UnitDirectionVector.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfRegion class
    /// </summary>
    public partial class DxfRegion : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Region; } }

        public short FormatVersionNumber { get; set; }
        public List<string> CustomData { get; set; }
        public List<string> CustomData2 { get; set; }

        public DxfRegion()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.FormatVersionNumber = 1;
            this.CustomData = new List<string>();
            this.CustomData2 = new List<string>();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbModelerGeometry"));
            pairs.Add(new DxfCodePair(70, (this.FormatVersionNumber)));
            pairs.AddRange(this.CustomData.Select(p => new DxfCodePair(1, p)));
            pairs.AddRange(this.CustomData2.Select(p => new DxfCodePair(3, p)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 1:
                    this.CustomData.Add((pair.StringValue));
                    break;
                case 3:
                    this.CustomData2.Add((pair.StringValue));
                    break;
                case 70:
                    this.FormatVersionNumber = (pair.ShortValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfRText class
    /// </summary>
    public partial class DxfRText : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.RText; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R2000; } }

        public DxfPoint InsertionPoint { get; set; }
        public DxfVector ExtrusionDirection { get; set; }
        public double RotationAngle { get; set; }
        public double TextHeight { get; set; }
        public string TextStyle { get; set; }
        public int TypeFlags { get; set; }
        public string Contents { get; set; }

        // TypeFlags flags

        public bool IsExpression
        {
            get { return DxfHelpers.GetFlag(TypeFlags, 1); }
            set
            {
                var flags = TypeFlags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                TypeFlags = flags;
            }
        }

        public bool IsInlineMTextSequencesEnabled
        {
            get { return DxfHelpers.GetFlag(TypeFlags, 2); }
            set
            {
                var flags = TypeFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                TypeFlags = flags;
            }
        }

        public DxfRText()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.InsertionPoint = DxfPoint.Origin;
            this.ExtrusionDirection = DxfVector.ZAxis;
            this.RotationAngle = 0.0;
            this.TextHeight = 0.0;
            this.TextStyle = null;
            this.TypeFlags = 0;
            this.Contents = null;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "RText"));
            pairs.Add(new DxfCodePair(10, InsertionPoint.X));
            pairs.Add(new DxfCodePair(20, InsertionPoint.Y));
            pairs.Add(new DxfCodePair(30, InsertionPoint.Z));
            if (this.ExtrusionDirection != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
                pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
                pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            }

            pairs.Add(new DxfCodePair(50, (this.RotationAngle)));
            pairs.Add(new DxfCodePair(40, (this.TextHeight)));
            pairs.Add(new DxfCodePair(7, (this.TextStyle)));
            pairs.Add(new DxfCodePair(70, (short)(this.TypeFlags)));
            pairs.Add(new DxfCodePair(1, (this.Contents)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 1:
                    this.Contents = (pair.StringValue);
                    break;
                case 7:
                    this.TextStyle = (pair.StringValue);
                    break;
                case 10:
                    this.InsertionPoint.X = pair.DoubleValue;
                    break;
                case 20:
                    this.InsertionPoint.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.InsertionPoint.Z = pair.DoubleValue;
                    break;
                case 40:
                    this.TextHeight = (pair.DoubleValue);
                    break;
                case 50:
                    this.RotationAngle = (pair.DoubleValue);
                    break;
                case 70:
                    this.TypeFlags = (int)(pair.ShortValue);
                    break;
                case 210:
                    this.ExtrusionDirection.X = pair.DoubleValue;
                    break;
                case 220:
                    this.ExtrusionDirection.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.ExtrusionDirection.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfSeqend class
    /// </summary>
    public partial class DxfSeqend : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Seqend; } }


        public DxfSeqend()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
        }
    }

    /// <summary>
    /// DxfShape class
    /// </summary>
    public partial class DxfShape : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Shape; } }

        public double Thickness { get; set; }
        public DxfPoint Location { get; set; }
        public double Size { get; set; }
        public string Name { get; set; }
        public double RotationAngle { get; set; }
        public double RelativeXScaleFactor { get; set; }
        public double ObliqueAngle { get; set; }
        public DxfVector ExtrusionDirection { get; set; }

        public DxfShape()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Thickness = 0.0;
            this.Location = DxfPoint.Origin;
            this.Size = 0.0;
            this.Name = null;
            this.RotationAngle = 0.0;
            this.RelativeXScaleFactor = 1.0;
            this.ObliqueAngle = 0.0;
            this.ExtrusionDirection = DxfVector.ZAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbShape"));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (this.Thickness)));
            }

            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            pairs.Add(new DxfCodePair(40, (this.Size)));
            pairs.Add(new DxfCodePair(2, (this.Name)));
            if (this.RotationAngle != 0.0)
            {
                pairs.Add(new DxfCodePair(50, (this.RotationAngle)));
            }

            if (this.RelativeXScaleFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(41, (this.RelativeXScaleFactor)));
            }

            if (this.ObliqueAngle != 0.0)
            {
                pairs.Add(new DxfCodePair(51, (this.ObliqueAngle)));
            }

            if (this.ExtrusionDirection != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
                pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
                pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 2:
                    this.Name = (pair.StringValue);
                    break;
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 40:
                    this.Size = (pair.DoubleValue);
                    break;
                case 41:
                    this.RelativeXScaleFactor = (pair.DoubleValue);
                    break;
                case 50:
                    this.RotationAngle = (pair.DoubleValue);
                    break;
                case 51:
                    this.ObliqueAngle = (pair.DoubleValue);
                    break;
                case 210:
                    this.ExtrusionDirection.X = pair.DoubleValue;
                    break;
                case 220:
                    this.ExtrusionDirection.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.ExtrusionDirection.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfSolid class
    /// </summary>
    public partial class DxfSolid : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Solid; } }

        public DxfPoint FirstCorner { get; set; }
        public DxfPoint SecondCorner { get; set; }
        public DxfPoint ThirdCorner { get; set; }
        public DxfPoint FourthCorner { get; set; }
        public double Thickness { get; set; }
        public DxfVector ExtrusionDirection { get; set; }

        public DxfSolid()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.FirstCorner = DxfPoint.Origin;
            this.SecondCorner = DxfPoint.Origin;
            this.ThirdCorner = DxfPoint.Origin;
            this.FourthCorner = DxfPoint.Origin;
            this.Thickness = 0.0;
            this.ExtrusionDirection = DxfVector.ZAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbShape"));
            pairs.Add(new DxfCodePair(10, FirstCorner.X));
            pairs.Add(new DxfCodePair(20, FirstCorner.Y));
            pairs.Add(new DxfCodePair(30, FirstCorner.Z));
            pairs.Add(new DxfCodePair(11, SecondCorner.X));
            pairs.Add(new DxfCodePair(21, SecondCorner.Y));
            pairs.Add(new DxfCodePair(31, SecondCorner.Z));
            pairs.Add(new DxfCodePair(12, ThirdCorner.X));
            pairs.Add(new DxfCodePair(22, ThirdCorner.Y));
            pairs.Add(new DxfCodePair(32, ThirdCorner.Z));
            pairs.Add(new DxfCodePair(13, FourthCorner.X));
            pairs.Add(new DxfCodePair(23, FourthCorner.Y));
            pairs.Add(new DxfCodePair(33, FourthCorner.Z));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (this.Thickness)));
            }

            if (this.ExtrusionDirection != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
                pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
                pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.FirstCorner.X = pair.DoubleValue;
                    break;
                case 20:
                    this.FirstCorner.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.FirstCorner.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.SecondCorner.X = pair.DoubleValue;
                    break;
                case 21:
                    this.SecondCorner.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.SecondCorner.Z = pair.DoubleValue;
                    break;
                case 12:
                    this.ThirdCorner.X = pair.DoubleValue;
                    break;
                case 22:
                    this.ThirdCorner.Y = pair.DoubleValue;
                    break;
                case 32:
                    this.ThirdCorner.Z = pair.DoubleValue;
                    break;
                case 13:
                    this.FourthCorner.X = pair.DoubleValue;
                    break;
                case 23:
                    this.FourthCorner.Y = pair.DoubleValue;
                    break;
                case 33:
                    this.FourthCorner.Z = pair.DoubleValue;
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 210:
                    this.ExtrusionDirection.X = pair.DoubleValue;
                    break;
                case 220:
                    this.ExtrusionDirection.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.ExtrusionDirection.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfSpline class
    /// </summary>
    public partial class DxfSpline : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Spline; } }

        public DxfVector Normal { get; set; }
        public int Flags { get; set; }
        public int DegreeOfCurve { get; set; }
        private int NumberOfKnotsIgnored { get; set; }
        private int NumberOfControlPointsIgnored { get; set; }
        private int NumberOfFitPointsIgnored { get; set; }
        public double KnotTolerance { get; set; }
        public double ControlPointTolerance { get; set; }
        public double FitTolerance { get; set; }
        public DxfPoint StartTangent { get; set; }
        public DxfPoint EndTangent { get; set; }
        public List<double> KnotValues { get; set; }
        public double Weight { get; set; }
        private List<double> ControlPointX { get; set; }
        private List<double> ControlPointY { get; set; }
        private List<double> ControlPointZ { get; set; }
        private List<double> FitPointX { get; set; }
        private List<double> FitPointY { get; set; }
        private List<double> FitPointZ { get; set; }

        // Flags flags

        public bool IsClosed
        {
            get { return DxfHelpers.GetFlag(Flags, 1); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                Flags = flags;
            }
        }

        public bool IsPeriodic
        {
            get { return DxfHelpers.GetFlag(Flags, 2); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                Flags = flags;
            }
        }

        public bool IsRational
        {
            get { return DxfHelpers.GetFlag(Flags, 4); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                Flags = flags;
            }
        }

        public bool IsPlanar
        {
            get { return DxfHelpers.GetFlag(Flags, 8); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                Flags = flags;
            }
        }

        public bool IsLinear
        {
            get { return DxfHelpers.GetFlag(Flags, 16); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 16);
                Flags = flags;
            }
        }

        public DxfSpline()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Normal = DxfVector.ZAxis;
            this.Flags = 0;
            this.DegreeOfCurve = 0;
            this.NumberOfKnotsIgnored = 0;
            this.NumberOfControlPointsIgnored = 0;
            this.NumberOfFitPointsIgnored = 0;
            this.KnotTolerance = 0.0000001;
            this.ControlPointTolerance = 0.0000001;
            this.FitTolerance = 0.0000000001;
            this.StartTangent = DxfPoint.Origin;
            this.EndTangent = DxfPoint.Origin;
            this.KnotValues = new List<double>();
            this.Weight = 1.0;
            this.ControlPointX = new List<double>();
            this.ControlPointY = new List<double>();
            this.ControlPointZ = new List<double>();
            this.FitPointX = new List<double>();
            this.FitPointY = new List<double>();
            this.FitPointZ = new List<double>();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbSpline"));
            pairs.Add(new DxfCodePair(210, Normal.X));
            pairs.Add(new DxfCodePair(220, Normal.Y));
            pairs.Add(new DxfCodePair(230, Normal.Z));
            pairs.Add(new DxfCodePair(70, (short)(this.Flags)));
            pairs.Add(new DxfCodePair(72, (short)KnotValues.Count));
            pairs.Add(new DxfCodePair(73, (short)ControlPoints.Count));
            pairs.Add(new DxfCodePair(74, (short)FitPoints.Count));
            if (this.KnotTolerance != 0.0000001)
            {
                pairs.Add(new DxfCodePair(42, (this.KnotTolerance)));
            }

            if (this.ControlPointTolerance != 0.0000001)
            {
                pairs.Add(new DxfCodePair(43, (this.ControlPointTolerance)));
            }

            if (this.FitTolerance != 0.0000000001)
            {
                pairs.Add(new DxfCodePair(44, (this.FitTolerance)));
            }

            pairs.Add(new DxfCodePair(12, StartTangent.X));
            pairs.Add(new DxfCodePair(22, StartTangent.Y));
            pairs.Add(new DxfCodePair(32, StartTangent.Z));
            pairs.Add(new DxfCodePair(13, EndTangent.X));
            pairs.Add(new DxfCodePair(23, EndTangent.Y));
            pairs.Add(new DxfCodePair(33, EndTangent.Z));
            pairs.AddRange(this.KnotValues.Select(p => new DxfCodePair(40, p)));
            if (this.Weight != 1.0)
            {
                pairs.Add(new DxfCodePair(41, (this.Weight)));
            }

            foreach (var item in ControlPoints)
            {
                pairs.Add(new DxfCodePair(10, item.X));
                pairs.Add(new DxfCodePair(20, item.Y));
                pairs.Add(new DxfCodePair(30, item.Z));
            }

            foreach (var item in FitPoints)
            {
                pairs.Add(new DxfCodePair(11, item.X));
                pairs.Add(new DxfCodePair(21, item.Y));
                pairs.Add(new DxfCodePair(31, item.Z));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.ControlPointX.Add((pair.DoubleValue));
                    break;
                case 11:
                    this.FitPointX.Add((pair.DoubleValue));
                    break;
                case 12:
                    this.StartTangent.X = pair.DoubleValue;
                    break;
                case 22:
                    this.StartTangent.Y = pair.DoubleValue;
                    break;
                case 32:
                    this.StartTangent.Z = pair.DoubleValue;
                    break;
                case 13:
                    this.EndTangent.X = pair.DoubleValue;
                    break;
                case 23:
                    this.EndTangent.Y = pair.DoubleValue;
                    break;
                case 33:
                    this.EndTangent.Z = pair.DoubleValue;
                    break;
                case 20:
                    this.ControlPointY.Add((pair.DoubleValue));
                    break;
                case 21:
                    this.FitPointY.Add((pair.DoubleValue));
                    break;
                case 30:
                    this.ControlPointZ.Add((pair.DoubleValue));
                    break;
                case 31:
                    this.FitPointZ.Add((pair.DoubleValue));
                    break;
                case 40:
                    this.KnotValues.Add((pair.DoubleValue));
                    break;
                case 41:
                    this.Weight = (pair.DoubleValue);
                    break;
                case 42:
                    this.KnotTolerance = (pair.DoubleValue);
                    break;
                case 43:
                    this.ControlPointTolerance = (pair.DoubleValue);
                    break;
                case 44:
                    this.FitTolerance = (pair.DoubleValue);
                    break;
                case 70:
                    this.Flags = (int)(pair.ShortValue);
                    break;
                case 71:
                    this.DegreeOfCurve = (int)(pair.ShortValue);
                    break;
                case 72:
                    this.NumberOfKnotsIgnored = (int)(pair.ShortValue);
                    break;
                case 73:
                    this.NumberOfControlPointsIgnored = (int)(pair.ShortValue);
                    break;
                case 74:
                    this.NumberOfFitPointsIgnored = (int)(pair.ShortValue);
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfText class
    /// </summary>
    public partial class DxfText : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Text; } }

        public double Thickness { get; set; }
        public DxfPoint Location { get; set; }
        public double TextHeight { get; set; }
        public string Value { get; set; }
        public double Rotation { get; set; }
        public double RelativeXScaleFactor { get; set; }
        public double ObliqueAngle { get; set; }
        public string TextStyleName { get; set; }
        public int TextGenerationFlags { get; set; }
        public DxfHorizontalTextJustification HorizontalTextJustification { get; set; }
        public DxfPoint SecondAlignmentPoint { get; set; }
        public DxfVector Normal { get; set; }
        public DxfVerticalTextJustification VerticalTextJustification { get; set; }

        // TextGenerationFlags flags

        public bool IsTextBackward
        {
            get { return DxfHelpers.GetFlag(TextGenerationFlags, 2); }
            set
            {
                var flags = TextGenerationFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                TextGenerationFlags = flags;
            }
        }

        public bool IsTextUpsideDown
        {
            get { return DxfHelpers.GetFlag(TextGenerationFlags, 4); }
            set
            {
                var flags = TextGenerationFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                TextGenerationFlags = flags;
            }
        }

        public DxfText()
            : base()
        {
        }

        //
        // Parameterized constructors
        //
        public DxfText(DxfPoint location, double textHeight, string value)
            : this()
        {
            this.Location = location;
            this.TextHeight = textHeight;
            this.Value = value;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Thickness = 0.0;
            this.Location = DxfPoint.Origin;
            this.TextHeight = 1.0;
            this.Value = null;
            this.Rotation = 0;
            this.RelativeXScaleFactor = 1.0;
            this.ObliqueAngle = 0.0;
            this.TextStyleName = "STANDARD";
            this.TextGenerationFlags = 0;
            this.HorizontalTextJustification = DxfHorizontalTextJustification.Left;
            this.SecondAlignmentPoint = DxfPoint.Origin;
            this.Normal = DxfVector.ZAxis;
            this.VerticalTextJustification = DxfVerticalTextJustification.Baseline;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbText"));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (this.Thickness)));
            }

            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            pairs.Add(new DxfCodePair(40, (this.TextHeight)));
            pairs.Add(new DxfCodePair(1, (this.Value)));
            if (this.Rotation != 0)
            {
                pairs.Add(new DxfCodePair(50, (this.Rotation)));
            }

            if (this.RelativeXScaleFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(41, (this.RelativeXScaleFactor)));
            }

            if (this.ObliqueAngle != 0.0)
            {
                pairs.Add(new DxfCodePair(51, (this.ObliqueAngle)));
            }

            if (this.TextStyleName != "STANDARD")
            {
                pairs.Add(new DxfCodePair(7, (this.TextStyleName)));
            }

            if (this.TextGenerationFlags != 0)
            {
                pairs.Add(new DxfCodePair(71, (short)(this.TextGenerationFlags)));
            }

            if (this.HorizontalTextJustification != DxfHorizontalTextJustification.Left)
            {
                pairs.Add(new DxfCodePair(72, (short)(this.HorizontalTextJustification)));
            }

            pairs.Add(new DxfCodePair(11, SecondAlignmentPoint.X));
            pairs.Add(new DxfCodePair(21, SecondAlignmentPoint.Y));
            pairs.Add(new DxfCodePair(31, SecondAlignmentPoint.Z));
            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal.X));
                pairs.Add(new DxfCodePair(220, Normal.Y));
                pairs.Add(new DxfCodePair(230, Normal.Z));
            }

            if (this.VerticalTextJustification != DxfVerticalTextJustification.Baseline)
            {
                pairs.Add(new DxfCodePair(73, (short)(this.VerticalTextJustification)));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 1:
                    this.Value = (pair.StringValue);
                    break;
                case 7:
                    this.TextStyleName = (pair.StringValue);
                    break;
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.SecondAlignmentPoint.X = pair.DoubleValue;
                    break;
                case 21:
                    this.SecondAlignmentPoint.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.SecondAlignmentPoint.Z = pair.DoubleValue;
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 40:
                    this.TextHeight = (pair.DoubleValue);
                    break;
                case 41:
                    this.RelativeXScaleFactor = (pair.DoubleValue);
                    break;
                case 50:
                    this.Rotation = (pair.DoubleValue);
                    break;
                case 51:
                    this.ObliqueAngle = (pair.DoubleValue);
                    break;
                case 71:
                    this.TextGenerationFlags = (int)(pair.ShortValue);
                    break;
                case 72:
                    this.HorizontalTextJustification = (DxfHorizontalTextJustification)(pair.ShortValue);
                    break;
                case 73:
                    this.VerticalTextJustification = (DxfVerticalTextJustification)(pair.ShortValue);
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfTolerance class
    /// </summary>
    public partial class DxfTolerance : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Tolerance; } }

        public string DimensionStyleName { get; set; }
        public DxfPoint InsertionPoint { get; set; }
        public DxfVector ExtrusionDirection { get; set; }
        public DxfVector DirectionVector { get; set; }

        public DxfTolerance()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DimensionStyleName = null;
            this.InsertionPoint = DxfPoint.Origin;
            this.ExtrusionDirection = DxfVector.ZAxis;
            this.DirectionVector = DxfVector.XAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbFcf"));
            pairs.Add(new DxfCodePair(3, (this.DimensionStyleName)));
            pairs.Add(new DxfCodePair(10, InsertionPoint.X));
            pairs.Add(new DxfCodePair(20, InsertionPoint.Y));
            pairs.Add(new DxfCodePair(30, InsertionPoint.Z));
            if (this.ExtrusionDirection != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
                pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
                pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            }

            pairs.Add(new DxfCodePair(11, DirectionVector.X));
            pairs.Add(new DxfCodePair(21, DirectionVector.Y));
            pairs.Add(new DxfCodePair(31, DirectionVector.Z));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 3:
                    this.DimensionStyleName = (pair.StringValue);
                    break;
                case 10:
                    this.InsertionPoint.X = pair.DoubleValue;
                    break;
                case 20:
                    this.InsertionPoint.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.InsertionPoint.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.DirectionVector.X = pair.DoubleValue;
                    break;
                case 21:
                    this.DirectionVector.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.DirectionVector.Z = pair.DoubleValue;
                    break;
                case 210:
                    this.ExtrusionDirection.X = pair.DoubleValue;
                    break;
                case 220:
                    this.ExtrusionDirection.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.ExtrusionDirection.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfTrace class
    /// </summary>
    public partial class DxfTrace : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Trace; } }

        public DxfPoint FirstCorner { get; set; }
        public DxfPoint SecondCorner { get; set; }
        public DxfPoint ThirdCorner { get; set; }
        public DxfPoint FourthCorner { get; set; }
        public double Thickness { get; set; }
        public DxfVector ExtrusionDirection { get; set; }

        public DxfTrace()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.FirstCorner = DxfPoint.Origin;
            this.SecondCorner = DxfPoint.Origin;
            this.ThirdCorner = DxfPoint.Origin;
            this.FourthCorner = DxfPoint.Origin;
            this.Thickness = 0.0;
            this.ExtrusionDirection = DxfVector.ZAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbTrace"));
            pairs.Add(new DxfCodePair(10, FirstCorner.X));
            pairs.Add(new DxfCodePair(20, FirstCorner.Y));
            pairs.Add(new DxfCodePair(30, FirstCorner.Z));
            pairs.Add(new DxfCodePair(11, SecondCorner.X));
            pairs.Add(new DxfCodePair(21, SecondCorner.Y));
            pairs.Add(new DxfCodePair(31, SecondCorner.Z));
            pairs.Add(new DxfCodePair(12, ThirdCorner.X));
            pairs.Add(new DxfCodePair(22, ThirdCorner.Y));
            pairs.Add(new DxfCodePair(32, ThirdCorner.Z));
            pairs.Add(new DxfCodePair(13, FourthCorner.X));
            pairs.Add(new DxfCodePair(23, FourthCorner.Y));
            pairs.Add(new DxfCodePair(33, FourthCorner.Z));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (this.Thickness)));
            }

            if (this.ExtrusionDirection != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
                pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
                pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.FirstCorner.X = pair.DoubleValue;
                    break;
                case 20:
                    this.FirstCorner.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.FirstCorner.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.SecondCorner.X = pair.DoubleValue;
                    break;
                case 21:
                    this.SecondCorner.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.SecondCorner.Z = pair.DoubleValue;
                    break;
                case 12:
                    this.ThirdCorner.X = pair.DoubleValue;
                    break;
                case 22:
                    this.ThirdCorner.Y = pair.DoubleValue;
                    break;
                case 32:
                    this.ThirdCorner.Z = pair.DoubleValue;
                    break;
                case 13:
                    this.FourthCorner.X = pair.DoubleValue;
                    break;
                case 23:
                    this.FourthCorner.Y = pair.DoubleValue;
                    break;
                case 33:
                    this.FourthCorner.Z = pair.DoubleValue;
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 210:
                    this.ExtrusionDirection.X = pair.DoubleValue;
                    break;
                case 220:
                    this.ExtrusionDirection.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.ExtrusionDirection.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfVertex class
    /// </summary>
    public partial class DxfVertex : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Vertex; } }

        public DxfPoint Location { get; set; }
        public double StartingWidth { get; set; }
        public double EndingWidth { get; set; }
        public double Bulge { get; set; }
        public int Flags { get; set; }
        public double CurveFitTangentDirection { get; set; }
        public int PolyfaceMeshVertexIndex1 { get; set; }
        public int PolyfaceMeshVertexIndex2 { get; set; }
        public int PolyfaceMeshVertexIndex3 { get; set; }
        public int PolyfaceMeshVertexIndex4 { get; set; }

        // Flags flags

        public bool IsExtraCreatedByCurveFit
        {
            get { return DxfHelpers.GetFlag(Flags, 1); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                Flags = flags;
            }
        }

        public bool IsCurveFitTangentDefined
        {
            get { return DxfHelpers.GetFlag(Flags, 2); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                Flags = flags;
            }
        }

        public bool IsSplineVertexCreatedBySplineFitting
        {
            get { return DxfHelpers.GetFlag(Flags, 8); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                Flags = flags;
            }
        }

        public bool IsSplineFrameControlPoint
        {
            get { return DxfHelpers.GetFlag(Flags, 16); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 16);
                Flags = flags;
            }
        }

        public bool Is3DPolylineVertex
        {
            get { return DxfHelpers.GetFlag(Flags, 32); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 32);
                Flags = flags;
            }
        }

        public bool Is3DPolygonMesh
        {
            get { return DxfHelpers.GetFlag(Flags, 64); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 64);
                Flags = flags;
            }
        }

        public bool IsPolyfaceMeshVertex
        {
            get { return DxfHelpers.GetFlag(Flags, 128); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 128);
                Flags = flags;
            }
        }

        public DxfVertex()
            : base()
        {
        }

        //
        // Parameterized constructors
        //
        public DxfVertex(DxfPoint location)
            : this()
        {
            this.Location = location;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Location = DxfPoint.Origin;
            this.StartingWidth = 0.0;
            this.EndingWidth = 0.0;
            this.Bulge = 0.0;
            this.Flags = 0;
            this.CurveFitTangentDirection = 0.0;
            this.PolyfaceMeshVertexIndex1 = 0;
            this.PolyfaceMeshVertexIndex2 = 0;
            this.PolyfaceMeshVertexIndex3 = 0;
            this.PolyfaceMeshVertexIndex4 = 0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbVertex"));
            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            if (this.StartingWidth != 0.0)
            {
                pairs.Add(new DxfCodePair(40, (this.StartingWidth)));
            }

            if (this.EndingWidth != 0.0)
            {
                pairs.Add(new DxfCodePair(41, (this.EndingWidth)));
            }

            if (this.Bulge != 0.0)
            {
                pairs.Add(new DxfCodePair(42, (this.Bulge)));
            }

            pairs.Add(new DxfCodePair(70, (short)(this.Flags)));
            pairs.Add(new DxfCodePair(50, (this.CurveFitTangentDirection)));
            if (this.PolyfaceMeshVertexIndex1 != 0)
            {
                pairs.Add(new DxfCodePair(71, (short)(this.PolyfaceMeshVertexIndex1)));
            }

            if (this.PolyfaceMeshVertexIndex2 != 0)
            {
                pairs.Add(new DxfCodePair(72, (short)(this.PolyfaceMeshVertexIndex2)));
            }

            if (this.PolyfaceMeshVertexIndex3 != 0)
            {
                pairs.Add(new DxfCodePair(73, (short)(this.PolyfaceMeshVertexIndex3)));
            }

            if (this.PolyfaceMeshVertexIndex4 != 0)
            {
                pairs.Add(new DxfCodePair(74, (short)(this.PolyfaceMeshVertexIndex4)));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 40:
                    this.StartingWidth = (pair.DoubleValue);
                    break;
                case 41:
                    this.EndingWidth = (pair.DoubleValue);
                    break;
                case 42:
                    this.Bulge = (pair.DoubleValue);
                    break;
                case 50:
                    this.CurveFitTangentDirection = (pair.DoubleValue);
                    break;
                case 70:
                    this.Flags = (int)(pair.ShortValue);
                    break;
                case 71:
                    this.PolyfaceMeshVertexIndex1 = (int)(pair.ShortValue);
                    break;
                case 72:
                    this.PolyfaceMeshVertexIndex2 = (int)(pair.ShortValue);
                    break;
                case 73:
                    this.PolyfaceMeshVertexIndex3 = (int)(pair.ShortValue);
                    break;
                case 74:
                    this.PolyfaceMeshVertexIndex4 = (int)(pair.ShortValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    /// <summary>
    /// DxfWipeout class
    /// </summary>
    public partial class DxfWipeout : DxfImage
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.WipeOut; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R2000; } }


        public DxfWipeout()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbWipeout"));
        }
    }

    /// <summary>
    /// DxfXLine class
    /// </summary>
    public partial class DxfXLine : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.XLine; } }

        public DxfPoint FirstPoint { get; set; }
        public DxfVector UnitDirectionVector { get; set; }

        public DxfXLine()
            : base()
        {
        }

        //
        // Parameterized constructors
        //
        public DxfXLine(DxfPoint firstPoint, DxfVector unitDirectionVector)
            : this()
        {
            this.FirstPoint = firstPoint;
            this.UnitDirectionVector = unitDirectionVector;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.FirstPoint = DxfPoint.Origin;
            this.UnitDirectionVector = DxfVector.XAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version)
        {
            base.AddValuePairs(pairs, version);
            pairs.Add(new DxfCodePair(100, "AcDbXline"));
            pairs.Add(new DxfCodePair(10, FirstPoint.X));
            pairs.Add(new DxfCodePair(20, FirstPoint.Y));
            pairs.Add(new DxfCodePair(30, FirstPoint.Z));
            pairs.Add(new DxfCodePair(11, UnitDirectionVector.X));
            pairs.Add(new DxfCodePair(21, UnitDirectionVector.Y));
            pairs.Add(new DxfCodePair(31, UnitDirectionVector.Z));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.FirstPoint.X = pair.DoubleValue;
                    break;
                case 20:
                    this.FirstPoint.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.FirstPoint.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.UnitDirectionVector.X = pair.DoubleValue;
                    break;
                case 21:
                    this.UnitDirectionVector.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.UnitDirectionVector.Z = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

    public partial class DxfDimensionBase
    {
        protected override DxfEntity PostParse()
        {
            DxfDimensionBase newDimension = null;
            switch (DimensionType)
            {
                case DxfDimensionType.RotatedHorizontalOrVertical:
                    newDimension = new DxfRotatedDimension(this);
                    break;
                case DxfDimensionType.Aligned:
                    newDimension = new DxfAlignedDimension(this);
                    break;
                case DxfDimensionType.Angular:
                    newDimension = new DxfAngularDimension(this);
                    break;
                case DxfDimensionType.Diameter:
                    newDimension = new DxfDiameterDimension(this);
                    break;
                case DxfDimensionType.Radius:
                    newDimension = new DxfRadialDimension(this);
                    break;
                case DxfDimensionType.AngularThreePoint:
                    newDimension = new DxfAngularThreePointDimension(this);
                    break;
                case DxfDimensionType.Ordinate:
                    newDimension = new DxfOrdinateDimension(this);
                    break;
            }

            if (newDimension != null)
            {
                foreach (var pair in ExcessCodePairs)
                {
                    newDimension.TrySetPair(pair);
                }
            }

            return newDimension;
        }
    }

}
// This line is required for T4 template generation to work. 
// This line is required for T4 template generation to work. 


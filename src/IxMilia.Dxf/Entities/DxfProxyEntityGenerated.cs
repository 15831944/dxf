// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;

namespace IxMilia.Dxf.Entities
{

    /// <summary>
    /// DxfProxyEntity class
    /// </summary>
    public partial class DxfProxyEntity : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.ProxyEntity; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R14; } }

        public int ProxyEntityClassId { get; set; }
        public int ApplicationEntityClassId { get; set; }
        public int GraphicsDataSize { get; set; }
        public List<string> GraphicsDataString { get; set; }
        public int EntityDataSize { get; set; }
        public List<string> EntityDataString { get; set; }
        public List<string> ObjectID1 { get; set; }
        public List<string> ObjectID2 { get; set; }
        public List<string> ObjectID3 { get; set; }
        public List<string> ObjectID4 { get; set; }
        public int Terminator { get; set; }
        private uint _objectDrawingFormat { get; set; }
        public bool OriginalDataFormatIsDxf { get; set; }

        public DxfProxyEntity()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.ProxyEntityClassId = 498;
            this.ApplicationEntityClassId = 500;
            this.GraphicsDataSize = 0;
            this.GraphicsDataString = new List<string>();
            this.EntityDataSize = 0;
            this.EntityDataString = new List<string>();
            this.ObjectID1 = new List<string>();
            this.ObjectID2 = new List<string>();
            this.ObjectID3 = new List<string>();
            this.ObjectID4 = new List<string>();
            this.Terminator = 0;
            this._objectDrawingFormat = 0;
            this.OriginalDataFormatIsDxf = true;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(100, "AcDbProxyEntity"));
            pairs.Add(new DxfCodePair(90, (this.ProxyEntityClassId)));
            pairs.Add(new DxfCodePair(91, (this.ApplicationEntityClassId)));
            pairs.Add(new DxfCodePair(92, (this.GraphicsDataSize)));
            pairs.AddRange(this.GraphicsDataString.Select(p => new DxfCodePair(310, p)));
            pairs.Add(new DxfCodePair(93, (this.EntityDataSize)));
            pairs.AddRange(this.EntityDataString.Select(p => new DxfCodePair(310, p)));
            pairs.AddRange(this.ObjectID1.Select(p => new DxfCodePair(330, p)));
            pairs.AddRange(this.ObjectID2.Select(p => new DxfCodePair(340, p)));
            pairs.AddRange(this.ObjectID3.Select(p => new DxfCodePair(350, p)));
            pairs.AddRange(this.ObjectID4.Select(p => new DxfCodePair(360, p)));
            pairs.Add(new DxfCodePair(94, (this.Terminator)));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(95, (int)(this._objectDrawingFormat)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(70, BoolShort(this.OriginalDataFormatIsDxf)));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 70:
                    this.OriginalDataFormatIsDxf = BoolShort(pair.ShortValue);
                    break;
                case 90:
                    this.ProxyEntityClassId = (pair.IntegerValue);
                    break;
                case 91:
                    this.ApplicationEntityClassId = (pair.IntegerValue);
                    break;
                case 92:
                    this.GraphicsDataSize = (pair.IntegerValue);
                    break;
                case 93:
                    this.EntityDataSize = (pair.IntegerValue);
                    break;
                case 94:
                    this.Terminator = (pair.IntegerValue);
                    break;
                case 95:
                    this._objectDrawingFormat = (uint)(pair.IntegerValue);
                    break;
                case 310:
                    // TODO: code is shared by properties GraphicsDataString, EntityDataString
                    break;
                case 330:
                    this.ObjectID1.Add((pair.StringValue));
                    break;
                case 340:
                    this.ObjectID2.Add((pair.StringValue));
                    break;
                case 350:
                    this.ObjectID3.Add((pair.StringValue));
                    break;
                case 360:
                    this.ObjectID4.Add((pair.StringValue));
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

}

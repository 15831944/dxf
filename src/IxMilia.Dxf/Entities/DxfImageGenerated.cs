// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;

namespace IxMilia.Dxf.Entities
{

    /// <summary>
    /// DxfImage class
    /// </summary>
    public partial class DxfImage : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Image; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R14; } }

        public int ClassVersion { get; set; }
        public DxfPoint Location { get; set; }
        public DxfVector UVector { get; set; }
        public DxfVector VVector { get; set; }
        public DxfVector ImageSize { get; set; }
        public string ImageDefReference { get; set; }
        public int DisplayOptionsFlags { get; set; }
        public bool UseClipping { get; set; }
        public short Brightness { get; set; }
        public short Contrast { get; set; }
        public short Fade { get; set; }
        public string ImageDefReactorReference { get; set; }
        public DxfImageClippingBoundaryType ClippingType { get; set; }
        public int ClippingVertexCount { get; set; }
        private List<double> _clippingVerticesX { get; set; }
        private List<double> _clippingVerticesY { get; set; }
        public bool IsInsideClipping { get; set; }

        // DisplayOptionsFlags flags

        public bool ShowImage
        {
            get { return DxfHelpers.GetFlag(DisplayOptionsFlags, 1); }
            set
            {
                var flags = DisplayOptionsFlags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                DisplayOptionsFlags = flags;
            }
        }

        public bool ShowImageWhenNotAligned
        {
            get { return DxfHelpers.GetFlag(DisplayOptionsFlags, 2); }
            set
            {
                var flags = DisplayOptionsFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                DisplayOptionsFlags = flags;
            }
        }

        public bool UseClippingBoundary
        {
            get { return DxfHelpers.GetFlag(DisplayOptionsFlags, 4); }
            set
            {
                var flags = DisplayOptionsFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                DisplayOptionsFlags = flags;
            }
        }

        public bool UseTransparency
        {
            get { return DxfHelpers.GetFlag(DisplayOptionsFlags, 8); }
            set
            {
                var flags = DisplayOptionsFlags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                DisplayOptionsFlags = flags;
            }
        }

        public DxfImage()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.ClassVersion = 0;
            this.Location = DxfPoint.Origin;
            this.UVector = DxfVector.XAxis;
            this.VVector = DxfVector.YAxis;
            this.ImageSize = DxfVector.Zero;
            this.ImageDefReference = null;
            this.DisplayOptionsFlags = 0;
            this.UseClipping = true;
            this.Brightness = 50;
            this.Contrast = 50;
            this.Fade = 0;
            this.ImageDefReactorReference = null;
            this.ClippingType = DxfImageClippingBoundaryType.Rectangular;
            this.ClippingVertexCount = 0;
            this._clippingVerticesX = new List<double>();
            this._clippingVerticesY = new List<double>();
            this.IsInsideClipping = false;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(100, "AcDbRasterImage"));
            pairs.Add(new DxfCodePair(90, (this.ClassVersion)));
            pairs.Add(new DxfCodePair(10, Location?.X ?? default(double)));
            pairs.Add(new DxfCodePair(20, Location?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(30, Location?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(11, UVector?.X ?? default(double)));
            pairs.Add(new DxfCodePair(21, UVector?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(31, UVector?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(12, VVector?.X ?? default(double)));
            pairs.Add(new DxfCodePair(22, VVector?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(32, VVector?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(13, ImageSize?.X ?? default(double)));
            pairs.Add(new DxfCodePair(23, ImageSize?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(340, (this.ImageDefReference)));
            pairs.Add(new DxfCodePair(70, (short)(this.DisplayOptionsFlags)));
            pairs.Add(new DxfCodePair(280, BoolShort(this.UseClipping)));
            pairs.Add(new DxfCodePair(281, (this.Brightness)));
            pairs.Add(new DxfCodePair(282, (this.Contrast)));
            pairs.Add(new DxfCodePair(283, (this.Fade)));
            pairs.Add(new DxfCodePair(360, (this.ImageDefReactorReference)));
            pairs.Add(new DxfCodePair(71, (short)(this.ClippingType)));
            pairs.Add(new DxfCodePair(91, ClippingVertices.Count));
            foreach (var item in ClippingVertices)
            {
                pairs.Add(new DxfCodePair(14, item.X));
                pairs.Add(new DxfCodePair(24, item.Y));
            }

            if (version >= DxfAcadVersion.R2010)
            {
                pairs.Add(new DxfCodePair(290, (this.IsInsideClipping)));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.UVector.X = pair.DoubleValue;
                    break;
                case 21:
                    this.UVector.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.UVector.Z = pair.DoubleValue;
                    break;
                case 12:
                    this.VVector.X = pair.DoubleValue;
                    break;
                case 22:
                    this.VVector.Y = pair.DoubleValue;
                    break;
                case 32:
                    this.VVector.Z = pair.DoubleValue;
                    break;
                case 13:
                    this.ImageSize.X = pair.DoubleValue;
                    break;
                case 23:
                    this.ImageSize.Y = pair.DoubleValue;
                    break;
                case 14:
                    this._clippingVerticesX.Add((pair.DoubleValue));
                    break;
                case 24:
                    this._clippingVerticesY.Add((pair.DoubleValue));
                    break;
                case 70:
                    this.DisplayOptionsFlags = (int)(pair.ShortValue);
                    break;
                case 71:
                    this.ClippingType = (DxfImageClippingBoundaryType)(pair.ShortValue);
                    break;
                case 90:
                    this.ClassVersion = (pair.IntegerValue);
                    break;
                case 91:
                    this.ClippingVertexCount = (pair.IntegerValue);
                    break;
                case 280:
                    this.UseClipping = BoolShort(pair.ShortValue);
                    break;
                case 281:
                    this.Brightness = (pair.ShortValue);
                    break;
                case 282:
                    this.Contrast = (pair.ShortValue);
                    break;
                case 283:
                    this.Fade = (pair.ShortValue);
                    break;
                case 290:
                    this.IsInsideClipping = (pair.BoolValue);
                    break;
                case 340:
                    this.ImageDefReference = (pair.StringValue);
                    break;
                case 360:
                    this.ImageDefReactorReference = (pair.StringValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }

}

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System.Linq;
using System.Collections.Generic;
using IxMilia.Dxf.Sections;

namespace IxMilia.Dxf.Tables
{

    public partial class DxfAppIdTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.AppId; } }
        public List<DxfAppId> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfAppIdTable()
        {
            Items = new List<DxfAppId>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfAppIdTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.AppIdText)
                {
                    var item = DxfAppId.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfBlockRecordTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.BlockRecord; } }
        public List<DxfBlockRecord> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfBlockRecordTable()
        {
            Items = new List<DxfBlockRecord>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfBlockRecordTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.BlockRecordText)
                {
                    var item = DxfBlockRecord.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfDimStyleTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.DimStyle; } }
        public List<DxfDimStyle> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfDimStyleTable()
        {
            Items = new List<DxfDimStyle>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfDimStyleTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.DimStyleText)
                {
                    var item = DxfDimStyle.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfLayerTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.Layer; } }
        public List<DxfLayer> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfLayerTable()
        {
            Items = new List<DxfLayer>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfLayerTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.LayerText)
                {
                    var item = DxfLayer.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfLTypeTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.LType; } }
        public List<DxfLineType> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfLTypeTable()
        {
            Items = new List<DxfLineType>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfLTypeTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.LTypeText)
                {
                    var item = DxfLineType.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfStyleTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.Style; } }
        public List<DxfStyle> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfStyleTable()
        {
            Items = new List<DxfStyle>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfStyleTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.StyleText)
                {
                    var item = DxfStyle.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfUcsTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.Ucs; } }
        public List<DxfUcs> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfUcsTable()
        {
            Items = new List<DxfUcs>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfUcsTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.UcsText)
                {
                    var item = DxfUcs.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfViewTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.View; } }
        public List<DxfView> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfViewTable()
        {
            Items = new List<DxfView>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfViewTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.ViewText)
                {
                    var item = DxfView.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfViewPortTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.ViewPort; } }
        public List<DxfViewPort> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfViewPortTable()
        {
            Items = new List<DxfViewPort>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfViewPortTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.ViewPortText)
                {
                    var item = DxfViewPort.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }
}

namespace IxMilia.Dxf
{

    public partial class DxfAppId : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbRegAppTableRecord";

        protected override string TableType { get { return Tables.DxfTable.AppIdText; } }

        // properties

        public DxfAppId()
            : base()
        {
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs)
        {
            pairs.Add(new DxfCodePair(100, AcDbText));
			pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)Flags));
        }

        internal static DxfAppId FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfAppId();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 2:
                        item.Name = pair.StringValue;
                        break;
                    case 70:
                        item.Flags = (int)pair.ShortValue;
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfBlockRecord : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbBlockTableRecord";

        protected override string TableType { get { return Tables.DxfTable.BlockRecordText; } }

        // properties

        public DxfBlockRecord()
            : base()
        {
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs)
        {
            pairs.Add(new DxfCodePair(100, AcDbText));
			pairs.Add(new DxfCodePair(2, Name));
        }

        internal static DxfBlockRecord FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfBlockRecord();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 2:
                        item.Name = pair.StringValue;
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfDimStyle : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbDimStyleTableRecord";

        protected override string TableType { get { return Tables.DxfTable.DimStyleText; } }

        // properties
        public string DimensioningSuffix { get; set; }
        public string AlternateDimensioningSuffix { get; set; }
        public string ArrowBlockName { get; set; }
        public string FirstArrowBlockname { get; set; }
        public string SecondArrowBlockName { get; set; }
        public double DimensioningScaleFactor { get; set; }
        public double DimensioningArrowSize { get; set; }
        public double DimensionExtensionLineOffset { get; set; }
        public double DimensionLineIncrement { get; set; }
        public double DimensionExtensionLineExtension { get; set; }
        public double DimensionDistanceRoundingValue { get; set; }
        public double DimensionLineExtension { get; set; }
        public double DimensionPlusTolerance { get; set; }
        public double DimensionMinusTolerance { get; set; }
        public double DimensioningTextHeight { get; set; }
        public double CenterMarkSize { get; set; }
        public double DimensioningTickSize { get; set; }
        public double AlternateDimensioningScaleFactor { get; set; }
        public double DimensionLinearMeasurementScaleFactor { get; set; }
        public double DimensionVerticalTextPosition { get; set; }
        public double DimensionToleranceDisplacScaleFactor { get; set; }
        public double DimensionLineGap { get; set; }
        public bool GenerateDimensionTolerances { get; set; }
        public bool GenerateDimensionLimits { get; set; }
        public bool DimensionTextInsideHorizontal { get; set; }
        public bool DimensionTextOutsideHorizontal { get; set; }
        public bool SuppressFirstDimensionExtensionLine { get; set; }
        public bool SuppressSecondDimensionExtensionLine { get; set; }
        public bool TextAboveDimensionLine { get; set; }
        public DxfUnitZeroSuppression DimensionUnitZeroSuppression { get; set; }
        public bool UseAlternateDimensioning { get; set; }
        public short AlternateDimensioningDecimalPlaces { get; set; }
        public bool ForceDimensionLineExtensionsOutsideIfTextExists { get; set; }
        public bool UseSeparateArrowBlocksForDimensions { get; set; }
        public bool ForceDimensionTextInsideExtensions { get; set; }
        public bool SuppressOutsideExtensionDimensionLines { get; set; }
        public DxfColor DimensionLineColor { get; set; }
        public DxfColor DimensionExtensionLineColor { get; set; }
        public DxfColor DimensionTextColor { get; set; }
        public DxfUnitFormat DimensionUnitFormat { get; set; }
        public short DimensionUnitToleranceDecimalPlaces { get; set; }
        public short DimensionToleranceDecimalPlaces { get; set; }
        public DxfUnitFormat AlternateDimensioningUnits { get; set; }
        public short AlternateDimensioningToleranceDecimalPlaces { get; set; }
        public string StyleHandle { get; set; }
        public DxfAngleFormat DimensioningAngleFormat { get; set; }
        public DxfDimensionTextJustification DimensionTextJustification { get; set; }
        public DxfJustification DimensionToleranceVerticalJustification { get; set; }
        public DxfUnitZeroSuppression DimensionToleranceZeroSuppression { get; set; }
        public DxfUnitZeroSuppression AlternateDimensioningZeroSupression { get; set; }
        public DxfUnitZeroSuppression AlternateDimensioningToleranceZeroSupression { get; set; }
        public DxfDimensionFit DimensionTextAndArrowPlacement { get; set; }
        public bool DimensionCursorControlsTextPosition { get; set; }

        public DxfDimStyle()
            : base()
        {
            DimensioningSuffix = null;
            AlternateDimensioningSuffix = null;
            ArrowBlockName = null;
            FirstArrowBlockname = null;
            SecondArrowBlockName = null;
            DimensioningScaleFactor = 1.0;
            DimensioningArrowSize = 0.0;
            DimensionExtensionLineOffset = 0.0;
            DimensionLineIncrement = 0.0;
            DimensionExtensionLineExtension = 0.0;
            DimensionDistanceRoundingValue = 0.0;
            DimensionLineExtension = 0.0;
            DimensionPlusTolerance = 0.0;
            DimensionMinusTolerance = 0.0;
            DimensioningTextHeight = 0.0;
            CenterMarkSize = 0.0;
            DimensioningTickSize = 0.0;
            AlternateDimensioningScaleFactor = 1.0;
            DimensionLinearMeasurementScaleFactor = 1.0;
            DimensionVerticalTextPosition = 0.0;
            DimensionToleranceDisplacScaleFactor = 1.0;
            DimensionLineGap = 0.0;
            GenerateDimensionTolerances = true;
            GenerateDimensionLimits = true;
            DimensionTextInsideHorizontal = true;
            DimensionTextOutsideHorizontal = true;
            SuppressFirstDimensionExtensionLine = true;
            SuppressSecondDimensionExtensionLine = true;
            TextAboveDimensionLine = true;
            DimensionUnitZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches;
            UseAlternateDimensioning = false;
            AlternateDimensioningDecimalPlaces = 0;
            ForceDimensionLineExtensionsOutsideIfTextExists = true;
            UseSeparateArrowBlocksForDimensions = false;
            ForceDimensionTextInsideExtensions = false;
            SuppressOutsideExtensionDimensionLines = false;
            DimensionLineColor = null;
            DimensionExtensionLineColor = null;
            DimensionTextColor = null;
            DimensionUnitFormat = DxfUnitFormat.Scientific;
            DimensionUnitToleranceDecimalPlaces = 0;
            DimensionToleranceDecimalPlaces = 0;
            AlternateDimensioningUnits = DxfUnitFormat.Scientific;
            AlternateDimensioningToleranceDecimalPlaces = 0;
            StyleHandle = null;
            DimensioningAngleFormat = DxfAngleFormat.DecimalDegrees;
            DimensionTextJustification = DxfDimensionTextJustification.AboveLineCenter;
            DimensionToleranceVerticalJustification = DxfJustification.Top;
            DimensionToleranceZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches;
            AlternateDimensioningZeroSupression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches;
            AlternateDimensioningToleranceZeroSupression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches;
            DimensionTextAndArrowPlacement = DxfDimensionFit.TextAndArrowsOutsideLines;
            DimensionCursorControlsTextPosition = true;
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs)
        {
            pairs.Add(new DxfCodePair(100, AcDbText));
			pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)Flags));
            pairs.Add(new DxfCodePair(3, (DimensioningSuffix)));
            pairs.Add(new DxfCodePair(4, (AlternateDimensioningSuffix)));
            pairs.Add(new DxfCodePair(5, (ArrowBlockName)));
            pairs.Add(new DxfCodePair(6, (FirstArrowBlockname)));
            pairs.Add(new DxfCodePair(7, (SecondArrowBlockName)));
            pairs.Add(new DxfCodePair(40, (DimensioningScaleFactor)));
            pairs.Add(new DxfCodePair(41, (DimensioningArrowSize)));
            pairs.Add(new DxfCodePair(42, (DimensionExtensionLineOffset)));
            pairs.Add(new DxfCodePair(43, (DimensionLineIncrement)));
            pairs.Add(new DxfCodePair(44, (DimensionExtensionLineExtension)));
            pairs.Add(new DxfCodePair(45, (DimensionDistanceRoundingValue)));
            pairs.Add(new DxfCodePair(46, (DimensionLineExtension)));
            pairs.Add(new DxfCodePair(47, (DimensionPlusTolerance)));
            pairs.Add(new DxfCodePair(48, (DimensionMinusTolerance)));
            pairs.Add(new DxfCodePair(140, (DimensioningTextHeight)));
            pairs.Add(new DxfCodePair(141, (CenterMarkSize)));
            pairs.Add(new DxfCodePair(142, (DimensioningTickSize)));
            pairs.Add(new DxfCodePair(143, (AlternateDimensioningScaleFactor)));
            pairs.Add(new DxfCodePair(144, (DimensionLinearMeasurementScaleFactor)));
            pairs.Add(new DxfCodePair(145, (DimensionVerticalTextPosition)));
            pairs.Add(new DxfCodePair(146, (DimensionToleranceDisplacScaleFactor)));
            pairs.Add(new DxfCodePair(147, (DimensionLineGap)));
            pairs.Add(new DxfCodePair(71, BoolShort(GenerateDimensionTolerances)));
            pairs.Add(new DxfCodePair(72, BoolShort(GenerateDimensionLimits)));
            pairs.Add(new DxfCodePair(73, BoolShort(DimensionTextInsideHorizontal)));
            pairs.Add(new DxfCodePair(74, BoolShort(DimensionTextOutsideHorizontal)));
            pairs.Add(new DxfCodePair(75, BoolShort(SuppressFirstDimensionExtensionLine)));
            pairs.Add(new DxfCodePair(76, BoolShort(SuppressSecondDimensionExtensionLine)));
            pairs.Add(new DxfCodePair(77, BoolShort(TextAboveDimensionLine)));
            pairs.Add(new DxfCodePair(78, (short)(DimensionUnitZeroSuppression)));
            pairs.Add(new DxfCodePair(170, BoolShort(UseAlternateDimensioning)));
            pairs.Add(new DxfCodePair(171, (AlternateDimensioningDecimalPlaces)));
            pairs.Add(new DxfCodePair(172, BoolShort(ForceDimensionLineExtensionsOutsideIfTextExists)));
            pairs.Add(new DxfCodePair(173, BoolShort(UseSeparateArrowBlocksForDimensions)));
            pairs.Add(new DxfCodePair(174, BoolShort(ForceDimensionTextInsideExtensions)));
            pairs.Add(new DxfCodePair(175, BoolShort(SuppressOutsideExtensionDimensionLines)));
            pairs.Add(new DxfCodePair(176, DxfColor.GetRawValue(DimensionLineColor)));
            pairs.Add(new DxfCodePair(177, DxfColor.GetRawValue(DimensionExtensionLineColor)));
            pairs.Add(new DxfCodePair(178, DxfColor.GetRawValue(DimensionTextColor)));
            pairs.Add(new DxfCodePair(270, (short)(DimensionUnitFormat)));
            pairs.Add(new DxfCodePair(271, (DimensionUnitToleranceDecimalPlaces)));
            pairs.Add(new DxfCodePair(272, (DimensionToleranceDecimalPlaces)));
            pairs.Add(new DxfCodePair(273, (short)(AlternateDimensioningUnits)));
            pairs.Add(new DxfCodePair(274, (AlternateDimensioningToleranceDecimalPlaces)));
            pairs.Add(new DxfCodePair(340, (StyleHandle)));
            pairs.Add(new DxfCodePair(275, (short)(DimensioningAngleFormat)));
            pairs.Add(new DxfCodePair(280, (short)(DimensionTextJustification)));
            pairs.Add(new DxfCodePair(283, (short)(DimensionToleranceVerticalJustification)));
            pairs.Add(new DxfCodePair(284, (short)(DimensionToleranceZeroSuppression)));
            pairs.Add(new DxfCodePair(285, (short)(AlternateDimensioningZeroSupression)));
            pairs.Add(new DxfCodePair(286, (short)(AlternateDimensioningToleranceZeroSupression)));
            pairs.Add(new DxfCodePair(287, (short)(DimensionTextAndArrowPlacement)));
            pairs.Add(new DxfCodePair(288, BoolShort(DimensionCursorControlsTextPosition)));
        }

        internal static DxfDimStyle FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfDimStyle();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 2:
                        item.Name = pair.StringValue;
                        break;
                    case 70:
                        item.Flags = (int)pair.ShortValue;
                        break;
                    case 3:
                        item.DimensioningSuffix = (pair.StringValue);
                        break;
                    case 4:
                        item.AlternateDimensioningSuffix = (pair.StringValue);
                        break;
                    case 5:
                        item.ArrowBlockName = (pair.StringValue);
                        break;
                    case 6:
                        item.FirstArrowBlockname = (pair.StringValue);
                        break;
                    case 7:
                        item.SecondArrowBlockName = (pair.StringValue);
                        break;
                    case 40:
                        item.DimensioningScaleFactor = (pair.DoubleValue);
                        break;
                    case 41:
                        item.DimensioningArrowSize = (pair.DoubleValue);
                        break;
                    case 42:
                        item.DimensionExtensionLineOffset = (pair.DoubleValue);
                        break;
                    case 43:
                        item.DimensionLineIncrement = (pair.DoubleValue);
                        break;
                    case 44:
                        item.DimensionExtensionLineExtension = (pair.DoubleValue);
                        break;
                    case 45:
                        item.DimensionDistanceRoundingValue = (pair.DoubleValue);
                        break;
                    case 46:
                        item.DimensionLineExtension = (pair.DoubleValue);
                        break;
                    case 47:
                        item.DimensionPlusTolerance = (pair.DoubleValue);
                        break;
                    case 48:
                        item.DimensionMinusTolerance = (pair.DoubleValue);
                        break;
                    case 140:
                        item.DimensioningTextHeight = (pair.DoubleValue);
                        break;
                    case 141:
                        item.CenterMarkSize = (pair.DoubleValue);
                        break;
                    case 142:
                        item.DimensioningTickSize = (pair.DoubleValue);
                        break;
                    case 143:
                        item.AlternateDimensioningScaleFactor = (pair.DoubleValue);
                        break;
                    case 144:
                        item.DimensionLinearMeasurementScaleFactor = (pair.DoubleValue);
                        break;
                    case 145:
                        item.DimensionVerticalTextPosition = (pair.DoubleValue);
                        break;
                    case 146:
                        item.DimensionToleranceDisplacScaleFactor = (pair.DoubleValue);
                        break;
                    case 147:
                        item.DimensionLineGap = (pair.DoubleValue);
                        break;
                    case 71:
                        item.GenerateDimensionTolerances = BoolShort(pair.ShortValue);
                        break;
                    case 72:
                        item.GenerateDimensionLimits = BoolShort(pair.ShortValue);
                        break;
                    case 73:
                        item.DimensionTextInsideHorizontal = BoolShort(pair.ShortValue);
                        break;
                    case 74:
                        item.DimensionTextOutsideHorizontal = BoolShort(pair.ShortValue);
                        break;
                    case 75:
                        item.SuppressFirstDimensionExtensionLine = BoolShort(pair.ShortValue);
                        break;
                    case 76:
                        item.SuppressSecondDimensionExtensionLine = BoolShort(pair.ShortValue);
                        break;
                    case 77:
                        item.TextAboveDimensionLine = BoolShort(pair.ShortValue);
                        break;
                    case 78:
                        item.DimensionUnitZeroSuppression = (DxfUnitZeroSuppression)(pair.ShortValue);
                        break;
                    case 170:
                        item.UseAlternateDimensioning = BoolShort(pair.ShortValue);
                        break;
                    case 171:
                        item.AlternateDimensioningDecimalPlaces = (pair.ShortValue);
                        break;
                    case 172:
                        item.ForceDimensionLineExtensionsOutsideIfTextExists = BoolShort(pair.ShortValue);
                        break;
                    case 173:
                        item.UseSeparateArrowBlocksForDimensions = BoolShort(pair.ShortValue);
                        break;
                    case 174:
                        item.ForceDimensionTextInsideExtensions = BoolShort(pair.ShortValue);
                        break;
                    case 175:
                        item.SuppressOutsideExtensionDimensionLines = BoolShort(pair.ShortValue);
                        break;
                    case 176:
                        item.DimensionLineColor = DxfColor.FromRawValue(pair.ShortValue);
                        break;
                    case 177:
                        item.DimensionExtensionLineColor = DxfColor.FromRawValue(pair.ShortValue);
                        break;
                    case 178:
                        item.DimensionTextColor = DxfColor.FromRawValue(pair.ShortValue);
                        break;
                    case 270:
                        item.DimensionUnitFormat = (DxfUnitFormat)(pair.ShortValue);
                        break;
                    case 271:
                        item.DimensionUnitToleranceDecimalPlaces = (pair.ShortValue);
                        break;
                    case 272:
                        item.DimensionToleranceDecimalPlaces = (pair.ShortValue);
                        break;
                    case 273:
                        item.AlternateDimensioningUnits = (DxfUnitFormat)(pair.ShortValue);
                        break;
                    case 274:
                        item.AlternateDimensioningToleranceDecimalPlaces = (pair.ShortValue);
                        break;
                    case 340:
                        item.StyleHandle = (pair.StringValue);
                        break;
                    case 275:
                        item.DimensioningAngleFormat = (DxfAngleFormat)(pair.ShortValue);
                        break;
                    case 280:
                        item.DimensionTextJustification = (DxfDimensionTextJustification)(pair.ShortValue);
                        break;
                    case 283:
                        item.DimensionToleranceVerticalJustification = (DxfJustification)(pair.ShortValue);
                        break;
                    case 284:
                        item.DimensionToleranceZeroSuppression = (DxfUnitZeroSuppression)(pair.ShortValue);
                        break;
                    case 285:
                        item.AlternateDimensioningZeroSupression = (DxfUnitZeroSuppression)(pair.ShortValue);
                        break;
                    case 286:
                        item.AlternateDimensioningToleranceZeroSupression = (DxfUnitZeroSuppression)(pair.ShortValue);
                        break;
                    case 287:
                        item.DimensionTextAndArrowPlacement = (DxfDimensionFit)(pair.ShortValue);
                        break;
                    case 288:
                        item.DimensionCursorControlsTextPosition = BoolShort(pair.ShortValue);
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfLayer : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbLayerTableRecord";

        protected override string TableType { get { return Tables.DxfTable.LayerText; } }

        // properties
        public DxfColor Color { get; set; }
        public string LinetypeName { get; set; }

        public DxfLayer()
            : base()
        {
            Color = DxfColor.ByBlock;
            LinetypeName = null;
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs)
        {
            pairs.Add(new DxfCodePair(100, AcDbText));
			pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)Flags));
            pairs.Add(new DxfCodePair(62, DxfColor.GetRawValue(Color)));
            pairs.Add(new DxfCodePair(6, (LinetypeName)));
        }

        internal static DxfLayer FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfLayer();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 2:
                        item.Name = pair.StringValue;
                        break;
                    case 70:
                        item.Flags = (int)pair.ShortValue;
                        break;
                    case 62:
                        item.Color = DxfColor.FromRawValue(pair.ShortValue);
                        break;
                    case 6:
                        item.LinetypeName = (pair.StringValue);
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfLineType : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbLinetypeTableRecord";

        protected override string TableType { get { return Tables.DxfTable.LTypeText; } }

        // properties
        public string Description { get; set; }
        public int AlignmentCode { get; set; }
        public int ElementCount { get; set; }
        public double TotalPatternLength { get; set; }
        public List<double> DashDotSpaceLengths { get; set; }
        public List<short> ComplexLinetypeElementTypes { get; set; }
        public List<short> ShapeNumbers { get; set; }
        public List<string> StylePointers { get; set; }
        public List<double> ScaleValues { get; set; }
        public List<double> RotationAngles { get; set; }
        public List<double> XOffsets { get; set; }
        public List<double> YOffsets { get; set; }
        public List<string> TextStrings { get; set; }

        public DxfLineType()
            : base()
        {
            Description = null;
            AlignmentCode = (int)'A';
            ElementCount = 0;
            TotalPatternLength = 0.0;
            DashDotSpaceLengths = new List<double>();
            ComplexLinetypeElementTypes = new List<short>();
            ShapeNumbers = new List<short>();
            StylePointers = new List<string>();
            ScaleValues = new List<double>();
            RotationAngles = new List<double>();
            XOffsets = new List<double>();
            YOffsets = new List<double>();
            TextStrings = new List<string>();
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs)
        {
            pairs.Add(new DxfCodePair(100, AcDbText));
			pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)Flags));
            pairs.Add(new DxfCodePair(3, (Description)));
            pairs.Add(new DxfCodePair(72, (int)(AlignmentCode)));
            pairs.Add(new DxfCodePair(73, (ElementCount)));
            pairs.Add(new DxfCodePair(40, (TotalPatternLength)));
            pairs.AddRange(DashDotSpaceLengths.Select(value => new DxfCodePair(49, value)));
            pairs.AddRange(ComplexLinetypeElementTypes.Select(value => new DxfCodePair(74, value)));
            pairs.AddRange(ShapeNumbers.Select(value => new DxfCodePair(75, value)));
            pairs.AddRange(StylePointers.Select(value => new DxfCodePair(340, value)));
            pairs.AddRange(ScaleValues.Select(value => new DxfCodePair(46, value)));
            pairs.AddRange(RotationAngles.Select(value => new DxfCodePair(50, value)));
            pairs.AddRange(XOffsets.Select(value => new DxfCodePair(44, value)));
            pairs.AddRange(YOffsets.Select(value => new DxfCodePair(45, value)));
            pairs.AddRange(TextStrings.Select(value => new DxfCodePair(9, value)));
        }

        internal static DxfLineType FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfLineType();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 2:
                        item.Name = pair.StringValue;
                        break;
                    case 70:
                        item.Flags = (int)pair.ShortValue;
                        break;
                    case 3:
                        item.Description = (pair.StringValue);
                        break;
                    case 72:
                        item.AlignmentCode = (int)(pair.ShortValue);
                        break;
                    case 73:
                        item.ElementCount = (pair.ShortValue);
                        break;
                    case 40:
                        item.TotalPatternLength = (pair.DoubleValue);
                        break;
                    case 49:
                        item.DashDotSpaceLengths.Add((pair.DoubleValue));
                        break;
                    case 74:
                        item.ComplexLinetypeElementTypes.Add((pair.ShortValue));
                        break;
                    case 75:
                        item.ShapeNumbers.Add((pair.ShortValue));
                        break;
                    case 340:
                        item.StylePointers.Add((pair.StringValue));
                        break;
                    case 46:
                        item.ScaleValues.Add((pair.DoubleValue));
                        break;
                    case 50:
                        item.RotationAngles.Add((pair.DoubleValue));
                        break;
                    case 44:
                        item.XOffsets.Add((pair.DoubleValue));
                        break;
                    case 45:
                        item.YOffsets.Add((pair.DoubleValue));
                        break;
                    case 9:
                        item.TextStrings.Add((pair.StringValue));
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfStyle : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbTextStyleTableRecord";

        protected override string TableType { get { return Tables.DxfTable.StyleText; } }

        // properties
        public double TextHeight { get; set; }
        public double WidthFactor { get; set; }
        public double ObliqueAngle { get; set; }
        public int TextGenerationFlags { get; set; }
        public double LastHeightUsed { get; set; }
        public string PrimaryFontFileName { get; set; }
        public string BigFontFileName { get; set; }

        public DxfStyle()
            : base()
        {
            TextHeight = 0.0;
            WidthFactor = 1.0;
            ObliqueAngle = 0.0;
            TextGenerationFlags = 0;
            LastHeightUsed = 0.0;
            PrimaryFontFileName = null;
            BigFontFileName = null;
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs)
        {
            pairs.Add(new DxfCodePair(100, AcDbText));
			pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)Flags));
            pairs.Add(new DxfCodePair(40, (TextHeight)));
            pairs.Add(new DxfCodePair(41, (WidthFactor)));
            pairs.Add(new DxfCodePair(50, (ObliqueAngle)));
            pairs.Add(new DxfCodePair(71, (short)(TextGenerationFlags)));
            pairs.Add(new DxfCodePair(42, (LastHeightUsed)));
            pairs.Add(new DxfCodePair(3, (PrimaryFontFileName)));
            pairs.Add(new DxfCodePair(4, (BigFontFileName)));
        }

        internal static DxfStyle FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfStyle();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 2:
                        item.Name = pair.StringValue;
                        break;
                    case 70:
                        item.Flags = (int)pair.ShortValue;
                        break;
                    case 40:
                        item.TextHeight = (pair.DoubleValue);
                        break;
                    case 41:
                        item.WidthFactor = (pair.DoubleValue);
                        break;
                    case 50:
                        item.ObliqueAngle = (pair.DoubleValue);
                        break;
                    case 71:
                        item.TextGenerationFlags = (int)(pair.ShortValue);
                        break;
                    case 42:
                        item.LastHeightUsed = (pair.DoubleValue);
                        break;
                    case 3:
                        item.PrimaryFontFileName = (pair.StringValue);
                        break;
                    case 4:
                        item.BigFontFileName = (pair.StringValue);
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfUcs : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbUCSTableRecord";

        protected override string TableType { get { return Tables.DxfTable.UcsText; } }

        // properties
        public DxfPoint Origin { get; set; }
        public DxfVector XAxis { get; set; }
        public DxfVector YAxis { get; set; }

        public DxfUcs()
            : base()
        {
            Origin = DxfPoint.Origin;
            XAxis = DxfVector.XAxis;
            YAxis = DxfVector.XAxis;
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs)
        {
            pairs.Add(new DxfCodePair(100, AcDbText));
			pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)Flags));
            pairs.Add(new DxfCodePair(10, Origin.X));
            pairs.Add(new DxfCodePair(20, Origin.Y));
            pairs.Add(new DxfCodePair(30, Origin.Z));
            pairs.Add(new DxfCodePair(11, XAxis.X));
            pairs.Add(new DxfCodePair(21, XAxis.Y));
            pairs.Add(new DxfCodePair(31, XAxis.Z));
            pairs.Add(new DxfCodePair(12, YAxis.X));
            pairs.Add(new DxfCodePair(22, YAxis.Y));
            pairs.Add(new DxfCodePair(32, YAxis.Z));
        }

        internal static DxfUcs FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfUcs();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 2:
                        item.Name = pair.StringValue;
                        break;
                    case 70:
                        item.Flags = (int)pair.ShortValue;
                        break;
                    case 10:
                        item.Origin.X = (pair.DoubleValue);
                        break;
                    case 20:
                        item.Origin.Y = (pair.DoubleValue);
                        break;
                    case 30:
                        item.Origin.Z = (pair.DoubleValue);
                        break;
                    case 11:
                        item.XAxis.X = (pair.DoubleValue);
                        break;
                    case 21:
                        item.XAxis.Y = (pair.DoubleValue);
                        break;
                    case 31:
                        item.XAxis.Z = (pair.DoubleValue);
                        break;
                    case 12:
                        item.YAxis.X = (pair.DoubleValue);
                        break;
                    case 22:
                        item.YAxis.Y = (pair.DoubleValue);
                        break;
                    case 32:
                        item.YAxis.Z = (pair.DoubleValue);
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfView : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbViewTableRecord";

        protected override string TableType { get { return Tables.DxfTable.ViewText; } }

        // properties
        public double ViewHeight { get; set; }
        public DxfPoint ViewCenterPoint { get; set; }
        public double ViewWidth { get; set; }
        public DxfVector ViewDirection { get; set; }
        public DxfPoint TargetPoint { get; set; }
        public double LensLength { get; set; }
        public double FrontClippingPlane { get; set; }
        public double BackClippingPlane { get; set; }
        public double TwistAngle { get; set; }
        public short ViewMode { get; set; }

        public DxfView()
            : base()
        {
            ViewHeight = 1.0;
            ViewCenterPoint = DxfPoint.Origin;
            ViewWidth = 1.0;
            ViewDirection = DxfVector.ZAxis;
            TargetPoint = DxfPoint.Origin;
            LensLength = 1.0;
            FrontClippingPlane = 0.0;
            BackClippingPlane = 1.0;
            TwistAngle = 0.0;
            ViewMode = 0;
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs)
        {
            pairs.Add(new DxfCodePair(100, AcDbText));
			pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)Flags));
            pairs.Add(new DxfCodePair(40, (ViewHeight)));
            pairs.Add(new DxfCodePair(10, ViewCenterPoint.X));
            pairs.Add(new DxfCodePair(20, ViewCenterPoint.Y));
            pairs.Add(new DxfCodePair(41, (ViewWidth)));
            pairs.Add(new DxfCodePair(11, ViewDirection.X));
            pairs.Add(new DxfCodePair(21, ViewDirection.Y));
            pairs.Add(new DxfCodePair(31, ViewDirection.Z));
            pairs.Add(new DxfCodePair(12, TargetPoint.X));
            pairs.Add(new DxfCodePair(22, TargetPoint.Y));
            pairs.Add(new DxfCodePair(32, TargetPoint.Z));
            pairs.Add(new DxfCodePair(42, (LensLength)));
            pairs.Add(new DxfCodePair(43, (FrontClippingPlane)));
            pairs.Add(new DxfCodePair(44, (BackClippingPlane)));
            pairs.Add(new DxfCodePair(50, (TwistAngle)));
            pairs.Add(new DxfCodePair(71, (ViewMode)));
        }

        internal static DxfView FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfView();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 2:
                        item.Name = pair.StringValue;
                        break;
                    case 70:
                        item.Flags = (int)pair.ShortValue;
                        break;
                    case 40:
                        item.ViewHeight = (pair.DoubleValue);
                        break;
                    case 10:
                        item.ViewCenterPoint.X = (pair.DoubleValue);
                        break;
                    case 20:
                        item.ViewCenterPoint.Y = (pair.DoubleValue);
                        break;
                    case 41:
                        item.ViewWidth = (pair.DoubleValue);
                        break;
                    case 11:
                        item.ViewDirection.X = (pair.DoubleValue);
                        break;
                    case 21:
                        item.ViewDirection.Y = (pair.DoubleValue);
                        break;
                    case 31:
                        item.ViewDirection.Z = (pair.DoubleValue);
                        break;
                    case 12:
                        item.TargetPoint.X = (pair.DoubleValue);
                        break;
                    case 22:
                        item.TargetPoint.Y = (pair.DoubleValue);
                        break;
                    case 32:
                        item.TargetPoint.Z = (pair.DoubleValue);
                        break;
                    case 42:
                        item.LensLength = (pair.DoubleValue);
                        break;
                    case 43:
                        item.FrontClippingPlane = (pair.DoubleValue);
                        break;
                    case 44:
                        item.BackClippingPlane = (pair.DoubleValue);
                        break;
                    case 50:
                        item.TwistAngle = (pair.DoubleValue);
                        break;
                    case 71:
                        item.ViewMode = (pair.ShortValue);
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfViewPort : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbViewportTableRecord";

        protected override string TableType { get { return Tables.DxfTable.ViewPortText; } }

        // properties
        public DxfPoint LowerLeft { get; set; }
        public DxfPoint UpperRight { get; set; }
        public DxfPoint ViewCenter { get; set; }
        public DxfPoint SnapBasePoint { get; set; }
        public DxfVector SnapSpacing { get; set; }
        public DxfVector GridSpacing { get; set; }
        public DxfVector ViewDirection { get; set; }
        public DxfPoint TargetViewPoint { get; set; }
        public double ViewHeight { get; set; }
        public double ViewPortAspectRatio { get; set; }
        public double LensLength { get; set; }
        public double FrontClippingPlane { get; set; }
        public double BackClippingPlane { get; set; }
        public double SnapRotationAngle { get; set; }
        public double ViewTwistAngle { get; set; }
        public DxfViewMode ViewMode { get; set; }
        public int CircleZoomPercent { get; set; }
        public bool FastZoom { get; set; }
        public bool UCSIcon { get; set; }
        public bool SnapOn { get; set; }
        public bool GridOn { get; set; }
        public short SnapStyle { get; set; }
        public short SnapIsoPair { get; set; }

        public DxfViewPort()
            : base()
        {
            LowerLeft = DxfPoint.Origin;
            UpperRight = DxfPoint.Origin;
            ViewCenter = DxfPoint.Origin;
            SnapBasePoint = DxfPoint.Origin;
            SnapSpacing = DxfVector.Zero;
            GridSpacing = DxfVector.Zero;
            ViewDirection = DxfVector.ZAxis;
            TargetViewPoint = DxfPoint.Origin;
            ViewHeight = 0.0;
            ViewPortAspectRatio = 0.0;
            LensLength = 0.0;
            FrontClippingPlane = 0.0;
            BackClippingPlane = 0.0;
            SnapRotationAngle = 0.0;
            ViewTwistAngle = 0.0;
            ViewMode = 0;
            CircleZoomPercent = 0;
            FastZoom = true;
            UCSIcon = false;
            SnapOn = false;
            GridOn = false;
            SnapStyle = 0;
            SnapIsoPair = 0;
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs)
        {
            pairs.Add(new DxfCodePair(100, AcDbText));
			pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)Flags));
            pairs.Add(new DxfCodePair(10, LowerLeft.X));
            pairs.Add(new DxfCodePair(20, LowerLeft.Y));
            pairs.Add(new DxfCodePair(11, UpperRight.X));
            pairs.Add(new DxfCodePair(21, UpperRight.Y));
            pairs.Add(new DxfCodePair(12, ViewCenter.X));
            pairs.Add(new DxfCodePair(22, ViewCenter.Y));
            pairs.Add(new DxfCodePair(13, SnapBasePoint.X));
            pairs.Add(new DxfCodePair(23, SnapBasePoint.Y));
            pairs.Add(new DxfCodePair(14, SnapSpacing.X));
            pairs.Add(new DxfCodePair(24, SnapSpacing.Y));
            pairs.Add(new DxfCodePair(15, GridSpacing.X));
            pairs.Add(new DxfCodePair(25, GridSpacing.Y));
            pairs.Add(new DxfCodePair(16, ViewDirection.X));
            pairs.Add(new DxfCodePair(26, ViewDirection.Y));
            pairs.Add(new DxfCodePair(36, ViewDirection.Z));
            pairs.Add(new DxfCodePair(17, TargetViewPoint.X));
            pairs.Add(new DxfCodePair(27, TargetViewPoint.Y));
            pairs.Add(new DxfCodePair(37, TargetViewPoint.Z));
            pairs.Add(new DxfCodePair(40, (ViewHeight)));
            pairs.Add(new DxfCodePair(41, (ViewPortAspectRatio)));
            pairs.Add(new DxfCodePair(42, (LensLength)));
            pairs.Add(new DxfCodePair(43, (FrontClippingPlane)));
            pairs.Add(new DxfCodePair(44, (BackClippingPlane)));
            pairs.Add(new DxfCodePair(50, (SnapRotationAngle)));
            pairs.Add(new DxfCodePair(51, (ViewTwistAngle)));
            pairs.Add(new DxfCodePair(71, (short)(ViewMode)));
            pairs.Add(new DxfCodePair(72, (short)(CircleZoomPercent)));
            pairs.Add(new DxfCodePair(73, BoolShort(FastZoom)));
            pairs.Add(new DxfCodePair(74, BoolShort(UCSIcon)));
            pairs.Add(new DxfCodePair(75, BoolShort(SnapOn)));
            pairs.Add(new DxfCodePair(76, BoolShort(GridOn)));
            pairs.Add(new DxfCodePair(77, (SnapStyle)));
            pairs.Add(new DxfCodePair(78, (SnapIsoPair)));
        }

        internal static DxfViewPort FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfViewPort();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 2:
                        item.Name = pair.StringValue;
                        break;
                    case 70:
                        item.Flags = (int)pair.ShortValue;
                        break;
                    case 10:
                        item.LowerLeft.X = (pair.DoubleValue);
                        break;
                    case 20:
                        item.LowerLeft.Y = (pair.DoubleValue);
                        break;
                    case 11:
                        item.UpperRight.X = (pair.DoubleValue);
                        break;
                    case 21:
                        item.UpperRight.Y = (pair.DoubleValue);
                        break;
                    case 12:
                        item.ViewCenter.X = (pair.DoubleValue);
                        break;
                    case 22:
                        item.ViewCenter.Y = (pair.DoubleValue);
                        break;
                    case 13:
                        item.SnapBasePoint.X = (pair.DoubleValue);
                        break;
                    case 23:
                        item.SnapBasePoint.Y = (pair.DoubleValue);
                        break;
                    case 14:
                        item.SnapSpacing.X = (pair.DoubleValue);
                        break;
                    case 24:
                        item.SnapSpacing.Y = (pair.DoubleValue);
                        break;
                    case 15:
                        item.GridSpacing.X = (pair.DoubleValue);
                        break;
                    case 25:
                        item.GridSpacing.Y = (pair.DoubleValue);
                        break;
                    case 16:
                        item.ViewDirection.X = (pair.DoubleValue);
                        break;
                    case 26:
                        item.ViewDirection.Y = (pair.DoubleValue);
                        break;
                    case 36:
                        item.ViewDirection.Z = (pair.DoubleValue);
                        break;
                    case 17:
                        item.TargetViewPoint.X = (pair.DoubleValue);
                        break;
                    case 27:
                        item.TargetViewPoint.Y = (pair.DoubleValue);
                        break;
                    case 37:
                        item.TargetViewPoint.Z = (pair.DoubleValue);
                        break;
                    case 40:
                        item.ViewHeight = (pair.DoubleValue);
                        break;
                    case 41:
                        item.ViewPortAspectRatio = (pair.DoubleValue);
                        break;
                    case 42:
                        item.LensLength = (pair.DoubleValue);
                        break;
                    case 43:
                        item.FrontClippingPlane = (pair.DoubleValue);
                        break;
                    case 44:
                        item.BackClippingPlane = (pair.DoubleValue);
                        break;
                    case 50:
                        item.SnapRotationAngle = (pair.DoubleValue);
                        break;
                    case 51:
                        item.ViewTwistAngle = (pair.DoubleValue);
                        break;
                    case 71:
                        item.ViewMode = (DxfViewMode)(pair.ShortValue);
                        break;
                    case 72:
                        item.CircleZoomPercent = (int)(pair.ShortValue);
                        break;
                    case 73:
                        item.FastZoom = BoolShort(pair.ShortValue);
                        break;
                    case 74:
                        item.UCSIcon = BoolShort(pair.ShortValue);
                        break;
                    case 75:
                        item.SnapOn = BoolShort(pair.ShortValue);
                        break;
                    case 76:
                        item.GridOn = BoolShort(pair.ShortValue);
                        break;
                    case 77:
                        item.SnapStyle = (pair.ShortValue);
                        break;
                    case 78:
                        item.SnapIsoPair = (pair.ShortValue);
                        break;
                }
            }

            return item;
        }
    }
}
// This line is required for T4 template generation to work. 
// This line is required for T4 template generation to work. 


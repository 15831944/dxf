// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System.Linq;
using System.Collections.Generic;
using IxMilia.Dxf.Sections;
using IxMilia.Dxf.Tables;

namespace IxMilia.Dxf
{
    public partial class DxfLayer : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbLayerTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.Layer; } }

        public DxfColor Color { get; set; }
        public string LinetypeName { get; set; }
        public bool IsLayerPlotted { get; set; }
        public DxfLineWeight LineWeight { get; set; }
        public uint PlotStylePointer { get; set; }
        public uint MaterialHandle { get; set; }

        public DxfXData XData { get; set; }

        public DxfLayer()
            : base()
        {
            Color = DxfColor.FromIndex(7);
            LinetypeName = "CONTINUOUS";
            IsLayerPlotted = true;
            LineWeight = new DxfLineWeight();
            PlotStylePointer = 0u;
            MaterialHandle = 0u;
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(62, GetWritableColorValue(Color)));
            pairs.Add(new DxfCodePair(6, GetWritableLinetypeName(LinetypeName)));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(290, (IsLayerPlotted)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(370, DxfLineWeight.GetRawValue(LineWeight)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(390, UIntHandle(PlotStylePointer)));
            }

            if (MaterialHandle != 0u && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(347, UIntHandle(MaterialHandle)));
            }

            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
        }

        internal static DxfLayer FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfLayer();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 70:
                        item.StandardFlags = (int)pair.ShortValue;
                        break;
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case 62:
                        item.Color = item.ReadColorValue(pair.ShortValue);
                        break;
                    case 6:
                        item.LinetypeName = (pair.StringValue);
                        break;
                    case 290:
                        item.IsLayerPlotted = (pair.BoolValue);
                        break;
                    case 370:
                        item.LineWeight = DxfLineWeight.FromRawValue(pair.ShortValue);
                        break;
                    case 390:
                        item.PlotStylePointer = UIntHandle(pair.StringValue);
                        break;
                    case 347:
                        item.MaterialHandle = UIntHandle(pair.StringValue);
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        item.XData = DxfXData.FromBuffer(buffer, pair.StringValue);
                        break;
                    default:
                        item.TrySetPair(pair);
                        break;
                }
            }

            return item;
        }
    }
}

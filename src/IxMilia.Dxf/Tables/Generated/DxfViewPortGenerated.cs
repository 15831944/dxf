// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System.Linq;
using System.Collections.Generic;
using IxMilia.Dxf.Sections;
using IxMilia.Dxf.Tables;

namespace IxMilia.Dxf
{
    public partial class DxfViewPort : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbViewportTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.ViewPort; } }

        public DxfPoint LowerLeft { get; set; }
        public DxfPoint UpperRight { get; set; }
        public DxfPoint ViewCenter { get; set; }
        public DxfPoint SnapBasePoint { get; set; }
        public DxfVector SnapSpacing { get; set; }
        public DxfVector GridSpacing { get; set; }
        public DxfVector ViewDirection { get; set; }
        public DxfPoint TargetViewPoint { get; set; }
        public double ViewHeight { get; set; }
        public double ViewPortAspectRatio { get; set; }
        public double LensLength { get; set; }
        public double FrontClippingPlane { get; set; }
        public double BackClippingPlane { get; set; }
        public double SnapRotationAngle { get; set; }
        public double ViewTwistAngle { get; set; }
        public DxfViewMode ViewMode { get; set; }
        public int CircleSides { get; set; }
        public bool FastZoom { get; set; }
        public short UCSIcon { get; set; }
        public bool SnapOn { get; set; }
        public bool GridOn { get; set; }
        public DxfSnapStyle SnapStyle { get; set; }
        public DxfSnapIsometricPlane SnapIsometricPlane { get; set; }
        public string PlotStyleSheet { get; set; }
        public DxfViewRenderMode RenderMode { get; set; }
        public bool HasOwnUCS { get; set; }
        public DxfPoint UCSOrigin { get; set; }
        public DxfVector UCSXAxis { get; set; }
        public DxfVector UCSYAxis { get; set; }
        public DxfOrthographicViewType OrthographicViewType { get; set; }
        public double UCSElevation { get; set; }
        public uint UCSHandle { get; set; }
        public uint BaseUCSHandle { get; set; }
        public DxfShadeEdgeMode ShadePlotSetting { get; set; }
        public bool MajorGridLines { get; set; }
        public uint BackgroundObjectPointer { get; set; }
        public uint ShadePlotObjectPointer { get; set; }
        public uint VisualStyleObjectPointer { get; set; }
        public bool IsDefaultLightingOn { get; set; }
        public DxfDefaultLightingType DefaultLightingType { get; set; }
        public double Brightness { get; set; }
        public double Contrast { get; set; }
        public DxfColor AmbientColor { get; set; }
        public int AmbientColorInt { get; set; }
        public string AmbientColorName { get; set; }

        public DxfXData XData { get; set; }

        public DxfViewPort()
            : base()
        {
            LowerLeft = DxfPoint.Origin;
            UpperRight = new DxfPoint(1.0, 1.0, 0.0);
            ViewCenter = DxfPoint.Origin;
            SnapBasePoint = DxfPoint.Origin;
            SnapSpacing = new DxfVector(1.0, 1.0, 0.0);
            GridSpacing = new DxfVector(1.0, 1.0, 0.0);
            ViewDirection = DxfVector.ZAxis;
            TargetViewPoint = DxfPoint.Origin;
            ViewHeight = 1.0;
            ViewPortAspectRatio = 1.0;
            LensLength = 50.0;
            FrontClippingPlane = 0.0;
            BackClippingPlane = 0.0;
            ViewHeight = 1.0;
            SnapRotationAngle = 0.0;
            ViewTwistAngle = 0.0;
            ViewMode = 0;
            CircleSides = 1000;
            FastZoom = true;
            UCSIcon = 3;
            SnapOn = false;
            GridOn = false;
            SnapStyle = DxfSnapStyle.Standard;
            SnapIsometricPlane = DxfSnapIsometricPlane.Left;
            PlotStyleSheet = null;
            RenderMode = DxfViewRenderMode.Classic2D;
            HasOwnUCS = false;
            UCSOrigin = DxfPoint.Origin;
            UCSXAxis = DxfVector.XAxis;
            UCSYAxis = DxfVector.YAxis;
            OrthographicViewType = DxfOrthographicViewType.None;
            UCSElevation = 0.0;
            UCSHandle = 0u;
            BaseUCSHandle = 0u;
            ShadePlotSetting = DxfShadeEdgeMode.FacesShadedEdgeNotHighlighted;
            MajorGridLines = false;
            BackgroundObjectPointer = 0u;
            ShadePlotObjectPointer = 0u;
            VisualStyleObjectPointer = 0u;
            IsDefaultLightingOn = true;
            DefaultLightingType = DxfDefaultLightingType.OneDistantLight;
            Brightness = 0.0;
            Contrast = 0.0;
            AmbientColor = DxfColor.FromRawValue(7);
            AmbientColorInt = 0;
            AmbientColorName = "BLACK";
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(10, (LowerLeft?.X ?? 0.0)));
            pairs.Add(new DxfCodePair(20, (LowerLeft?.Y ?? 0.0)));
            pairs.Add(new DxfCodePair(11, (UpperRight?.X ?? 0.0)));
            pairs.Add(new DxfCodePair(21, (UpperRight?.Y ?? 0.0)));
            pairs.Add(new DxfCodePair(12, (ViewCenter?.X ?? 0.0)));
            pairs.Add(new DxfCodePair(22, (ViewCenter?.Y ?? 0.0)));
            pairs.Add(new DxfCodePair(13, (SnapBasePoint?.X ?? 0.0)));
            pairs.Add(new DxfCodePair(23, (SnapBasePoint?.Y ?? 0.0)));
            pairs.Add(new DxfCodePair(14, EnsurePositiveOrDefault(1.0)(SnapSpacing?.X ?? 0.0)));
            pairs.Add(new DxfCodePair(24, EnsurePositiveOrDefault(1.0)(SnapSpacing?.Y ?? 0.0)));
            pairs.Add(new DxfCodePair(15, EnsurePositiveOrDefault(1.0)(GridSpacing?.X ?? 0.0)));
            pairs.Add(new DxfCodePair(25, EnsurePositiveOrDefault(1.0)(GridSpacing?.Y ?? 0.0)));
            pairs.Add(new DxfCodePair(16, (ViewDirection?.X ?? 0.0)));
            pairs.Add(new DxfCodePair(26, (ViewDirection?.Y ?? 0.0)));
            pairs.Add(new DxfCodePair(36, (ViewDirection?.Z ?? 0.0)));
            pairs.Add(new DxfCodePair(17, (TargetViewPoint?.X ?? 0.0)));
            pairs.Add(new DxfCodePair(27, (TargetViewPoint?.Y ?? 0.0)));
            pairs.Add(new DxfCodePair(37, (TargetViewPoint?.Z ?? 0.0)));
            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(40, EnsurePositiveOrDefault(1.0)(ViewHeight)));
            }

            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(41, EnsurePositiveOrDefault(1.0)(ViewPortAspectRatio)));
            }

            pairs.Add(new DxfCodePair(42, EnsurePositiveOrDefault(50.0)(LensLength)));
            pairs.Add(new DxfCodePair(43, (FrontClippingPlane)));
            pairs.Add(new DxfCodePair(44, (BackClippingPlane)));
            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(45, EnsurePositiveOrDefault(1.0)(ViewHeight)));
            }

            pairs.Add(new DxfCodePair(50, (SnapRotationAngle)));
            pairs.Add(new DxfCodePair(51, (ViewTwistAngle)));
            pairs.Add(new DxfCodePair(71, (short)(ViewMode)));
            pairs.Add(new DxfCodePair(72, (short)EnsurePositiveOrDefault(1000)(CircleSides)));
            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(73, BoolShort(FastZoom)));
            }

            pairs.Add(new DxfCodePair(74, (short)EnsurePositiveOrDefault(3)(UCSIcon)));
            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(75, BoolShort(SnapOn)));
            }

            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(76, BoolShort(GridOn)));
            }

            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(77, (short)(SnapStyle)));
            }

            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(78, (short)(SnapIsometricPlane)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(1, (PlotStyleSheet)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(281, (short)(RenderMode)));
            }

            if (version >= DxfAcadVersion.R2000 && version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(65, BoolShort(HasOwnUCS)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(110, (UCSOrigin?.X ?? 0.0)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(120, (UCSOrigin?.Y ?? 0.0)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(130, (UCSOrigin?.Z ?? 0.0)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(111, (UCSXAxis?.X ?? 0.0)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(121, (UCSXAxis?.Y ?? 0.0)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(131, (UCSXAxis?.Z ?? 0.0)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(112, (UCSYAxis?.X ?? 0.0)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(122, (UCSYAxis?.Y ?? 0.0)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(132, (UCSYAxis?.Z ?? 0.0)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(79, (short)(OrthographicViewType)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(146, (UCSElevation)));
            }

            if (UCSHandle != 0u && HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(345, UIntHandle(UCSHandle)));
            }

            if (BaseUCSHandle != 0u && HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(346, UIntHandle(BaseUCSHandle)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(170, (short)(ShadePlotSetting)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(61, BoolShort(MajorGridLines)));
            }

            if (BackgroundObjectPointer != 0u && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(332, UIntHandle(BackgroundObjectPointer)));
            }

            if (ShadePlotObjectPointer != 0u && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(333, UIntHandle(ShadePlotObjectPointer)));
            }

            if (VisualStyleObjectPointer != 0u && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(348, UIntHandle(VisualStyleObjectPointer)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(292, (IsDefaultLightingOn)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(282, (short)(DefaultLightingType)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(141, (Brightness)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(142, (Contrast)));
            }

            if (AmbientColor?.RawValue != 7 && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(62, DxfColor.GetRawValue(AmbientColor)));
            }

            if (AmbientColorInt != 0 && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(421, (AmbientColorInt)));
            }

            if (AmbientColorName != "BLACK" && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(431, (AmbientColorName)));
            }

            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
        }

        internal static DxfViewPort FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfViewPort();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 70:
                        item.StandardFlags = (int)pair.ShortValue;
                        break;
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case 10:
                        item.LowerLeft.X = (pair.DoubleValue);
                        break;
                    case 20:
                        item.LowerLeft.Y = (pair.DoubleValue);
                        break;
                    case 11:
                        item.UpperRight.X = (pair.DoubleValue);
                        break;
                    case 21:
                        item.UpperRight.Y = (pair.DoubleValue);
                        break;
                    case 12:
                        item.ViewCenter.X = (pair.DoubleValue);
                        break;
                    case 22:
                        item.ViewCenter.Y = (pair.DoubleValue);
                        break;
                    case 13:
                        item.SnapBasePoint.X = (pair.DoubleValue);
                        break;
                    case 23:
                        item.SnapBasePoint.Y = (pair.DoubleValue);
                        break;
                    case 14:
                        item.SnapSpacing.X = (pair.DoubleValue);
                        break;
                    case 24:
                        item.SnapSpacing.Y = (pair.DoubleValue);
                        break;
                    case 15:
                        item.GridSpacing.X = (pair.DoubleValue);
                        break;
                    case 25:
                        item.GridSpacing.Y = (pair.DoubleValue);
                        break;
                    case 16:
                        item.ViewDirection.X = (pair.DoubleValue);
                        break;
                    case 26:
                        item.ViewDirection.Y = (pair.DoubleValue);
                        break;
                    case 36:
                        item.ViewDirection.Z = (pair.DoubleValue);
                        break;
                    case 17:
                        item.TargetViewPoint.X = (pair.DoubleValue);
                        break;
                    case 27:
                        item.TargetViewPoint.Y = (pair.DoubleValue);
                        break;
                    case 37:
                        item.TargetViewPoint.Z = (pair.DoubleValue);
                        break;
                    case 40:
                        item.ViewHeight = (pair.DoubleValue);
                        break;
                    case 41:
                        item.ViewPortAspectRatio = (pair.DoubleValue);
                        break;
                    case 42:
                        item.LensLength = (pair.DoubleValue);
                        break;
                    case 43:
                        item.FrontClippingPlane = (pair.DoubleValue);
                        break;
                    case 44:
                        item.BackClippingPlane = (pair.DoubleValue);
                        break;
                    case 45:
                        item.ViewHeight = (pair.DoubleValue);
                        break;
                    case 50:
                        item.SnapRotationAngle = (pair.DoubleValue);
                        break;
                    case 51:
                        item.ViewTwistAngle = (pair.DoubleValue);
                        break;
                    case 71:
                        item.ViewMode = (DxfViewMode)(pair.ShortValue);
                        break;
                    case 72:
                        item.CircleSides = (int)(pair.ShortValue);
                        break;
                    case 73:
                        item.FastZoom = BoolShort(pair.ShortValue);
                        break;
                    case 74:
                        item.UCSIcon = (pair.ShortValue);
                        break;
                    case 75:
                        item.SnapOn = BoolShort(pair.ShortValue);
                        break;
                    case 76:
                        item.GridOn = BoolShort(pair.ShortValue);
                        break;
                    case 77:
                        item.SnapStyle = (DxfSnapStyle)(pair.ShortValue);
                        break;
                    case 78:
                        item.SnapIsometricPlane = (DxfSnapIsometricPlane)(pair.ShortValue);
                        break;
                    case 1:
                        item.PlotStyleSheet = (pair.StringValue);
                        break;
                    case 281:
                        item.RenderMode = (DxfViewRenderMode)(pair.ShortValue);
                        break;
                    case 65:
                        item.HasOwnUCS = BoolShort(pair.ShortValue);
                        break;
                    case 110:
                        item.UCSOrigin.X = (pair.DoubleValue);
                        break;
                    case 120:
                        item.UCSOrigin.Y = (pair.DoubleValue);
                        break;
                    case 130:
                        item.UCSOrigin.Z = (pair.DoubleValue);
                        break;
                    case 111:
                        item.UCSXAxis.X = (pair.DoubleValue);
                        break;
                    case 121:
                        item.UCSXAxis.Y = (pair.DoubleValue);
                        break;
                    case 131:
                        item.UCSXAxis.Z = (pair.DoubleValue);
                        break;
                    case 112:
                        item.UCSYAxis.X = (pair.DoubleValue);
                        break;
                    case 122:
                        item.UCSYAxis.Y = (pair.DoubleValue);
                        break;
                    case 132:
                        item.UCSYAxis.Z = (pair.DoubleValue);
                        break;
                    case 79:
                        item.OrthographicViewType = (DxfOrthographicViewType)(pair.ShortValue);
                        break;
                    case 146:
                        item.UCSElevation = (pair.DoubleValue);
                        break;
                    case 345:
                        item.UCSHandle = UIntHandle(pair.StringValue);
                        break;
                    case 346:
                        item.BaseUCSHandle = UIntHandle(pair.StringValue);
                        break;
                    case 170:
                        item.ShadePlotSetting = (DxfShadeEdgeMode)(pair.ShortValue);
                        break;
                    case 61:
                        item.MajorGridLines = BoolShort(pair.ShortValue);
                        break;
                    case 332:
                        item.BackgroundObjectPointer = UIntHandle(pair.StringValue);
                        break;
                    case 333:
                        item.ShadePlotObjectPointer = UIntHandle(pair.StringValue);
                        break;
                    case 348:
                        item.VisualStyleObjectPointer = UIntHandle(pair.StringValue);
                        break;
                    case 292:
                        item.IsDefaultLightingOn = (pair.BoolValue);
                        break;
                    case 282:
                        item.DefaultLightingType = (DxfDefaultLightingType)(pair.ShortValue);
                        break;
                    case 141:
                        item.Brightness = (pair.DoubleValue);
                        break;
                    case 142:
                        item.Contrast = (pair.DoubleValue);
                        break;
                    case 62:
                        item.AmbientColor = DxfColor.FromRawValue(pair.ShortValue);
                        break;
                    case 421:
                        item.AmbientColorInt = (pair.IntegerValue);
                        break;
                    case 431:
                        item.AmbientColorName = (pair.StringValue);
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        item.XData = DxfXData.FromBuffer(buffer, pair.StringValue);
                        break;
                    default:
                        item.TrySetPair(pair);
                        break;
                }
            }

            return item;
        }
    }
}
